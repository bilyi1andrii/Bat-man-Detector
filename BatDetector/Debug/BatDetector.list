
BatDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800b66c  0800b66c  0000c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8dc  0800b8dc  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8dc  0800b8dc  0000c8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8e4  0800b8e4  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e4  0800b8e4  0000c8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8e8  0800b8e8  0000c8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800b8ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  20000088  0800b974  0000d088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba8  0800b974  0000dba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001895b  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004947  00000000  00000000  00025a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0002a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  0002b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd84  00000000  00000000  0002c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fad2  00000000  00000000  00049483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e0cc  00000000  00000000  00068f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005888  00000000  00000000  00107064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b654 	.word	0x0800b654

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	0800b654 	.word	0x0800b654

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b36      	ldr	r3, [pc, #216]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004dc:	4a36      	ldr	r2, [pc, #216]	@ (80005b8 <MX_ADC1_Init+0xf0>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b34      	ldr	r3, [pc, #208]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b32      	ldr	r3, [pc, #200]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004ee:	4b31      	ldr	r3, [pc, #196]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f4:	4b2f      	ldr	r3, [pc, #188]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b2e      	ldr	r3, [pc, #184]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b2c      	ldr	r3, [pc, #176]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800050a:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <MX_ADC1_Init+0xf4>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000514:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000516:	2204      	movs	r2, #4
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000522:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	4822      	ldr	r0, [pc, #136]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800052a:	f000 fe9f 	bl	800126c <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fc44 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	481a      	ldr	r0, [pc, #104]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800054a:	f001 f923 	bl	8001794 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fc34 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000558:	2301      	movs	r3, #1
 800055a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000566:	f001 f915 	bl	8001794 <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 fc26 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000574:	2302      	movs	r3, #2
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000578:	2303      	movs	r3, #3
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000582:	f001 f907 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800058c:	f000 fc18 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000590:	2303      	movs	r3, #3
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800059e:	f001 f8f9 	bl	8001794 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005a8:	f000 fc0a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000a4 	.word	0x200000a4
 80005b8:	40012000 	.word	0x40012000
 80005bc:	0f000001 	.word	0x0f000001

080005c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <HAL_ADC_MspInit+0xdc>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d157      	bne.n	8000692 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ea:	4a2d      	ldr	r2, [pc, #180]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800061a:	230f      	movs	r3, #15
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	481d      	ldr	r0, [pc, #116]	@ (80006a4 <HAL_ADC_MspInit+0xe4>)
 800062e:	f002 f9dd 	bl	80029ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000634:	4a1d      	ldr	r2, [pc, #116]	@ (80006ac <HAL_ADC_MspInit+0xec>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800064c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800065c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000678:	f001 fcce 	bl	8002018 <HAL_DMA_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000682:	f000 fb9d 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068a:	639a      	str	r2, [r3, #56]	@ 0x38
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	@ 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	200000ec 	.word	0x200000ec
 80006ac:	40026410 	.word	0x40026410

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2038      	movs	r0, #56	@ 0x38
 80006d8:	f001 fc4e 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006dc:	2038      	movs	r0, #56	@ 0x38
 80006de:	f001 fc77 	bl	8001fd0 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	@ 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b5b      	ldr	r3, [pc, #364]	@ (8000878 <MX_GPIO_Init+0x188>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a5a      	ldr	r2, [pc, #360]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a53      	ldr	r2, [pc, #332]	@ (8000878 <MX_GPIO_Init+0x188>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a4c      	ldr	r2, [pc, #304]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b4a      	ldr	r3, [pc, #296]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a45      	ldr	r2, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b43      	ldr	r3, [pc, #268]	@ (8000878 <MX_GPIO_Init+0x188>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a3e      	ldr	r2, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b3c      	ldr	r3, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <MX_GPIO_Init+0x188>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4832      	ldr	r0, [pc, #200]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007b4:	f002 fbb2 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4830      	ldr	r0, [pc, #192]	@ (8000880 <MX_GPIO_Init+0x190>)
 80007be:	f002 fbad 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007c8:	482e      	ldr	r0, [pc, #184]	@ (8000884 <MX_GPIO_Init+0x194>)
 80007ca:	f002 fba7 	bl	8002f1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80007ce:	2304      	movs	r3, #4
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4826      	ldr	r0, [pc, #152]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007e2:	f002 f903 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	481f      	ldr	r0, [pc, #124]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007fe:	f002 f8f5 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000802:	2332      	movs	r3, #50	@ 0x32
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000806:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_GPIO_Init+0x18c>)
 8000818:	f002 f8e8 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4813      	ldr	r0, [pc, #76]	@ (8000880 <MX_GPIO_Init+0x190>)
 8000834:	f002 f8da 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000838:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800083c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0x194>)
 8000852:	f002 f8cb 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x194>)
 800086a:	f002 f8bf 	bl	80029ec <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	@ 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40021000 	.word	0x40021000
 8000880:	40020800 	.word	0x40020800
 8000884:	40020c00 	.word	0x40020c00

08000888 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f004 fc95 	bl	80051f4 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 fa76 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000014c 	.word	0x2000014c
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <HAL_I2C_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12c      	bne.n	8000960 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000922:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000934:	2304      	movs	r3, #4
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	@ (8000970 <HAL_I2C_MspInit+0x8c>)
 8000940:	f002 f854 	bl	80029ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000952:	6413      	str	r3, [r2, #64]	@ 0x40
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400

08000974 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_I2S2_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000984:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800099a:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <MX_I2S2_Init+0x58>)
 800099c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009b2:	f004 fde7 	bl	8005584 <HAL_I2S_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 fa00 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001a0 	.word	0x200001a0
 80009c8:	40003800 	.word	0x40003800
 80009cc:	00017700 	.word	0x00017700

080009d0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009d6:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <MX_I2S3_Init+0x58>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009f8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <MX_I2S3_Init+0x5c>)
 80009fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a10:	f004 fdb8 	bl	8005584 <HAL_I2S_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 f9d1 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001e8 	.word	0x200001e8
 8000a28:	40003c00 	.word	0x40003c00
 8000a2c:	00017700 	.word	0x00017700

08000a30 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	@ 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a59      	ldr	r2, [pc, #356]	@ (8000bb4 <HAL_I2S_MspInit+0x184>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d15b      	bne.n	8000b0a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
 8000a56:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	4a57      	ldr	r2, [pc, #348]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a62:	4b55      	ldr	r3, [pc, #340]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	4b51      	ldr	r3, [pc, #324]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a50      	ldr	r2, [pc, #320]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a49      	ldr	r2, [pc, #292]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b47      	ldr	r3, [pc, #284]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	483e      	ldr	r0, [pc, #248]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ac2:	f001 ff93 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4836      	ldr	r0, [pc, #216]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ae2:	f001 ff83 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af8:	2305      	movs	r3, #5
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	482f      	ldr	r0, [pc, #188]	@ (8000bc0 <HAL_I2S_MspInit+0x190>)
 8000b04:	f001 ff72 	bl	80029ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b08:	e04f      	b.n	8000baa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <HAL_I2S_MspInit+0x194>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d14a      	bne.n	8000baa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <HAL_I2S_MspInit+0x198>)
 8000b84:	f001 ff32 	bl	80029ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b88:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ba6:	f001 ff21 	bl	80029ec <HAL_GPIO_Init>
}
 8000baa:	bf00      	nop
 8000bac:	3738      	adds	r7, #56	@ 0x38
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40003800 	.word	0x40003800
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40003c00 	.word	0x40003c00
 8000bc8:	40020000 	.word	0x40020000

08000bcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000be4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000be8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000bec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf4:	e000      	b.n	8000bf8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bf6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c02:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	(void)file;
	    for (int i = 0; i < len; i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e009      	b.n	8000c40 <_write+0x26>
	        ITM_SendChar(*ptr++);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffc9 	bl	8000bcc <ITM_SendChar>
	    for (int i = 0; i < len; i++) {
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf1      	blt.n	8000c2c <_write+0x12>
	    }
	    return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fa72 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f828 	bl	8000cb0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c60:	f000 f88e 	bl	8000d80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f7ff fd44 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f7ff fd22 	bl	80006b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c6c:	f7ff fe0c 	bl	8000888 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c70:	f7ff fe80 	bl	8000974 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000c74:	f7ff feac 	bl	80009d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c78:	f000 f8b4 	bl	8000de4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000c7c:	f009 fd24 	bl	800a6c8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000c80:	f7ff fc22 	bl	80004c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 4);
 8000c84:	2204      	movs	r2, #4
 8000c86:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <main+0x50>)
 8000c88:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <main+0x54>)
 8000c8a:	f000 fc4d 	bl	8001528 <HAL_ADC_Start_DMA>

//	  printf("PA0: %u\n", adc_values[0]);
//	  printf("PA1: %u\n", adc_values[1]);
//	  printf("PA2: %u\n", adc_values[2]);
//	  printf("PA3: %u\n", adc_values[3]);
	  printf("Hello world!\n");
 8000c8e:	4807      	ldr	r0, [pc, #28]	@ (8000cac <main+0x58>)
 8000c90:	f00a f9fa 	bl	800b088 <puts>

	  HAL_Delay(1000);
 8000c94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c98:	f000 fac4 	bl	8001224 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c9c:	f009 fd3a 	bl	800a714 <MX_USB_HOST_Process>
	  printf("Hello world!\n");
 8000ca0:	bf00      	nop
 8000ca2:	e7f4      	b.n	8000c8e <main+0x3a>
 8000ca4:	20000230 	.word	0x20000230
 8000ca8:	200000a4 	.word	0x200000a4
 8000cac:	0800b66c 	.word	0x0800b66c

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	@ 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	2230      	movs	r2, #48	@ 0x30
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00a fac2 	bl	800b248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <SystemClock_Config+0xc8>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	4a26      	ldr	r2, [pc, #152]	@ (8000d78 <SystemClock_Config+0xc8>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce4:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <SystemClock_Config+0xc8>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <SystemClock_Config+0xcc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <SystemClock_Config+0xcc>)
 8000cfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <SystemClock_Config+0xcc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d24:	23c0      	movs	r3, #192	@ 0xc0
 8000d26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 f983 	bl	8006040 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d40:	f000 f83e 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2103      	movs	r1, #3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 fc99 	bl	8006698 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d6c:	f000 f828 	bl	8000dc0 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3750      	adds	r7, #80	@ 0x50
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000

08000d80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d96:	2301      	movs	r3, #1
 8000d98:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000d9a:	23c8      	movs	r3, #200	@ 0xc8
 8000d9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 ff29 	bl	8006c00 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000db4:	f000 f804 	bl	8000dc0 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <MX_SPI1_Init+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e30:	220a      	movs	r2, #10
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e36:	f006 f95b 	bl	80070f0 <HAL_SPI_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e40:	f7ff ffbe 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000240 	.word	0x20000240
 8000e4c:	40013000 	.word	0x40013000

08000e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <HAL_SPI_MspInit+0x84>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12b      	bne.n	8000eca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eaa:	23e0      	movs	r3, #224	@ 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000ec6:	f001 fd91 	bl	80029ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f001 f80a 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <MemManage_Handler+0x4>

08000f48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f92d 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA2_Stream0_IRQHandler+0x10>)
 8000f96:	f001 fabf 	bl	8002518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000ec 	.word	0x200000ec

08000fa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <OTG_FS_IRQHandler+0x10>)
 8000faa:	f002 facf 	bl	800354c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000067c 	.word	0x2000067c

08000fb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e00a      	b.n	8000fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fca:	f3af 8000 	nop.w
 8000fce:	4601      	mov	r1, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf0      	blt.n	8000fca <_read+0x12>
  }

  return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101a:	605a      	str	r2, [r3, #4]
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_isatty>:

int _isatty(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f00a f93a 	bl	800b304 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000298 	.word	0x20000298
 80010c4:	20000ba8 	.word	0x20000ba8

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f0:	f7ff ffea 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f00a f8f9 	bl	800b310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fd99 	bl	8000c54 <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001130:	0800b8ec 	.word	0x0800b8ec
  ldr r2, =_sbss
 8001134:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001138:	20000ba8 	.word	0x20000ba8

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 fee5 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff feb4 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff2c 	bl	8002000 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 feda 	bl	8001f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	2000029c 	.word	0x2000029c

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000029c 	.word	0x2000029c

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e14e      	b.n	8001520 <HAL_ADC_Init+0x2b4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a90      	ldr	r2, [pc, #576]	@ (80014c8 <HAL_ADC_Init+0x25c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Init+0x2a>
 800128c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8001290:	488e      	ldr	r0, [pc, #568]	@ (80014cc <HAL_ADC_Init+0x260>)
 8001292:	f7ff fd9b 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d013      	beq.n	80012c6 <HAL_ADC_Init+0x5a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a6:	d00e      	beq.n	80012c6 <HAL_ADC_Init+0x5a>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012b0:	d009      	beq.n	80012c6 <HAL_ADC_Init+0x5a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Init+0x5a>
 80012bc:	f240 1143 	movw	r1, #323	@ 0x143
 80012c0:	4882      	ldr	r0, [pc, #520]	@ (80014cc <HAL_ADC_Init+0x260>)
 80012c2:	f7ff fd83 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d013      	beq.n	80012f6 <HAL_ADC_Init+0x8a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d6:	d00e      	beq.n	80012f6 <HAL_ADC_Init+0x8a>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80012e0:	d009      	beq.n	80012f6 <HAL_ADC_Init+0x8a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80012ea:	d004      	beq.n	80012f6 <HAL_ADC_Init+0x8a>
 80012ec:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80012f0:	4876      	ldr	r0, [pc, #472]	@ (80014cc <HAL_ADC_Init+0x260>)
 80012f2:	f7ff fd6b 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_ADC_Init+0xa4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d004      	beq.n	8001310 <HAL_ADC_Init+0xa4>
 8001306:	f240 1145 	movw	r1, #325	@ 0x145
 800130a:	4870      	ldr	r0, [pc, #448]	@ (80014cc <HAL_ADC_Init+0x260>)
 800130c:	f7ff fd5e 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_ADC_Init+0xbe>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d004      	beq.n	800132a <HAL_ADC_Init+0xbe>
 8001320:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8001324:	4869      	ldr	r0, [pc, #420]	@ (80014cc <HAL_ADC_Init+0x260>)
 8001326:	f7ff fd51 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	2b00      	cmp	r3, #0
 8001330:	d054      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800133a:	d04f      	beq.n	80013dc <HAL_ADC_Init+0x170>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001344:	d04a      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800134e:	d045      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001358:	d040      	beq.n	80013dc <HAL_ADC_Init+0x170>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8001362:	d03b      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800136c:	d036      	beq.n	80013dc <HAL_ADC_Init+0x170>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001372:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8001376:	d031      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001380:	d02c      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800138a:	d027      	beq.n	80013dc <HAL_ADC_Init+0x170>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001390:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8001394:	d022      	beq.n	80013dc <HAL_ADC_Init+0x170>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 800139e:	d01d      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80013a8:	d018      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ae:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 80013b2:	d013      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80013bc:	d00e      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80013c6:	d009      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	4a40      	ldr	r2, [pc, #256]	@ (80014d0 <HAL_ADC_Init+0x264>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d004      	beq.n	80013dc <HAL_ADC_Init+0x170>
 80013d2:	f240 1147 	movw	r1, #327	@ 0x147
 80013d6:	483d      	ldr	r0, [pc, #244]	@ (80014cc <HAL_ADC_Init+0x260>)
 80013d8:	f7ff fcf8 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_ADC_Init+0x18c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013ec:	d004      	beq.n	80013f8 <HAL_ADC_Init+0x18c>
 80013ee:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80013f2:	4836      	ldr	r0, [pc, #216]	@ (80014cc <HAL_ADC_Init+0x260>)
 80013f4:	f7ff fcea 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_Init+0x19c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d904      	bls.n	8001412 <HAL_ADC_Init+0x1a6>
 8001408:	f240 1149 	movw	r1, #329	@ 0x149
 800140c:	482f      	ldr	r0, [pc, #188]	@ (80014cc <HAL_ADC_Init+0x260>)
 800140e:	f7ff fcdd 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001418:	2b00      	cmp	r3, #0
 800141a:	d009      	beq.n	8001430 <HAL_ADC_Init+0x1c4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001422:	2b01      	cmp	r3, #1
 8001424:	d004      	beq.n	8001430 <HAL_ADC_Init+0x1c4>
 8001426:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800142a:	4828      	ldr	r0, [pc, #160]	@ (80014cc <HAL_ADC_Init+0x260>)
 800142c:	f7ff fcce 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d00c      	beq.n	8001452 <HAL_ADC_Init+0x1e6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_ADC_Init+0x1e6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d004      	beq.n	8001452 <HAL_ADC_Init+0x1e6>
 8001448:	f240 114b 	movw	r1, #331	@ 0x14b
 800144c:	481f      	ldr	r0, [pc, #124]	@ (80014cc <HAL_ADC_Init+0x260>)
 800144e:	f7ff fcbd 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <HAL_ADC_Init+0x204>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d004      	beq.n	8001470 <HAL_ADC_Init+0x204>
 8001466:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <HAL_ADC_Init+0x260>)
 800146c:	f7ff fcae 	bl	8000dcc <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	4a16      	ldr	r2, [pc, #88]	@ (80014d0 <HAL_ADC_Init+0x264>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d017      	beq.n	80014aa <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d013      	beq.n	80014aa <HAL_ADC_Init+0x23e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800148a:	d00e      	beq.n	80014aa <HAL_ADC_Init+0x23e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001494:	d009      	beq.n	80014aa <HAL_ADC_Init+0x23e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800149e:	d004      	beq.n	80014aa <HAL_ADC_Init+0x23e>
 80014a0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_ADC_Init+0x260>)
 80014a6:	f7ff fc91 	bl	8000dcc <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d110      	bne.n	80014d4 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff f884 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80014c6:	e005      	b.n	80014d4 <HAL_ADC_Init+0x268>
 80014c8:	40012000 	.word	0x40012000
 80014cc:	0800b67c 	.word	0x0800b67c
 80014d0:	0f000001 	.word	0x0f000001
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d118      	bne.n	8001512 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014e8:	f023 0302 	bic.w	r3, r3, #2
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fac3 	bl	8001a80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001510:	e001      	b.n	8001516 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_ADC_Start_DMA+0x2a>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d004      	beq.n	8001552 <HAL_ADC_Start_DMA+0x2a>
 8001548:	f240 515a 	movw	r1, #1370	@ 0x55a
 800154c:	487a      	ldr	r0, [pc, #488]	@ (8001738 <HAL_ADC_Start_DMA+0x210>)
 800154e:	f7ff fc3d 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d013      	beq.n	8001582 <HAL_ADC_Start_DMA+0x5a>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001562:	d00e      	beq.n	8001582 <HAL_ADC_Start_DMA+0x5a>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800156c:	d009      	beq.n	8001582 <HAL_ADC_Start_DMA+0x5a>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Start_DMA+0x5a>
 8001578:	f240 515b 	movw	r1, #1371	@ 0x55b
 800157c:	486e      	ldr	r0, [pc, #440]	@ (8001738 <HAL_ADC_Start_DMA+0x210>)
 800157e:	f7ff fc25 	bl	8000dcc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Start_DMA+0x68>
 800158c:	2302      	movs	r3, #2
 800158e:	e0ce      	b.n	800172e <HAL_ADC_Start_DMA+0x206>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d018      	beq.n	80015d8 <HAL_ADC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b6:	4b61      	ldr	r3, [pc, #388]	@ (800173c <HAL_ADC_Start_DMA+0x214>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_ADC_Start_DMA+0x218>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	0c9a      	lsrs	r2, r3, #18
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015ca:	e002      	b.n	80015d2 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f9      	bne.n	80015cc <HAL_ADC_Start_DMA+0xa4>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e6:	d107      	bne.n	80015f8 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f6:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	f040 8086 	bne.w	8001714 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001632:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001646:	d106      	bne.n	8001656 <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	f023 0206 	bic.w	r2, r3, #6
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	645a      	str	r2, [r3, #68]	@ 0x44
 8001654:	e002      	b.n	800165c <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_ADC_Start_DMA+0x21c>)
 8001666:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166c:	4a36      	ldr	r2, [pc, #216]	@ (8001748 <HAL_ADC_Start_DMA+0x220>)
 800166e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001674:	4a35      	ldr	r2, [pc, #212]	@ (800174c <HAL_ADC_Start_DMA+0x224>)
 8001676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167c:	4a34      	ldr	r2, [pc, #208]	@ (8001750 <HAL_ADC_Start_DMA+0x228>)
 800167e:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001688:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001698:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016a8:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	334c      	adds	r3, #76	@ 0x4c
 80016b4:	4619      	mov	r1, r3
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f000 fec7 	bl	800244c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_ADC_Start_DMA+0x1c2>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d129      	bne.n	800172c <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e020      	b.n	800172c <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <HAL_ADC_Start_DMA+0x22c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d11b      	bne.n	800172c <HAL_ADC_Start_DMA+0x204>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d114      	bne.n	800172c <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	e00b      	b.n	800172c <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	0800b67c 	.word	0x0800b67c
 800173c:	20000000 	.word	0x20000000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	40012300 	.word	0x40012300
 8001748:	08001c95 	.word	0x08001c95
 800174c:	08001d4f 	.word	0x08001d4f
 8001750:	08001d6b 	.word	0x08001d6b
 8001754:	40012000 	.word	0x40012000

08001758 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d909      	bls.n	80017be <HAL_ADC_ConfigChannel+0x2a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <HAL_ADC_ConfigChannel+0x1e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_ADC_ConfigChannel+0x2a>
 80017b4:	f240 618b 	movw	r1, #1675	@ 0x68b
 80017b8:	4870      	ldr	r0, [pc, #448]	@ (800197c <HAL_ADC_ConfigChannel+0x1e8>)
 80017ba:	f7ff fb07 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x3a>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d904      	bls.n	80017d8 <HAL_ADC_ConfigChannel+0x44>
 80017ce:	f240 618c 	movw	r1, #1676	@ 0x68c
 80017d2:	486a      	ldr	r0, [pc, #424]	@ (800197c <HAL_ADC_ConfigChannel+0x1e8>)
 80017d4:	f7ff fafa 	bl	8000dcc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d01c      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d018      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d014      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d010      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d00c      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b06      	cmp	r3, #6
 800180e:	d008      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d004      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x8e>
 8001818:	f240 618d 	movw	r1, #1677	@ 0x68d
 800181c:	4857      	ldr	r0, [pc, #348]	@ (800197c <HAL_ADC_ConfigChannel+0x1e8>)
 800181e:	f7ff fad5 	bl	8000dcc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x9c>
 800182c:	2302      	movs	r3, #2
 800182e:	e118      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x2ce>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b09      	cmp	r3, #9
 800183e:	d925      	bls.n	800188c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68d9      	ldr	r1, [r3, #12]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3b1e      	subs	r3, #30
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43da      	mvns	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	400a      	ands	r2, r1
 8001864:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68d9      	ldr	r1, [r3, #12]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	4603      	mov	r3, r0
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4403      	add	r3, r0
 800187e:	3b1e      	subs	r3, #30
 8001880:	409a      	lsls	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e022      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6919      	ldr	r1, [r3, #16]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	2207      	movs	r2, #7
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	400a      	ands	r2, r1
 80018ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6919      	ldr	r1, [r3, #16]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4403      	add	r3, r0
 80018c8:	409a      	lsls	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d824      	bhi.n	8001924 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b05      	subs	r3, #5
 80018ec:	221f      	movs	r2, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b05      	subs	r3, #5
 8001916:	fa00 f203 	lsl.w	r2, r0, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	@ 0x34
 8001922:	e051      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d829      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b23      	subs	r3, #35	@ 0x23
 800193e:	221f      	movs	r2, #31
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b23      	subs	r3, #35	@ 0x23
 8001968:	fa00 f203 	lsl.w	r2, r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
 8001974:	e028      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x234>
 8001976:	bf00      	nop
 8001978:	10000012 	.word	0x10000012
 800197c:	0800b67c 	.word	0x0800b67c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	221f      	movs	r2, #31
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43da      	mvns	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	400a      	ands	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3b41      	subs	r3, #65	@ 0x41
 80019bc:	fa00 f203 	lsl.w	r2, r0, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_ADC_ConfigChannel+0x2d8>)
 80019ca:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <HAL_ADC_ConfigChannel+0x2dc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10f      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x262>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d10b      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <HAL_ADC_ConfigChannel+0x2dc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d12b      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2c4>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_ADC_ConfigChannel+0x2e0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x27e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d122      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a11      	ldr	r2, [pc, #68]	@ (8001a74 <HAL_ADC_ConfigChannel+0x2e0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_ADC_ConfigChannel+0x2e4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_ADC_ConfigChannel+0x2e8>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0c9a      	lsrs	r2, r3, #18
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	40012000 	.word	0x40012000
 8001a74:	10000012 	.word	0x10000012
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	431bde83 	.word	0x431bde83

08001a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a88:	4b7f      	ldr	r3, [pc, #508]	@ (8001c88 <ADC_Init+0x208>)
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	021a      	lsls	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <ADC_Init+0x20c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d022      	beq.n	8001b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6899      	ldr	r1, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e00f      	b.n	8001b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0202 	bic.w	r2, r2, #2
 8001b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7e1b      	ldrb	r3, [r3, #24]
 8001b98:	005a      	lsls	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d028      	beq.n	8001bfe <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <ADC_Init+0x13c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d904      	bls.n	8001bc6 <ADC_Init+0x146>
 8001bbc:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8001bc0:	4833      	ldr	r0, [pc, #204]	@ (8001c90 <ADC_Init+0x210>)
 8001bc2:	f7ff f903 	bl	8000dcc <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bd4:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001be4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	035a      	lsls	r2, r3, #13
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	e007      	b.n	8001c0e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c0c:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	051a      	lsls	r2, r3, #20
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6899      	ldr	r1, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c50:	025a      	lsls	r2, r3, #9
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6899      	ldr	r1, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	029a      	lsls	r2, r3, #10
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	0f000001 	.word	0x0f000001
 8001c90:	0800b67c 	.word	0x0800b67c

08001c94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13c      	bne.n	8001d28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d12b      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d127      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d119      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0220 	bic.w	r2, r2, #32
 8001cfa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fd19 	bl	8001758 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d26:	e00e      	b.n	8001d46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff fd23 	bl	8001780 <HAL_ADC_ErrorCallback>
}
 8001d3a:	e004      	b.n	8001d46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fd05 	bl	800176c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fcf8 	bl	8001780 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <__NVIC_SetPriorityGrouping>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	@ (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b07      	cmp	r3, #7
 8001f44:	d00f      	beq.n	8001f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d00c      	beq.n	8001f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d009      	beq.n	8001f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d006      	beq.n	8001f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d003      	beq.n	8001f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f5e:	2190      	movs	r1, #144	@ 0x90
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001f62:	f7fe ff33 	bl	8000dcc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff16 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800b6b4 	.word	0x0800b6b4

08001f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d903      	bls.n	8001f98 <HAL_NVIC_SetPriority+0x20>
 8001f90:	21a8      	movs	r1, #168	@ 0xa8
 8001f92:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <HAL_NVIC_SetPriority+0x54>)
 8001f94:	f7fe ff1a 	bl	8000dcc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	d903      	bls.n	8001fa6 <HAL_NVIC_SetPriority+0x2e>
 8001f9e:	21a9      	movs	r1, #169	@ 0xa9
 8001fa0:	480a      	ldr	r0, [pc, #40]	@ (8001fcc <HAL_NVIC_SetPriority+0x54>)
 8001fa2:	f7fe ff13 	bl	8000dcc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa6:	f7ff ff1b 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001faa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	6978      	ldr	r0, [r7, #20]
 8001fb2:	f7ff ff6b 	bl	8001e8c <NVIC_EncodePriority>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff3a 	bl	8001e38 <__NVIC_SetPriority>
}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800b6b4 	.word	0x0800b6b4

08001fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da03      	bge.n	8001fea <HAL_NVIC_EnableIRQ+0x1a>
 8001fe2:	21bc      	movs	r1, #188	@ 0xbc
 8001fe4:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <HAL_NVIC_EnableIRQ+0x2c>)
 8001fe6:	f7fe fef1 	bl	8000dcc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff04 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	0800b6b4 	.word	0x0800b6b4

08002000 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff73 	bl	8001ef4 <SysTick_Config>
 800200e:	4603      	mov	r3, r0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff f8f2 	bl	800120c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e203      	b.n	800243c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a8b      	ldr	r2, [pc, #556]	@ (8002268 <HAL_DMA_Init+0x250>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04e      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8a      	ldr	r2, [pc, #552]	@ (800226c <HAL_DMA_Init+0x254>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d049      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a88      	ldr	r2, [pc, #544]	@ (8002270 <HAL_DMA_Init+0x258>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d044      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a87      	ldr	r2, [pc, #540]	@ (8002274 <HAL_DMA_Init+0x25c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d03f      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a85      	ldr	r2, [pc, #532]	@ (8002278 <HAL_DMA_Init+0x260>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03a      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a84      	ldr	r2, [pc, #528]	@ (800227c <HAL_DMA_Init+0x264>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d035      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a82      	ldr	r2, [pc, #520]	@ (8002280 <HAL_DMA_Init+0x268>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d030      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a81      	ldr	r2, [pc, #516]	@ (8002284 <HAL_DMA_Init+0x26c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02b      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a7f      	ldr	r2, [pc, #508]	@ (8002288 <HAL_DMA_Init+0x270>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d026      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7e      	ldr	r2, [pc, #504]	@ (800228c <HAL_DMA_Init+0x274>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d021      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7c      	ldr	r2, [pc, #496]	@ (8002290 <HAL_DMA_Init+0x278>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01c      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002294 <HAL_DMA_Init+0x27c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d017      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a79      	ldr	r2, [pc, #484]	@ (8002298 <HAL_DMA_Init+0x280>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d012      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a78      	ldr	r2, [pc, #480]	@ (800229c <HAL_DMA_Init+0x284>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a76      	ldr	r2, [pc, #472]	@ (80022a0 <HAL_DMA_Init+0x288>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d008      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	@ (80022a4 <HAL_DMA_Init+0x28c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_DMA_Init+0xc4>
 80020d4:	21b7      	movs	r1, #183	@ 0xb7
 80020d6:	4874      	ldr	r0, [pc, #464]	@ (80022a8 <HAL_DMA_Init+0x290>)
 80020d8:	f7fe fe78 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d026      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ec:	d021      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020f6:	d01c      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8002100:	d017      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800210a:	d012      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8002114:	d00d      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8002128:	d003      	beq.n	8002132 <HAL_DMA_Init+0x11a>
 800212a:	21b8      	movs	r1, #184	@ 0xb8
 800212c:	485e      	ldr	r0, [pc, #376]	@ (80022a8 <HAL_DMA_Init+0x290>)
 800212e:	f7fe fe4d 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_DMA_Init+0x13a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b40      	cmp	r3, #64	@ 0x40
 8002140:	d007      	beq.n	8002152 <HAL_DMA_Init+0x13a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b80      	cmp	r3, #128	@ 0x80
 8002148:	d003      	beq.n	8002152 <HAL_DMA_Init+0x13a>
 800214a:	21b9      	movs	r1, #185	@ 0xb9
 800214c:	4856      	ldr	r0, [pc, #344]	@ (80022a8 <HAL_DMA_Init+0x290>)
 800214e:	f7fe fe3d 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215a:	d007      	beq.n	800216c <HAL_DMA_Init+0x154>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_Init+0x154>
 8002164:	21ba      	movs	r1, #186	@ 0xba
 8002166:	4850      	ldr	r0, [pc, #320]	@ (80022a8 <HAL_DMA_Init+0x290>)
 8002168:	f7fe fe30 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Init+0x16e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_DMA_Init+0x16e>
 800217e:	21bb      	movs	r1, #187	@ 0xbb
 8002180:	4849      	ldr	r0, [pc, #292]	@ (80022a8 <HAL_DMA_Init+0x290>)
 8002182:	f7fe fe23 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_DMA_Init+0x192>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Init+0x192>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a0:	d003      	beq.n	80021aa <HAL_DMA_Init+0x192>
 80021a2:	21bc      	movs	r1, #188	@ 0xbc
 80021a4:	4840      	ldr	r0, [pc, #256]	@ (80022a8 <HAL_DMA_Init+0x290>)
 80021a6:	f7fe fe11 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <HAL_DMA_Init+0x1b6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Init+0x1b6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c4:	d003      	beq.n	80021ce <HAL_DMA_Init+0x1b6>
 80021c6:	21bd      	movs	r1, #189	@ 0xbd
 80021c8:	4837      	ldr	r0, [pc, #220]	@ (80022a8 <HAL_DMA_Init+0x290>)
 80021ca:	f7fe fdff 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_DMA_Init+0x1d8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Init+0x1d8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_Init+0x1d8>
 80021e8:	21be      	movs	r1, #190	@ 0xbe
 80021ea:	482f      	ldr	r0, [pc, #188]	@ (80022a8 <HAL_DMA_Init+0x290>)
 80021ec:	f7fe fdee 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <HAL_DMA_Init+0x206>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d00d      	beq.n	800221e <HAL_DMA_Init+0x206>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800220a:	d008      	beq.n	800221e <HAL_DMA_Init+0x206>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002214:	d003      	beq.n	800221e <HAL_DMA_Init+0x206>
 8002216:	21bf      	movs	r1, #191	@ 0xbf
 8002218:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <HAL_DMA_Init+0x290>)
 800221a:	f7fe fdd7 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_DMA_Init+0x21e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d003      	beq.n	8002236 <HAL_DMA_Init+0x21e>
 800222e:	21c0      	movs	r1, #192	@ 0xc0
 8002230:	481d      	ldr	r0, [pc, #116]	@ (80022a8 <HAL_DMA_Init+0x290>)
 8002232:	f7fe fdcb 	bl	8000dcc <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d064      	beq.n	8002308 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	2b00      	cmp	r3, #0
 8002244:	d032      	beq.n	80022ac <HAL_DMA_Init+0x294>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	2b01      	cmp	r3, #1
 800224c:	d02e      	beq.n	80022ac <HAL_DMA_Init+0x294>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	2b02      	cmp	r3, #2
 8002254:	d02a      	beq.n	80022ac <HAL_DMA_Init+0x294>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	2b03      	cmp	r3, #3
 800225c:	d026      	beq.n	80022ac <HAL_DMA_Init+0x294>
 800225e:	21c5      	movs	r1, #197	@ 0xc5
 8002260:	4811      	ldr	r0, [pc, #68]	@ (80022a8 <HAL_DMA_Init+0x290>)
 8002262:	f7fe fdb3 	bl	8000dcc <assert_failed>
 8002266:	e021      	b.n	80022ac <HAL_DMA_Init+0x294>
 8002268:	40026010 	.word	0x40026010
 800226c:	40026028 	.word	0x40026028
 8002270:	40026040 	.word	0x40026040
 8002274:	40026058 	.word	0x40026058
 8002278:	40026070 	.word	0x40026070
 800227c:	40026088 	.word	0x40026088
 8002280:	400260a0 	.word	0x400260a0
 8002284:	400260b8 	.word	0x400260b8
 8002288:	40026410 	.word	0x40026410
 800228c:	40026428 	.word	0x40026428
 8002290:	40026440 	.word	0x40026440
 8002294:	40026458 	.word	0x40026458
 8002298:	40026470 	.word	0x40026470
 800229c:	40026488 	.word	0x40026488
 80022a0:	400264a0 	.word	0x400264a0
 80022a4:	400264b8 	.word	0x400264b8
 80022a8:	0800b6f0 	.word	0x0800b6f0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <HAL_DMA_Init+0x2c2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022bc:	d00d      	beq.n	80022da <HAL_DMA_Init+0x2c2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Init+0x2c2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022d0:	d003      	beq.n	80022da <HAL_DMA_Init+0x2c2>
 80022d2:	21c6      	movs	r1, #198	@ 0xc6
 80022d4:	485b      	ldr	r0, [pc, #364]	@ (8002444 <HAL_DMA_Init+0x42c>)
 80022d6:	f7fe fd79 	bl	8000dcc <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <HAL_DMA_Init+0x2f0>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022ea:	d00d      	beq.n	8002308 <HAL_DMA_Init+0x2f0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f4:	d008      	beq.n	8002308 <HAL_DMA_Init+0x2f0>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_Init+0x2f0>
 8002300:	21c7      	movs	r1, #199	@ 0xc7
 8002302:	4850      	ldr	r0, [pc, #320]	@ (8002444 <HAL_DMA_Init+0x42c>)
 8002304:	f7fe fd62 	bl	8000dcc <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	e00f      	b.n	800234a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232a:	f7fe ff6f 	bl	800120c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b05      	cmp	r3, #5
 8002336:	d908      	bls.n	800234a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e078      	b.n	800243c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e8      	bne.n	800232a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <HAL_DMA_Init+0x430>)
 8002364:	4013      	ands	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	4313      	orrs	r3, r2
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0307 	bic.w	r3, r3, #7
 80023ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d117      	bne.n	800240e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa7f 	bl	80028f4 <DMA_CheckFifoParam>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800240a:	2301      	movs	r3, #1
 800240c:	e016      	b.n	800243c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa36 	bl	8002888 <DMA_CalcBaseAndBitshift>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	223f      	movs	r2, #63	@ 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800b6f0 	.word	0x0800b6f0
 8002448:	f010803f 	.word	0xf010803f

0800244c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_DMA_Start_IT+0x26>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002470:	d304      	bcc.n	800247c <HAL_DMA_Start_IT+0x30>
 8002472:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8002476:	4827      	ldr	r0, [pc, #156]	@ (8002514 <HAL_DMA_Start_IT+0xc8>)
 8002478:	f7fe fca8 	bl	8000dcc <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_DMA_Start_IT+0x3e>
 8002486:	2302      	movs	r3, #2
 8002488:	e040      	b.n	800250c <HAL_DMA_Start_IT+0xc0>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d12f      	bne.n	80024fe <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f9ba 	bl	800282c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	223f      	movs	r2, #63	@ 0x3f
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0216 	orr.w	r2, r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0208 	orr.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e005      	b.n	800250a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0800b6f0 	.word	0x0800b6f0

08002518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002524:	4b8e      	ldr	r3, [pc, #568]	@ (8002760 <HAL_DMA_IRQHandler+0x248>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a8e      	ldr	r2, [pc, #568]	@ (8002764 <HAL_DMA_IRQHandler+0x24c>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0a9b      	lsrs	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	2208      	movs	r2, #8
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2208      	movs	r2, #8
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	2201      	movs	r2, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	2204      	movs	r2, #4
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025dc:	2204      	movs	r2, #4
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	2210      	movs	r2, #16
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d043      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	2210      	movs	r2, #16
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e01f      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e016      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0208 	bic.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2220      	movs	r2, #32
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 808f 	beq.w	80027b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8087 	beq.w	80027b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2220      	movs	r2, #32
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d136      	bne.n	8002730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0216 	bic.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x1da>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0208 	bic.w	r2, r2, #8
 8002700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	223f      	movs	r2, #63	@ 0x3f
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07e      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
        }
        return;
 800272e:	e079      	b.n	8002824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01d      	beq.n	800277a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	2b00      	cmp	r3, #0
 8002752:	d031      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e02c      	b.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000
 8002764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	e01e      	b.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0210 	bic.w	r2, r2, #16
 8002796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d032      	beq.n	8002826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2205      	movs	r2, #5
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d307      	bcc.n	8002800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f2      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x2cc>
 80027fe:	e000      	b.n	8002802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e000      	b.n	8002826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002824:	bf00      	nop
    }
  }
}
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d108      	bne.n	800286c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800286a:	e007      	b.n	800287c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3b10      	subs	r3, #16
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <DMA_CalcBaseAndBitshift+0x64>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028a2:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <DMA_CalcBaseAndBitshift+0x68>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d909      	bls.n	80028ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	1d1a      	adds	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80028c8:	e007      	b.n	80028da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	aaaaaaab 	.word	0xaaaaaaab
 80028f0:	0800b8d4 	.word	0x0800b8d4

080028f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11f      	bne.n	800294e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d856      	bhi.n	80029c2 <DMA_CheckFifoParam+0xce>
 8002914:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <DMA_CheckFifoParam+0x28>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	0800293f 	.word	0x0800293f
 8002924:	0800292d 	.word	0x0800292d
 8002928:	080029c3 	.word	0x080029c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d046      	beq.n	80029c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e043      	b.n	80029c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002946:	d140      	bne.n	80029ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294c:	e03d      	b.n	80029ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002956:	d121      	bne.n	800299c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d837      	bhi.n	80029ce <DMA_CheckFifoParam+0xda>
 800295e:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <DMA_CheckFifoParam+0x70>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800297b 	.word	0x0800297b
 800296c:	08002975 	.word	0x08002975
 8002970:	0800298d 	.word	0x0800298d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e030      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d025      	beq.n	80029d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298a:	e022      	b.n	80029d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002994:	d11f      	bne.n	80029d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800299a:	e01c      	b.n	80029d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d903      	bls.n	80029aa <DMA_CheckFifoParam+0xb6>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d003      	beq.n	80029b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029a8:	e018      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      break;
 80029ae:	e015      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e00b      	b.n	80029da <DMA_CheckFifoParam+0xe6>
      break;
 80029c2:	bf00      	nop
 80029c4:	e00a      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029c6:	bf00      	nop
 80029c8:	e008      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029ca:	bf00      	nop
 80029cc:	e006      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029ce:	bf00      	nop
 80029d0:	e004      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e002      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;   
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
    }
  } 
  
  return status; 
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a32      	ldr	r2, [pc, #200]	@ (8002ad0 <HAL_GPIO_Init+0xe4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d017      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	@ (8002ad4 <HAL_GPIO_Init+0xe8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_GPIO_Init+0xec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8002adc <HAL_GPIO_Init+0xf0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae0 <HAL_GPIO_Init+0xf4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae4 <HAL_GPIO_Init+0xf8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x4e>
 8002a32:	21ac      	movs	r1, #172	@ 0xac
 8002a34:	482c      	ldr	r0, [pc, #176]	@ (8002ae8 <HAL_GPIO_Init+0xfc>)
 8002a36:	f7fe f9c9 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_GPIO_Init+0x62>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4c:	d303      	bcc.n	8002a56 <HAL_GPIO_Init+0x6a>
 8002a4e:	21ad      	movs	r1, #173	@ 0xad
 8002a50:	4825      	ldr	r0, [pc, #148]	@ (8002ae8 <HAL_GPIO_Init+0xfc>)
 8002a52:	f7fe f9bb 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d035      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d031      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d02d      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d029      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b12      	cmp	r3, #18
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002a86:	d020      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002a90:	d01b      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002a9a:	d016      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002aa4:	d011      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002aae:	d00c      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002ab8:	d007      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0xde>
 8002ac2:	21ae      	movs	r1, #174	@ 0xae
 8002ac4:	4808      	ldr	r0, [pc, #32]	@ (8002ae8 <HAL_GPIO_Init+0xfc>)
 8002ac6:	f7fe f981 	bl	8000dcc <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	e20b      	b.n	8002ee8 <HAL_GPIO_Init+0x4fc>
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021c00 	.word	0x40021c00
 8002ae8:	0800b728 	.word	0x0800b728
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 81ec 	bne.w	8002ee2 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d144      	bne.n	8002bac <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00f      	beq.n	8002b4a <HAL_GPIO_Init+0x15e>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d00b      	beq.n	8002b4a <HAL_GPIO_Init+0x15e>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x15e>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x15e>
 8002b42:	21c0      	movs	r1, #192	@ 0xc0
 8002b44:	4884      	ldr	r0, [pc, #528]	@ (8002d58 <HAL_GPIO_Init+0x36c>)
 8002b46:	f7fe f941 	bl	8000dcc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d027      	beq.n	8002c08 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x1ec>
 8002bd0:	21d1      	movs	r1, #209	@ 0xd1
 8002bd2:	4861      	ldr	r0, [pc, #388]	@ (8002d58 <HAL_GPIO_Init+0x36c>)
 8002bd4:	f7fe f8fa 	bl	8000dcc <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	f040 80a3 	bne.w	8002d5c <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d077      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d073      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d067      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d05f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d05b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d057      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d053      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d04f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d04b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d047      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d043      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d03f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d03b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d037      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d033      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d02f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d027      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b07      	cmp	r3, #7
 8002cc4:	d023      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d01f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b07      	cmp	r3, #7
 8002cd4:	d01b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d017      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b0a      	cmp	r3, #10
 8002ce4:	d013      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d00f      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b09      	cmp	r3, #9
 8002cf4:	d00b      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d007      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x322>
 8002d06:	21de      	movs	r1, #222	@ 0xde
 8002d08:	4813      	ldr	r0, [pc, #76]	@ (8002d58 <HAL_GPIO_Init+0x36c>)
 8002d0a:	f7fe f85f 	bl	8000dcc <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	69b9      	ldr	r1, [r7, #24]
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002d56:	e001      	b.n	8002d5c <HAL_GPIO_Init+0x370>
 8002d58:	0800b728 	.word	0x0800b728
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a2 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_GPIO_Init+0x510>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4a55      	ldr	r2, [pc, #340]	@ (8002efc <HAL_GPIO_Init+0x510>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_GPIO_Init+0x510>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a51      	ldr	r2, [pc, #324]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x518>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x42e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <HAL_GPIO_Init+0x51c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a46      	ldr	r2, [pc, #280]	@ (8002f0c <HAL_GPIO_Init+0x520>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x426>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	@ (8002f10 <HAL_GPIO_Init+0x524>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x422>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a44      	ldr	r2, [pc, #272]	@ (8002f14 <HAL_GPIO_Init+0x528>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x41e>
 8002e06:	2304      	movs	r3, #4
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_Init+0x430>
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x430>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_Init+0x430>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_Init+0x430>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x430>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2c:	4934      	ldr	r1, [pc, #208]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3a:	4b37      	ldr	r3, [pc, #220]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e64:	4b2c      	ldr	r3, [pc, #176]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e88:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb2:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002edc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f18 <HAL_GPIO_Init+0x52c>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	f67f adfe 	bls.w	8002aec <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_GPIO_WritePin+0x20>
 8002f32:	f240 119d 	movw	r1, #413	@ 0x19d
 8002f36:	480e      	ldr	r0, [pc, #56]	@ (8002f70 <HAL_GPIO_WritePin+0x54>)
 8002f38:	f7fd ff48 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_GPIO_WritePin+0x36>
 8002f42:	787b      	ldrb	r3, [r7, #1]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d004      	beq.n	8002f52 <HAL_GPIO_WritePin+0x36>
 8002f48:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002f4c:	4808      	ldr	r0, [pc, #32]	@ (8002f70 <HAL_GPIO_WritePin+0x54>)
 8002f4e:	f7fd ff3d 	bl	8000dcc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002f52:	787b      	ldrb	r3, [r7, #1]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f58:	887a      	ldrh	r2, [r7, #2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f5e:	e003      	b.n	8002f68 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	041a      	lsls	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800b728 	.word	0x0800b728

08002f74 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e062      	b.n	800304c <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8e:	d003      	beq.n	8002f98 <HAL_HCD_Init+0x24>
 8002f90:	217b      	movs	r1, #123	@ 0x7b
 8002f92:	4830      	ldr	r0, [pc, #192]	@ (8003054 <HAL_HCD_Init+0xe0>)
 8002f94:	f7fd ff1a 	bl	8000dcc <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f007 fbe6 	bl	800a784 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc6:	d102      	bne.n	8002fce <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fa9d 	bl	8007512 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7c1a      	ldrb	r2, [r3, #16]
 8002fe0:	f88d 2000 	strb.w	r2, [sp]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe8:	f004 fa1e 	bl	8007428 <USB_CoreInit>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e026      	b.n	800304c <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fa95 	bl	8007534 <USB_SetCurrentMode>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e017      	b.n	800304c <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7c1a      	ldrb	r2, [r3, #16]
 8003024:	f88d 2000 	strb.w	r2, [sp]
 8003028:	3304      	adds	r3, #4
 800302a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302c:	f004 fc38 	bl	80078a0 <USB_HostInit>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e004      	b.n	800304c <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	0800b764 	.word	0x0800b764

08003058 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b08b      	sub	sp, #44	@ 0x2c
 800305c:	af04      	add	r7, sp, #16
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	70fb      	strb	r3, [r7, #3]
 800306a:	460b      	mov	r3, r1
 800306c:	70bb      	strb	r3, [r7, #2]
 800306e:	4613      	mov	r3, r2
 8003070:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003072:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003074:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_HCD_HC_Init+0x2c>
 8003080:	2302      	movs	r3, #2
 8003082:	e09d      	b.n	80031c0 <HAL_HCD_HC_Init+0x168>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3319      	adds	r3, #25
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3314      	adds	r3, #20
 80030b0:	787a      	ldrb	r2, [r7, #1]
 80030b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3315      	adds	r3, #21
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3326      	adds	r3, #38	@ 0x26
 80030d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80030dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	78bb      	ldrb	r3, [r7, #2]
 80030e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e6:	b2d8      	uxtb	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3316      	adds	r3, #22
 80030f6:	4602      	mov	r2, r0
 80030f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fbc8 	bl	8003894 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da0a      	bge.n	8003122 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3317      	adds	r3, #23
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e009      	b.n	8003136 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3317      	adds	r3, #23
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fcfe 	bl	8007b3c <USB_GetHostSpeed>
 8003140:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003142:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10b      	bne.n	8003162 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800314a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_HCD_HC_Init+0x10a>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2bbc      	cmp	r3, #188	@ 0xbc
 800315c:	d901      	bls.n	8003162 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800315e:	23bc      	movs	r3, #188	@ 0xbc
 8003160:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3318      	adds	r3, #24
 8003172:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	b298      	uxth	r0, r3
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3328      	adds	r3, #40	@ 0x28
 800318c:	4602      	mov	r2, r0
 800318e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	b29b      	uxth	r3, r3
 8003198:	787c      	ldrb	r4, [r7, #1]
 800319a:	78ba      	ldrb	r2, [r7, #2]
 800319c:	78f9      	ldrb	r1, [r7, #3]
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4623      	mov	r3, r4
 80031ae:	f004 fced 	bl	8007b8c <USB_HC_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_HCD_HC_Halt+0x1e>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e00f      	b.n	8003206 <HAL_HCD_HC_Halt+0x3e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 f833 	bl	8008262 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	70fb      	strb	r3, [r7, #3]
 8003222:	460b      	mov	r3, r1
 8003224:	70bb      	strb	r3, [r7, #2]
 8003226:	4613      	mov	r3, r2
 8003228:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3317      	adds	r3, #23
 800323a:	78ba      	ldrb	r2, [r7, #2]
 800323c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3326      	adds	r3, #38	@ 0x26
 800324e:	787a      	ldrb	r2, [r7, #1]
 8003250:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003252:	7c3b      	ldrb	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d114      	bne.n	8003282 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	332a      	adds	r3, #42	@ 0x2a
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3319      	adds	r3, #25
 800327c:	7f3a      	ldrb	r2, [r7, #28]
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e009      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	332a      	adds	r3, #42	@ 0x2a
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003296:	787b      	ldrb	r3, [r7, #1]
 8003298:	2b03      	cmp	r3, #3
 800329a:	f200 8102 	bhi.w	80034a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800329e:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	0800348d 	.word	0x0800348d
 80032ac:	08003379 	.word	0x08003379
 80032b0:	08003403 	.word	0x08003403
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80032b4:	7c3b      	ldrb	r3, [r7, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 80f5 	bne.w	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80032bc:	78bb      	ldrb	r3, [r7, #2]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12d      	bne.n	800331e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80032c2:	8b3b      	ldrh	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	333d      	adds	r3, #61	@ 0x3d
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	333d      	adds	r3, #61	@ 0x3d
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	332a      	adds	r3, #42	@ 0x2a
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003306:	e0ce      	b.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	332a      	adds	r3, #42	@ 0x2a
 8003318:	2202      	movs	r2, #2
 800331a:	701a      	strb	r2, [r3, #0]
      break;
 800331c:	e0c3      	b.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	331a      	adds	r3, #26
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 80b8 	bne.w	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	333c      	adds	r3, #60	@ 0x3c
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	332a      	adds	r3, #42	@ 0x2a
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
      break;
 8003360:	e0a1      	b.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	332a      	adds	r3, #42	@ 0x2a
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
      break;
 8003376:	e096      	b.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003378:	78bb      	ldrb	r3, [r7, #2]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d120      	bne.n	80033c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	333d      	adds	r3, #61	@ 0x3d
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	332a      	adds	r3, #42	@ 0x2a
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033a8:	e07e      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	332a      	adds	r3, #42	@ 0x2a
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
      break;
 80033be:	e073      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	333c      	adds	r3, #60	@ 0x3c
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	332a      	adds	r3, #42	@ 0x2a
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
      break;
 80033ea:	e05d      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	332a      	adds	r3, #42	@ 0x2a
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
      break;
 8003400:	e052      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003402:	78bb      	ldrb	r3, [r7, #2]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d120      	bne.n	800344a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	333d      	adds	r3, #61	@ 0x3d
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	332a      	adds	r3, #42	@ 0x2a
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003432:	e039      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	332a      	adds	r3, #42	@ 0x2a
 8003444:	2202      	movs	r2, #2
 8003446:	701a      	strb	r2, [r3, #0]
      break;
 8003448:	e02e      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	333c      	adds	r3, #60	@ 0x3c
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	332a      	adds	r3, #42	@ 0x2a
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
      break;
 8003474:	e018      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	332a      	adds	r3, #42	@ 0x2a
 8003486:	2202      	movs	r2, #2
 8003488:	701a      	strb	r2, [r3, #0]
      break;
 800348a:	e00d      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	332a      	adds	r3, #42	@ 0x2a
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80034a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	332c      	adds	r3, #44	@ 0x2c
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	8b39      	ldrh	r1, [r7, #24]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4403      	add	r3, r0
 80034cc:	3334      	adds	r3, #52	@ 0x34
 80034ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334c      	adds	r3, #76	@ 0x4c
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3338      	adds	r3, #56	@ 0x38
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3315      	adds	r3, #21
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	334d      	adds	r3, #77	@ 0x4d
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3310      	adds	r3, #16
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	1d19      	adds	r1, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	461a      	mov	r2, r3
 800353c:	f004 fc3c 	bl	8007db8 <USB_HC_StartXfer>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop

0800354c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 f95c 	bl	8007820 <USB_GetMode>
 8003568:	4603      	mov	r3, r0
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 80fb 	bne.w	8003766 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f004 f91f 	bl	80077b8 <USB_ReadInterrupts>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80f1 	beq.w	8003764 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 f916 	bl	80077b8 <USB_ReadInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003596:	d104      	bne.n	80035a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f906 	bl	80077b8 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035b6:	d104      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f8f6 	bl	80077b8 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d6:	d104      	bne.n	80035e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 f8e6 	bl	80077b8 <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d103      	bne.n	80035fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 f8d8 	bl	80077b8 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800360e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003612:	d120      	bne.n	8003656 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800361c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800362e:	2110      	movs	r1, #16
 8003630:	6938      	ldr	r0, [r7, #16]
 8003632:	f003 ffcb 	bl	80075cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003636:	6938      	ldr	r0, [r7, #16]
 8003638:	f003 fffa 	bl	8007630 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7a5b      	ldrb	r3, [r3, #9]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d105      	bne.n	8003650 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f004 f9d6 	bl	80079fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f007 f915 	bl	800a880 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f004 f8ac 	bl	80077b8 <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800366a:	d102      	bne.n	8003672 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 fd4d 	bl	800510c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 f89e 	bl	80077b8 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d106      	bne.n	8003694 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f007 f8de 	bl	800a848 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2208      	movs	r2, #8
 8003692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f004 f88d 	bl	80077b8 <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a8:	d139      	bne.n	800371e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fdc6 	bl	8008240 <USB_HC_ReadInterrupt>
 80036b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e025      	b.n	8003708 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d018      	beq.n	8003702 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e6:	d106      	bne.n	80036f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f905 	bl	80038fe <HCD_HC_IN_IRQHandler>
 80036f4:	e005      	b.n	8003702 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 ff67 	bl	80045d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	795b      	ldrb	r3, [r3, #5]
 800370c:	461a      	mov	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	4293      	cmp	r3, r2
 8003712:	d3d3      	bcc.n	80036bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800371c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f004 f848 	bl	80077b8 <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d101      	bne.n	8003736 <HAL_HCD_IRQHandler+0x1ea>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_HCD_IRQHandler+0x1ec>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d014      	beq.n	8003766 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0210 	bic.w	r2, r2, #16
 800374a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 fbfe 	bl	8004f4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0210 	orr.w	r2, r2, #16
 8003760:	619a      	str	r2, [r3, #24]
 8003762:	e000      	b.n	8003766 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003764:	bf00      	nop
    }
  }
}
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_HCD_Start+0x16>
 800377e:	2302      	movs	r3, #2
 8003780:	e013      	b.n	80037aa <HAL_HCD_Start+0x3e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f004 f99a 	bl	8007aca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fea8 	bl	80074f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_HCD_Stop+0x16>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e00d      	b.n	80037e4 <HAL_HCD_Stop+0x32>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 fe64 	bl	80084a2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f93c 	bl	8007a76 <USB_ResetPort>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	334c      	adds	r3, #76	@ 0x4c
 8003824:	781b      	ldrb	r3, [r3, #0]
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3338      	adds	r3, #56	@ 0x38
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f004 f97e 	bl	8007b6a <USB_GetCurrentFrame>
 800386e:	4603      	mov	r3, r0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 f959 	bl	8007b3c <USB_GetHostSpeed>
 800388a:	4603      	mov	r3, r0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	331a      	adds	r3, #26
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	331b      	adds	r3, #27
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3325      	adds	r3, #37	@ 0x25
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	3324      	adds	r3, #36	@ 0x24
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f003 ff5e 	bl	80077de <USB_ReadChInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11a      	bne.n	8003962 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	2304      	movs	r3, #4
 800393c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	334d      	adds	r3, #77	@ 0x4d
 800394e:	2207      	movs	r2, #7
 8003950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fc81 	bl	8008262 <USB_HC_Halt>
 8003960:	e09e      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f003 ff37 	bl	80077de <USB_ReadChInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397a:	d11b      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800398e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334d      	adds	r3, #77	@ 0x4d
 80039a0:	2208      	movs	r2, #8
 80039a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f004 fc58 	bl	8008262 <USB_HC_Halt>
 80039b2:	e075      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 ff0e 	bl	80077de <USB_ReadChInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d11a      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2308      	movs	r3, #8
 80039dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	334d      	adds	r3, #77	@ 0x4d
 80039ee:	2206      	movs	r2, #6
 80039f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fc31 	bl	8008262 <USB_HC_Halt>
 8003a00:	e04e      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fee7 	bl	80077de <USB_ReadChInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1a:	d11b      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	2209      	movs	r2, #9
 8003a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 fc08 	bl	8008262 <USB_HC_Halt>
 8003a52:	e025      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 febe 	bl	80077de <USB_ReadChInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a68:	2b80      	cmp	r3, #128	@ 0x80
 8003a6a:	d119      	bne.n	8003aa0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334d      	adds	r3, #77	@ 0x4d
 8003a8e:	2207      	movs	r2, #7
 8003a90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 fbe1 	bl	8008262 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 fe98 	bl	80077de <USB_ReadChInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab8:	d112      	bne.n	8003ae0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fbcd 	bl	8008262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ada:	6093      	str	r3, [r2, #8]
 8003adc:	f000 bd75 	b.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 fe78 	bl	80077de <USB_ReadChInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 8128 	bne.w	8003d4a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2320      	movs	r3, #32
 8003b0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	331b      	adds	r3, #27
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d119      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	331b      	adds	r3, #27
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	799b      	ldrb	r3, [r3, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01b      	beq.n	8003b96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3330      	adds	r3, #48	@ 0x30
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	1ac9      	subs	r1, r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	3338      	adds	r3, #56	@ 0x38
 8003b94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	334d      	adds	r3, #77	@ 0x4d
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3344      	adds	r3, #68	@ 0x44
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3326      	adds	r3, #38	@ 0x26
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3326      	adds	r3, #38	@ 0x26
 8003bf6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d110      	bne.n	8003c1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fb2c 	bl	8008262 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	2310      	movs	r3, #16
 8003c1a:	6093      	str	r3, [r2, #8]
 8003c1c:	e03d      	b.n	8003c9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3326      	adds	r3, #38	@ 0x26
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d00a      	beq.n	8003c4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3326      	adds	r3, #38	@ 0x26
 8003c44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d127      	bne.n	8003c9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	334c      	adds	r3, #76	@ 0x4c
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334c      	adds	r3, #76	@ 0x4c
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f006 fe01 	bl	800a89c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	799b      	ldrb	r3, [r3, #6]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d13b      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3338      	adds	r3, #56	@ 0x38
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3328      	adds	r3, #40	@ 0x28
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	1e59      	subs	r1, r3, #1
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4403      	add	r3, r0
 8003cd8:	3328      	adds	r3, #40	@ 0x28
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8470 	beq.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	333c      	adds	r3, #60	@ 0x3c
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2d8      	uxtb	r0, r3
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	333c      	adds	r3, #60	@ 0x3c
 8003d12:	4602      	mov	r2, r0
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	f000 bc58 	b.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	333c      	adds	r3, #60	@ 0x3c
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2d8      	uxtb	r0, r3
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	333c      	adds	r3, #60	@ 0x3c
 8003d42:	4602      	mov	r2, r0
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	f000 bc40 	b.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 fd43 	bl	80077de <USB_ReadChInterrupts>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d131      	bne.n	8003dc6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2320      	movs	r3, #32
 8003d72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	331a      	adds	r3, #26
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	f040 841f 	bne.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	331b      	adds	r3, #27
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334d      	adds	r3, #77	@ 0x4d
 8003db0:	2203      	movs	r2, #3
 8003db2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f004 fa50 	bl	8008262 <USB_HC_Halt>
 8003dc2:	f000 bc02 	b.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fd05 	bl	80077de <USB_ReadChInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	f040 8305 	bne.w	80043ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	461a      	mov	r2, r3
 8003dee:	2302      	movs	r3, #2
 8003df0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334d      	adds	r3, #77	@ 0x4d
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d114      	bne.n	8003e32 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	@ 0x4d
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	334c      	adds	r3, #76	@ 0x4c
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e2cc      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	334d      	adds	r3, #77	@ 0x4d
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b06      	cmp	r3, #6
 8003e46:	d114      	bne.n	8003e72 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	334d      	adds	r3, #77	@ 0x4d
 8003e58:	2202      	movs	r2, #2
 8003e5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	@ 0x4c
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e2ac      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	334d      	adds	r3, #77	@ 0x4d
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b07      	cmp	r3, #7
 8003e86:	d00b      	beq.n	8003ea0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	334d      	adds	r3, #77	@ 0x4d
 8003e98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	f040 80a6 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	334d      	adds	r3, #77	@ 0x4d
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3344      	adds	r3, #68	@ 0x44
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	3344      	adds	r3, #68	@ 0x44
 8003ed6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3344      	adds	r3, #68	@ 0x44
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d943      	bls.n	8003f76 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3344      	adds	r3, #68	@ 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	331a      	adds	r3, #26
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d123      	bne.n	8003f60 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	331b      	adds	r3, #27
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	331c      	adds	r3, #28
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334c      	adds	r3, #76	@ 0x4c
 8003f70:	2204      	movs	r2, #4
 8003f72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f74:	e229      	b.n	80043ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3326      	adds	r3, #38	@ 0x26
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3326      	adds	r3, #38	@ 0x26
 8003fb0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	f040 8209 	bne.w	80043ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fd6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fea:	e1ee      	b.n	80043ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334d      	adds	r3, #77	@ 0x4d
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	f040 80c8 	bne.w	8004194 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334d      	adds	r3, #77	@ 0x4d
 8004014:	2202      	movs	r2, #2
 8004016:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	331b      	adds	r3, #27
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	f040 81ce 	bne.w	80043cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3326      	adds	r3, #38	@ 0x26
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d16b      	bne.n	800411e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3348      	adds	r3, #72	@ 0x48
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	3348      	adds	r3, #72	@ 0x48
 8004068:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3348      	adds	r3, #72	@ 0x48
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d943      	bls.n	8004108 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3348      	adds	r3, #72	@ 0x48
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	331b      	adds	r3, #27
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3344      	adds	r3, #68	@ 0x44
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d809      	bhi.n	80040d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	331c      	adds	r3, #28
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334c      	adds	r3, #76	@ 0x4c
 8004102:	2204      	movs	r2, #4
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e014      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334c      	adds	r3, #76	@ 0x4c
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e009      	b.n	8004132 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334c      	adds	r3, #76	@ 0x4c
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	3326      	adds	r3, #38	@ 0x26
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	3326      	adds	r3, #38	@ 0x26
 8004158:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800415a:	2b02      	cmp	r3, #2
 800415c:	f040 8136 	bne.w	80043cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004176:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800417e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e11b      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334d      	adds	r3, #77	@ 0x4d
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	f040 8081 	bne.w	80042ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	334d      	adds	r3, #77	@ 0x4d
 80041bc:	2202      	movs	r2, #2
 80041be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	331b      	adds	r3, #27
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f040 80fa 	bne.w	80043cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	@ 0x4c
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	440a      	add	r2, r1
 8004202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	440a      	add	r2, r1
 8004222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800422a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	440a      	add	r2, r1
 8004242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004246:	f023 0320 	bic.w	r3, r3, #32
 800424a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3326      	adds	r3, #38	@ 0x26
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3326      	adds	r3, #38	@ 0x26
 8004272:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 80a9 	bne.w	80043cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004290:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004298:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e08e      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	@ 0x4d
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d143      	bne.n	800434c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334d      	adds	r3, #77	@ 0x4d
 80042d4:	2202      	movs	r2, #2
 80042d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	334c      	adds	r3, #76	@ 0x4c
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3326      	adds	r3, #38	@ 0x26
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3326      	adds	r3, #38	@ 0x26
 8004312:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004314:	2b02      	cmp	r3, #2
 8004316:	d159      	bne.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800432e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004336:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004344:	461a      	mov	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e03f      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	334d      	adds	r3, #77	@ 0x4d
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d126      	bne.n	80043b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	334d      	adds	r3, #77	@ 0x4d
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3344      	adds	r3, #68	@ 0x44
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4403      	add	r3, r0
 8004396:	3344      	adds	r3, #68	@ 0x44
 8004398:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334c      	adds	r3, #76	@ 0x4c
 80043aa:	2204      	movs	r2, #4
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e00d      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	334d      	adds	r3, #77	@ 0x4d
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	f000 8100 	beq.w	80045c8 <HCD_HC_IN_IRQHandler+0xcca>
 80043c8:	e000      	b.n	80043cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334c      	adds	r3, #76	@ 0x4c
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f006 fa5a 	bl	800a89c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043e8:	e0ef      	b.n	80045ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 f9f3 	bl	80077de <USB_ReadChInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d12f      	bne.n	8004462 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2340      	movs	r3, #64	@ 0x40
 8004412:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	334d      	adds	r3, #77	@ 0x4d
 8004424:	2205      	movs	r2, #5
 8004426:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	331a      	adds	r3, #26
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3344      	adds	r3, #68	@ 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f003 ff01 	bl	8008262 <USB_HC_Halt>
 8004460:	e0b3      	b.n	80045ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f003 f9b7 	bl	80077de <USB_ReadChInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b10      	cmp	r3, #16
 8004478:	f040 80a7 	bne.w	80045ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	@ 0x26
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d11b      	bne.n	80044ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3344      	adds	r3, #68	@ 0x44
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	2204      	movs	r2, #4
 80044b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fecd 	bl	8008262 <USB_HC_Halt>
 80044c8:	e03f      	b.n	800454a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3326      	adds	r3, #38	@ 0x26
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3326      	adds	r3, #38	@ 0x26
 80044f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d129      	bne.n	800454a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3344      	adds	r3, #68	@ 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	799b      	ldrb	r3, [r3, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HCD_HC_IN_IRQHandler+0xc2a>
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	331b      	adds	r3, #27
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d110      	bne.n	800454a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334d      	adds	r3, #77	@ 0x4d
 8004538:	2204      	movs	r2, #4
 800453a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f003 fe8c 	bl	8008262 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	331b      	adds	r3, #27
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d129      	bne.n	80045b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	331b      	adds	r3, #27
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	440a      	add	r2, r1
 800458a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800458e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004592:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2310      	movs	r3, #16
 80045c4:	6093      	str	r3, [r2, #8]
 80045c6:	e000      	b.n	80045ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80045c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f003 f8f5 	bl	80077de <USB_ReadChInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d11b      	bne.n	8004636 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460a:	461a      	mov	r2, r3
 800460c:	2304      	movs	r3, #4
 800460e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334d      	adds	r3, #77	@ 0x4d
 8004620:	2207      	movs	r2, #7
 8004622:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f003 fe18 	bl	8008262 <USB_HC_Halt>
 8004632:	f000 bc89 	b.w	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f003 f8cd 	bl	80077de <USB_ReadChInterrupts>
 8004644:	4603      	mov	r3, r0
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	f040 8082 	bne.w	8004754 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	2320      	movs	r3, #32
 8004660:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3319      	adds	r3, #25
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d124      	bne.n	80046c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3319      	adds	r3, #25
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	334c      	adds	r3, #76	@ 0x4c
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	334d      	adds	r3, #77	@ 0x4d
 80046b0:	2203      	movs	r2, #3
 80046b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f003 fdd0 	bl	8008262 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	331a      	adds	r3, #26
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 8437 	bne.w	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	331b      	adds	r3, #27
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 842b 	bne.w	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	3326      	adds	r3, #38	@ 0x26
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d009      	beq.n	800471c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	331b      	adds	r3, #27
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	334d      	adds	r3, #77	@ 0x4d
 800472c:	2203      	movs	r2, #3
 800472e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f003 fd92 	bl	8008262 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3344      	adds	r3, #68	@ 0x44
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e3f9      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f003 f83e 	bl	80077de <USB_ReadChInterrupts>
 8004762:	4603      	mov	r3, r0
 8004764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800476c:	d111      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477a:	461a      	mov	r2, r3
 800477c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004780:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fd69 	bl	8008262 <USB_HC_Halt>
 8004790:	e3da      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f003 f81f 	bl	80077de <USB_ReadChInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d168      	bne.n	800487c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3344      	adds	r3, #68	@ 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 f809 	bl	80077de <USB_ReadChInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	2b40      	cmp	r3, #64	@ 0x40
 80047d4:	d112      	bne.n	80047fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3319      	adds	r3, #25
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	2340      	movs	r3, #64	@ 0x40
 80047fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	331b      	adds	r3, #27
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d019      	beq.n	8004846 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	331b      	adds	r3, #27
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	440a      	add	r2, r1
 800483c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004844:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	2301      	movs	r3, #1
 8004856:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	334d      	adds	r3, #77	@ 0x4d
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f003 fcf4 	bl	8008262 <USB_HC_Halt>
 800487a:	e365      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f002 ffaa 	bl	80077de <USB_ReadChInterrupts>
 800488a:	4603      	mov	r3, r0
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b40      	cmp	r3, #64	@ 0x40
 8004892:	d139      	bne.n	8004908 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334d      	adds	r3, #77	@ 0x4d
 80048a4:	2205      	movs	r2, #5
 80048a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	331a      	adds	r3, #26
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3319      	adds	r3, #25
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3344      	adds	r3, #68	@ 0x44
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 fcb7 	bl	8008262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004900:	461a      	mov	r2, r3
 8004902:	2340      	movs	r3, #64	@ 0x40
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	e31f      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f002 ff64 	bl	80077de <USB_ReadChInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11a      	bne.n	8004956 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	2308      	movs	r3, #8
 8004930:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	334d      	adds	r3, #77	@ 0x4d
 8004942:	2206      	movs	r2, #6
 8004944:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f003 fc87 	bl	8008262 <USB_HC_Halt>
 8004954:	e2f8      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f002 ff3d 	bl	80077de <USB_ReadChInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d144      	bne.n	80049f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3344      	adds	r3, #68	@ 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	2204      	movs	r2, #4
 8004994:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	3319      	adds	r3, #25
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d114      	bne.n	80049d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	3318      	adds	r3, #24
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3319      	adds	r3, #25
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f003 fc3f 	bl	8008262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f0:	461a      	mov	r2, r3
 80049f2:	2310      	movs	r3, #16
 80049f4:	6093      	str	r3, [r2, #8]
 80049f6:	e2a7      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 feec 	bl	80077de <USB_ReadChInterrupts>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b80      	cmp	r3, #128	@ 0x80
 8004a0e:	f040 8083 	bne.w	8004b18 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	799b      	ldrb	r3, [r3, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d111      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334d      	adds	r3, #77	@ 0x4d
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 fc13 	bl	8008262 <USB_HC_Halt>
 8004a3c:	e062      	b.n	8004b04 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3344      	adds	r3, #68	@ 0x44
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4403      	add	r3, r0
 8004a5e:	3344      	adds	r3, #68	@ 0x44
 8004a60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3344      	adds	r3, #68	@ 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d922      	bls.n	8004abe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3344      	adds	r3, #68	@ 0x44
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334c      	adds	r3, #76	@ 0x4c
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	334c      	adds	r3, #76	@ 0x4c
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f005 fef0 	bl	800a89c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004abc:	e022      	b.n	8004b04 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334c      	adds	r3, #76	@ 0x4c
 8004ace:	2202      	movs	r2, #2
 8004ad0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ae8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004af0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	6093      	str	r3, [r2, #8]
 8004b16:	e217      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f002 fe5c 	bl	80077de <USB_ReadChInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b30:	d11b      	bne.n	8004b6a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	334d      	adds	r3, #77	@ 0x4d
 8004b42:	2209      	movs	r2, #9
 8004b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f003 fb87 	bl	8008262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b60:	461a      	mov	r2, r3
 8004b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	e1ee      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 fe33 	bl	80077de <USB_ReadChInterrupts>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	f040 81df 	bne.w	8004f42 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	334d      	adds	r3, #77	@ 0x4d
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 8093 	bne.w	8004cd4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	334d      	adds	r3, #77	@ 0x4d
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	334c      	adds	r3, #76	@ 0x4c
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	3326      	adds	r3, #38	@ 0x26
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d00b      	beq.n	8004c04 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3326      	adds	r3, #38	@ 0x26
 8004bfc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	f040 8190 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	799b      	ldrb	r3, [r3, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d115      	bne.n	8004c38 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	333d      	adds	r3, #61	@ 0x3d
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	f083 0301 	eor.w	r3, r3, #1
 8004c24:	b2d8      	uxtb	r0, r3
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	333d      	adds	r3, #61	@ 0x3d
 8004c34:	4602      	mov	r2, r0
 8004c36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	799b      	ldrb	r3, [r3, #6]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 8171 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3334      	adds	r3, #52	@ 0x34
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8165 	beq.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3334      	adds	r3, #52	@ 0x34
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4403      	add	r3, r0
 8004c7a:	3328      	adds	r3, #40	@ 0x28
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	440b      	add	r3, r1
 8004c80:	1e59      	subs	r1, r3, #1
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	3328      	adds	r3, #40	@ 0x28
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 813f 	beq.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	333d      	adds	r3, #61	@ 0x3d
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	f083 0301 	eor.w	r3, r3, #1
 8004cbe:	b2d8      	uxtb	r0, r3
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	333d      	adds	r3, #61	@ 0x3d
 8004cce:	4602      	mov	r2, r0
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e127      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	334d      	adds	r3, #77	@ 0x4d
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d120      	bne.n	8004d2c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	334d      	adds	r3, #77	@ 0x4d
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	331b      	adds	r3, #27
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	f040 8107 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	334c      	adds	r3, #76	@ 0x4c
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e0fb      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	334d      	adds	r3, #77	@ 0x4d
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d13a      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	334d      	adds	r3, #77	@ 0x4d
 8004d52:	2202      	movs	r2, #2
 8004d54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	334c      	adds	r3, #76	@ 0x4c
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	331b      	adds	r3, #27
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 80d1 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	331b      	adds	r3, #27
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db4:	6053      	str	r3, [r2, #4]
 8004db6:	e0b5      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334d      	adds	r3, #77	@ 0x4d
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d114      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334d      	adds	r3, #77	@ 0x4d
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	334c      	adds	r3, #76	@ 0x4c
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e095      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334d      	adds	r3, #77	@ 0x4d
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b06      	cmp	r3, #6
 8004e0c:	d114      	bne.n	8004e38 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334d      	adds	r3, #77	@ 0x4d
 8004e1e:	2202      	movs	r2, #2
 8004e20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	334c      	adds	r3, #76	@ 0x4c
 8004e32:	2205      	movs	r2, #5
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e075      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	334d      	adds	r3, #77	@ 0x4d
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	d00a      	beq.n	8004e64 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	334d      	adds	r3, #77	@ 0x4d
 8004e5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e60:	2b09      	cmp	r3, #9
 8004e62:	d170      	bne.n	8004f46 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	334d      	adds	r3, #77	@ 0x4d
 8004e74:	2202      	movs	r2, #2
 8004e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	3344      	adds	r3, #68	@ 0x44
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4403      	add	r3, r0
 8004e98:	3344      	adds	r3, #68	@ 0x44
 8004e9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3344      	adds	r3, #68	@ 0x44
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d914      	bls.n	8004edc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3344      	adds	r3, #68	@ 0x44
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	334c      	adds	r3, #76	@ 0x4c
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004eda:	e022      	b.n	8004f22 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	334c      	adds	r3, #76	@ 0x4c
 8004eec:	2202      	movs	r2, #2
 8004eee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	334c      	adds	r3, #76	@ 0x4c
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f005 fcae 	bl	800a89c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f40:	e002      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004f46:	bf00      	nop
  }
}
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08a      	sub	sp, #40	@ 0x28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	0c5b      	lsrs	r3, r3, #17
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d004      	beq.n	8004f94 <HCD_RXQLVL_IRQHandler+0x46>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	f000 80b6 	beq.w	80050fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f92:	e0b7      	b.n	8005104 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80b3 	beq.w	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	332c      	adds	r3, #44	@ 0x2c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a7 	beq.w	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3338      	adds	r3, #56	@ 0x38
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	18d1      	adds	r1, r2, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3334      	adds	r3, #52	@ 0x34
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	f200 8083 	bhi.w	80050e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	332c      	adds	r3, #44	@ 0x2c
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f002 fb83 	bl	8007708 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	332c      	adds	r3, #44	@ 0x2c
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	18d1      	adds	r1, r2, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4403      	add	r3, r0
 8005026:	332c      	adds	r3, #44	@ 0x2c
 8005028:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	3338      	adds	r3, #56	@ 0x38
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4613      	mov	r3, r2
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4403      	add	r3, r0
 800504e:	3338      	adds	r3, #56	@ 0x38
 8005050:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	0cdb      	lsrs	r3, r3, #19
 8005062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005066:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3328      	adds	r3, #40	@ 0x28
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4293      	cmp	r3, r2
 8005080:	d13f      	bne.n	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d03c      	beq.n	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800509e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	333c      	adds	r3, #60	@ 0x3c
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2d8      	uxtb	r0, r3
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	333c      	adds	r3, #60	@ 0x3c
 80050e2:	4602      	mov	r2, r0
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	e00c      	b.n	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334c      	adds	r3, #76	@ 0x4c
 80050f8:	2204      	movs	r2, #4
 80050fa:	701a      	strb	r2, [r3, #0]
      break;
 80050fc:	e001      	b.n	8005102 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005102:	bf00      	nop
  }
}
 8005104:	bf00      	nop
 8005106:	3728      	adds	r7, #40	@ 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005138:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d10b      	bne.n	800515c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f005 fb88 	bl	800a864 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f043 0302 	orr.w	r3, r3, #2
 800515a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b08      	cmp	r3, #8
 8005164:	d132      	bne.n	80051cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f043 0308 	orr.w	r3, r3, #8
 800516c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d126      	bne.n	80051c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	7a5b      	ldrb	r3, [r3, #9]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d113      	bne.n	80051a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800518a:	d106      	bne.n	800519a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2102      	movs	r1, #2
 8005192:	4618      	mov	r0, r3
 8005194:	f002 fc32 	bl	80079fc <USB_InitFSLSPClkSel>
 8005198:	e011      	b.n	80051be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fc2b 	bl	80079fc <USB_InitFSLSPClkSel>
 80051a6:	e00a      	b.n	80051be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	79db      	ldrb	r3, [r3, #7]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d106      	bne.n	80051be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051b6:	461a      	mov	r2, r3
 80051b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80051bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f005 fb7a 	bl	800a8b8 <HAL_HCD_PortEnabled_Callback>
 80051c4:	e002      	b.n	80051cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f005 fb84 	bl	800a8d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d103      	bne.n	80051de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f043 0320 	orr.w	r3, r3, #32
 80051dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6013      	str	r3, [r2, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e1ba      	b.n	800557c <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a9d      	ldr	r2, [pc, #628]	@ (8005480 <HAL_I2C_Init+0x28c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_I2C_Init+0x3a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a9b      	ldr	r2, [pc, #620]	@ (8005484 <HAL_I2C_Init+0x290>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_I2C_Init+0x3a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a9a      	ldr	r2, [pc, #616]	@ (8005488 <HAL_I2C_Init+0x294>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_I2C_Init+0x3a>
 8005224:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8005228:	4898      	ldr	r0, [pc, #608]	@ (800548c <HAL_I2C_Init+0x298>)
 800522a:	f7fb fdcf 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_I2C_Init+0x4c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4a95      	ldr	r2, [pc, #596]	@ (8005490 <HAL_I2C_Init+0x29c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d904      	bls.n	800524a <HAL_I2C_Init+0x56>
 8005240:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8005244:	4891      	ldr	r0, [pc, #580]	@ (800548c <HAL_I2C_Init+0x298>)
 8005246:	f7fb fdc1 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <HAL_I2C_Init+0x72>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525a:	d004      	beq.n	8005266 <HAL_I2C_Init+0x72>
 800525c:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005260:	488a      	ldr	r0, [pc, #552]	@ (800548c <HAL_I2C_Init+0x298>)
 8005262:	f7fb fdb3 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d304      	bcc.n	800527a <HAL_I2C_Init+0x86>
 8005270:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8005274:	4885      	ldr	r0, [pc, #532]	@ (800548c <HAL_I2C_Init+0x298>)
 8005276:	f7fb fda9 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005282:	d009      	beq.n	8005298 <HAL_I2C_Init+0xa4>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800528c:	d004      	beq.n	8005298 <HAL_I2C_Init+0xa4>
 800528e:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8005292:	487e      	ldr	r0, [pc, #504]	@ (800548c <HAL_I2C_Init+0x298>)
 8005294:	f7fb fd9a 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_I2C_Init+0xbe>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d004      	beq.n	80052b2 <HAL_I2C_Init+0xbe>
 80052a8:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 80052ac:	4877      	ldr	r0, [pc, #476]	@ (800548c <HAL_I2C_Init+0x298>)
 80052ae:	f7fb fd8d 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_I2C_Init+0xd4>
 80052be:	f240 11cf 	movw	r1, #463	@ 0x1cf
 80052c2:	4872      	ldr	r0, [pc, #456]	@ (800548c <HAL_I2C_Init+0x298>)
 80052c4:	f7fb fd82 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_I2C_Init+0xee>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d004      	beq.n	80052e2 <HAL_I2C_Init+0xee>
 80052d8:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80052dc:	486b      	ldr	r0, [pc, #428]	@ (800548c <HAL_I2C_Init+0x298>)
 80052de:	f7fb fd75 	bl	8000dcc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_I2C_Init+0x108>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	2b80      	cmp	r3, #128	@ 0x80
 80052f0:	d004      	beq.n	80052fc <HAL_I2C_Init+0x108>
 80052f2:	f240 11d1 	movw	r1, #465	@ 0x1d1
 80052f6:	4865      	ldr	r0, [pc, #404]	@ (800548c <HAL_I2C_Init+0x298>)
 80052f8:	f7fb fd68 	bl	8000dcc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb fae7 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	@ 0x24
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800533c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800534c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800534e:	f001 fc43 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 8005352:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a4e      	ldr	r2, [pc, #312]	@ (8005494 <HAL_I2C_Init+0x2a0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d807      	bhi.n	800536e <HAL_I2C_Init+0x17a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a4d      	ldr	r2, [pc, #308]	@ (8005498 <HAL_I2C_Init+0x2a4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	bf94      	ite	ls
 8005366:	2301      	movls	r3, #1
 8005368:	2300      	movhi	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e006      	b.n	800537c <HAL_I2C_Init+0x188>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a4a      	ldr	r2, [pc, #296]	@ (800549c <HAL_I2C_Init+0x2a8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	bf94      	ite	ls
 8005376:	2301      	movls	r3, #1
 8005378:	2300      	movhi	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0fb      	b.n	800557c <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a46      	ldr	r2, [pc, #280]	@ (80054a0 <HAL_I2C_Init+0x2ac>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	0c9b      	lsrs	r3, r3, #18
 800538e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4a38      	ldr	r2, [pc, #224]	@ (8005494 <HAL_I2C_Init+0x2a0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d802      	bhi.n	80053be <HAL_I2C_Init+0x1ca>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	3301      	adds	r3, #1
 80053bc:	e009      	b.n	80053d2 <HAL_I2C_Init+0x1de>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	4a36      	ldr	r2, [pc, #216]	@ (80054a4 <HAL_I2C_Init+0x2b0>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	3301      	adds	r3, #1
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	430b      	orrs	r3, r1
 80053d8:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053e4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4929      	ldr	r1, [pc, #164]	@ (8005494 <HAL_I2C_Init+0x2a0>)
 80053ee:	428b      	cmp	r3, r1
 80053f0:	d819      	bhi.n	8005426 <HAL_I2C_Init+0x232>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1e59      	subs	r1, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005400:	1c59      	adds	r1, r3, #1
 8005402:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005406:	400b      	ands	r3, r1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_I2C_Init+0x22e>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1e59      	subs	r1, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fbb1 f3f3 	udiv	r3, r1, r3
 800541a:	3301      	adds	r3, #1
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	e065      	b.n	80054ee <HAL_I2C_Init+0x2fa>
 8005422:	2304      	movs	r3, #4
 8005424:	e063      	b.n	80054ee <HAL_I2C_Init+0x2fa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d111      	bne.n	8005452 <HAL_I2C_Init+0x25e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e58      	subs	r0, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	440b      	add	r3, r1
 800543c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005440:	3301      	adds	r3, #1
 8005442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e012      	b.n	8005478 <HAL_I2C_Init+0x284>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1e58      	subs	r0, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	0099      	lsls	r1, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	fbb0 f3f3 	udiv	r3, r0, r3
 8005468:	3301      	adds	r3, #1
 800546a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_I2C_Init+0x2b4>
 800547c:	2301      	movs	r3, #1
 800547e:	e036      	b.n	80054ee <HAL_I2C_Init+0x2fa>
 8005480:	40005400 	.word	0x40005400
 8005484:	40005800 	.word	0x40005800
 8005488:	40005c00 	.word	0x40005c00
 800548c:	0800b79c 	.word	0x0800b79c
 8005490:	00061a80 	.word	0x00061a80
 8005494:	000186a0 	.word	0x000186a0
 8005498:	001e847f 	.word	0x001e847f
 800549c:	003d08ff 	.word	0x003d08ff
 80054a0:	431bde83 	.word	0x431bde83
 80054a4:	10624dd3 	.word	0x10624dd3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10e      	bne.n	80054ce <HAL_I2C_Init+0x2da>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1e58      	subs	r0, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6859      	ldr	r1, [r3, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	440b      	add	r3, r1
 80054be:	fbb0 f3f3 	udiv	r3, r0, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054cc:	e00f      	b.n	80054ee <HAL_I2C_Init+0x2fa>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e58      	subs	r0, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	0099      	lsls	r1, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e4:	3301      	adds	r3, #1
 80054e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	6809      	ldr	r1, [r1, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800551c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6911      	ldr	r1, [r2, #16]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	430b      	orrs	r3, r1
 8005530:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e1e7      	b.n	8005966 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a92      	ldr	r2, [pc, #584]	@ (80057e4 <HAL_I2S_Init+0x260>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_I2S_Init+0x4e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a90      	ldr	r2, [pc, #576]	@ (80057e8 <HAL_I2S_Init+0x264>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_I2S_Init+0x4e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a8f      	ldr	r2, [pc, #572]	@ (80057ec <HAL_I2S_Init+0x268>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_I2S_Init+0x4e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a8d      	ldr	r2, [pc, #564]	@ (80057f0 <HAL_I2S_Init+0x26c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_I2S_Init+0x4e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a8c      	ldr	r2, [pc, #560]	@ (80057f4 <HAL_I2S_Init+0x270>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_I2S_Init+0x4e>
 80055c8:	f240 111b 	movw	r1, #283	@ 0x11b
 80055cc:	488a      	ldr	r0, [pc, #552]	@ (80057f8 <HAL_I2S_Init+0x274>)
 80055ce:	f7fb fbfd 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <HAL_I2S_Init+0x7e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e2:	d00e      	beq.n	8005602 <HAL_I2S_Init+0x7e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ec:	d009      	beq.n	8005602 <HAL_I2S_Init+0x7e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f6:	d004      	beq.n	8005602 <HAL_I2S_Init+0x7e>
 80055f8:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80055fc:	487e      	ldr	r0, [pc, #504]	@ (80057f8 <HAL_I2S_Init+0x274>)
 80055fe:	f7fb fbe5 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <HAL_I2S_Init+0xb0>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b10      	cmp	r3, #16
 8005610:	d010      	beq.n	8005634 <HAL_I2S_Init+0xb0>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b20      	cmp	r3, #32
 8005618:	d00c      	beq.n	8005634 <HAL_I2S_Init+0xb0>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b30      	cmp	r3, #48	@ 0x30
 8005620:	d008      	beq.n	8005634 <HAL_I2S_Init+0xb0>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2bb0      	cmp	r3, #176	@ 0xb0
 8005628:	d004      	beq.n	8005634 <HAL_I2S_Init+0xb0>
 800562a:	f240 111d 	movw	r1, #285	@ 0x11d
 800562e:	4872      	ldr	r0, [pc, #456]	@ (80057f8 <HAL_I2S_Init+0x274>)
 8005630:	f7fb fbcc 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_I2S_Init+0xda>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00c      	beq.n	800565e <HAL_I2S_Init+0xda>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d008      	beq.n	800565e <HAL_I2S_Init+0xda>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b05      	cmp	r3, #5
 8005652:	d004      	beq.n	800565e <HAL_I2S_Init+0xda>
 8005654:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005658:	4867      	ldr	r0, [pc, #412]	@ (80057f8 <HAL_I2S_Init+0x274>)
 800565a:	f7fb fbb7 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005666:	d008      	beq.n	800567a <HAL_I2S_Init+0xf6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_I2S_Init+0xf6>
 8005670:	f240 111f 	movw	r1, #287	@ 0x11f
 8005674:	4860      	ldr	r0, [pc, #384]	@ (80057f8 <HAL_I2S_Init+0x274>)
 8005676:	f7fb fba9 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8005682:	d304      	bcc.n	800568e <HAL_I2S_Init+0x10a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	4a5c      	ldr	r2, [pc, #368]	@ (80057fc <HAL_I2S_Init+0x278>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d908      	bls.n	80056a0 <HAL_I2S_Init+0x11c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d004      	beq.n	80056a0 <HAL_I2S_Init+0x11c>
 8005696:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800569a:	4857      	ldr	r0, [pc, #348]	@ (80057f8 <HAL_I2S_Init+0x274>)
 800569c:	f7fb fb96 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_I2S_Init+0x136>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d004      	beq.n	80056ba <HAL_I2S_Init+0x136>
 80056b0:	f240 1121 	movw	r1, #289	@ 0x121
 80056b4:	4850      	ldr	r0, [pc, #320]	@ (80057f8 <HAL_I2S_Init+0x274>)
 80056b6:	f7fb fb89 	bl	8000dcc <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d008      	beq.n	80056d4 <HAL_I2S_Init+0x150>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_I2S_Init+0x150>
 80056ca:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80056ce:	484a      	ldr	r0, [pc, #296]	@ (80057f8 <HAL_I2S_Init+0x274>)
 80056d0:	f7fb fb7c 	bl	8000dcc <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a45      	ldr	r2, [pc, #276]	@ (8005800 <HAL_I2S_Init+0x27c>)
 80056ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb f99e 	bl	8000a30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800570a:	f023 030f 	bic.w	r3, r3, #15
 800570e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2202      	movs	r2, #2
 8005716:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d073      	beq.n	8005808 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005728:	2310      	movs	r3, #16
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e001      	b.n	8005732 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800572e:	2320      	movs	r3, #32
 8005730:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b20      	cmp	r3, #32
 8005738:	d802      	bhi.n	8005740 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005740:	2001      	movs	r0, #1
 8005742:	f001 fc73 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 8005746:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005750:	d125      	bne.n	800579e <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	fbb2 f2f3 	udiv	r2, r2, r3
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	3305      	adds	r3, #5
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	e01f      	b.n	80057bc <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fbb2 f2f3 	udiv	r2, r2, r3
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	3305      	adds	r3, #5
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	e00e      	b.n	80057bc <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	3305      	adds	r3, #5
 80057ba:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <HAL_I2S_Init+0x280>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	61bb      	str	r3, [r7, #24]
 80057e0:	e016      	b.n	8005810 <HAL_I2S_Init+0x28c>
 80057e2:	bf00      	nop
 80057e4:	40013000 	.word	0x40013000
 80057e8:	40003800 	.word	0x40003800
 80057ec:	40003c00 	.word	0x40003c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40015000 	.word	0x40015000
 80057f8:	0800b7d4 	.word	0x0800b7d4
 80057fc:	0002ee00 	.word	0x0002ee00
 8005800:	08005a77 	.word	0x08005a77
 8005804:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005808:	2302      	movs	r3, #2
 800580a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d902      	bls.n	800581c <HAL_I2S_Init+0x298>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2bff      	cmp	r3, #255	@ 0xff
 800581a:	d907      	bls.n	800582c <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e09c      	b.n	8005966 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	ea42 0103 	orr.w	r1, r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	430a      	orrs	r2, r1
 800583e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800584a:	f023 030f 	bic.w	r3, r3, #15
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6851      	ldr	r1, [r2, #4]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6892      	ldr	r2, [r2, #8]
 8005856:	4311      	orrs	r1, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68d2      	ldr	r2, [r2, #12]
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6992      	ldr	r2, [r2, #24]
 8005862:	430a      	orrs	r2, r1
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_I2S_Init+0x306>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d004      	beq.n	800588a <HAL_I2S_Init+0x306>
 8005880:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005884:	483a      	ldr	r0, [pc, #232]	@ (8005970 <HAL_I2S_Init+0x3ec>)
 8005886:	f7fb faa1 	bl	8000dcc <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d161      	bne.n	8005956 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a37      	ldr	r2, [pc, #220]	@ (8005974 <HAL_I2S_Init+0x3f0>)
 8005896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a36      	ldr	r2, [pc, #216]	@ (8005978 <HAL_I2S_Init+0x3f4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <HAL_I2S_Init+0x322>
 80058a2:	4b36      	ldr	r3, [pc, #216]	@ (800597c <HAL_I2S_Init+0x3f8>)
 80058a4:	e001      	b.n	80058aa <HAL_I2S_Init+0x326>
 80058a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	4931      	ldr	r1, [pc, #196]	@ (8005978 <HAL_I2S_Init+0x3f4>)
 80058b2:	428a      	cmp	r2, r1
 80058b4:	d101      	bne.n	80058ba <HAL_I2S_Init+0x336>
 80058b6:	4a31      	ldr	r2, [pc, #196]	@ (800597c <HAL_I2S_Init+0x3f8>)
 80058b8:	e001      	b.n	80058be <HAL_I2S_Init+0x33a>
 80058ba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80058be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <HAL_I2S_Init+0x3f4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <HAL_I2S_Init+0x352>
 80058d2:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <HAL_I2S_Init+0x3f8>)
 80058d4:	e001      	b.n	80058da <HAL_I2S_Init+0x356>
 80058d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058da:	2202      	movs	r2, #2
 80058dc:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <HAL_I2S_Init+0x3f4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_I2S_Init+0x368>
 80058e8:	4b24      	ldr	r3, [pc, #144]	@ (800597c <HAL_I2S_Init+0x3f8>)
 80058ea:	e001      	b.n	80058f0 <HAL_I2S_Init+0x36c>
 80058ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fc:	d003      	beq.n	8005906 <HAL_I2S_Init+0x382>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e001      	b.n	8005912 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800591c:	4313      	orrs	r3, r2
 800591e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005926:	4313      	orrs	r3, r2
 8005928:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005930:	4313      	orrs	r3, r2
 8005932:	b29a      	uxth	r2, r3
 8005934:	897b      	ldrh	r3, [r7, #10]
 8005936:	4313      	orrs	r3, r2
 8005938:	b29b      	uxth	r3, r3
 800593a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800593e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a0c      	ldr	r2, [pc, #48]	@ (8005978 <HAL_I2S_Init+0x3f4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <HAL_I2S_Init+0x3ca>
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_I2S_Init+0x3f8>)
 800594c:	e001      	b.n	8005952 <HAL_I2S_Init+0x3ce>
 800594e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005952:	897a      	ldrh	r2, [r7, #10]
 8005954:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	0800b7d4 	.word	0x0800b7d4
 8005974:	08005b8d 	.word	0x08005b8d
 8005978:	40003800 	.word	0x40003800
 800597c:	40003400 	.word	0x40003400

08005980 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10e      	bne.n	8005a10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ffb8 	bl	8005980 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff93 	bl	8005994 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d13a      	bne.n	8005b08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d109      	bne.n	8005ab0 <I2S_IRQHandler+0x3a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d102      	bne.n	8005ab0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ffb4 	bl	8005a18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b40      	cmp	r3, #64	@ 0x40
 8005ab8:	d126      	bne.n	8005b08 <I2S_IRQHandler+0x92>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d11f      	bne.n	8005b08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ad6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff50 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d136      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d109      	bne.n	8005b32 <I2S_IRQHandler+0xbc>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b80      	cmp	r3, #128	@ 0x80
 8005b2a:	d102      	bne.n	8005b32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff45 	bl	80059bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d122      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d11b      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	f043 0204 	orr.w	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff13 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a92      	ldr	r2, [pc, #584]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ba6:	4b92      	ldr	r3, [pc, #584]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba8:	e001      	b.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005baa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a8b      	ldr	r2, [pc, #556]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc6:	e001      	b.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005bc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd8:	d004      	beq.n	8005be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 8099 	bne.w	8005d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d107      	bne.n	8005bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f925 	bl	8005e48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9c8 	bl	8005fa8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d13a      	bne.n	8005c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d035      	beq.n	8005c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a6e      	ldr	r2, [pc, #440]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005c36:	4b6e      	ldr	r3, [pc, #440]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c38:	e001      	b.n	8005c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005c3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4969      	ldr	r1, [pc, #420]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c46:	428b      	cmp	r3, r1
 8005c48:	d101      	bne.n	8005c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c4a:	4b69      	ldr	r3, [pc, #420]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c4c:	e001      	b.n	8005c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe88 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	f040 80c3 	bne.w	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80bd 	beq.w	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a49      	ldr	r2, [pc, #292]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005cca:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ccc:	e001      	b.n	8005cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005cce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4944      	ldr	r1, [pc, #272]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cda:	428b      	cmp	r3, r1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005cde:	4b44      	ldr	r3, [pc, #272]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005ce2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ce6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	f043 0204 	orr.w	r2, r3, #4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fe4a 	bl	80059a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d14:	e089      	b.n	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d107      	bne.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8be 	bl	8005eac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8fd 	bl	8005f44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b40      	cmp	r3, #64	@ 0x40
 8005d52:	d12f      	bne.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02a      	beq.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d78:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d7a:	e001      	b.n	8005d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4919      	ldr	r1, [pc, #100]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d8e:	e001      	b.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fdfa 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d136      	bne.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d031      	beq.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd4:	e001      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4902      	ldr	r1, [pc, #8]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de2:	428b      	cmp	r3, r1
 8005de4:	d106      	bne.n	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005de6:	4b02      	ldr	r3, [pc, #8]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de8:	e006      	b.n	8005df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005dea:	bf00      	nop
 8005dec:	40003800 	.word	0x40003800
 8005df0:	40003400 	.word	0x40003400
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005dfc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fdc0 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e28:	e000      	b.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e2a:	bf00      	nop
}
 8005e2c:	bf00      	nop
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	1c99      	adds	r1, r3, #2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d113      	bne.n	8005ea2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ffc9 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c99      	adds	r1, r3, #2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ebe:	8819      	ldrh	r1, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <I2SEx_TxISR_I2SExt+0x22>
 8005eca:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005ecc:	e001      	b.n	8005ed2 <I2SEx_TxISR_I2SExt+0x26>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed2:	460a      	mov	r2, r1
 8005ed4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d121      	bne.n	8005f32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <I2SEx_TxISR_I2SExt+0x50>
 8005ef8:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005efa:	e001      	b.n	8005f00 <I2SEx_TxISR_I2SExt+0x54>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	490d      	ldr	r1, [pc, #52]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	d101      	bne.n	8005f10 <I2SEx_TxISR_I2SExt+0x64>
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005f0e:	e001      	b.n	8005f14 <I2SEx_TxISR_I2SExt+0x68>
 8005f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff81 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40003800 	.word	0x40003800
 8005f40:	40003400 	.word	0x40003400

08005f44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68d8      	ldr	r0, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	1c99      	adds	r1, r3, #2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f5c:	b282      	uxth	r2, r0
 8005f5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d113      	bne.n	8005fa0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ff4a 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <I2SEx_RxISR_I2SExt+0x16>
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 8005fbc:	e001      	b.n	8005fc2 <I2SEx_RxISR_I2SExt+0x1a>
 8005fbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc2:	68d8      	ldr	r0, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	1c99      	adds	r1, r3, #2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005fce:	b282      	uxth	r2, r0
 8005fd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d121      	bne.n	800602e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a12      	ldr	r2, [pc, #72]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <I2SEx_RxISR_I2SExt+0x50>
 8005ff4:	4b11      	ldr	r3, [pc, #68]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 8005ff6:	e001      	b.n	8005ffc <I2SEx_RxISR_I2SExt+0x54>
 8005ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	490d      	ldr	r1, [pc, #52]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8006004:	428b      	cmp	r3, r1
 8006006:	d101      	bne.n	800600c <I2SEx_RxISR_I2SExt+0x64>
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 800600a:	e001      	b.n	8006010 <I2SEx_RxISR_I2SExt+0x68>
 800600c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006010:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006014:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff03 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40003800 	.word	0x40003800
 800603c:	40003400 	.word	0x40003400

08006040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e318      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b0f      	cmp	r3, #15
 8006058:	d903      	bls.n	8006062 <HAL_RCC_OscConfig+0x22>
 800605a:	21e6      	movs	r1, #230	@ 0xe6
 800605c:	4897      	ldr	r0, [pc, #604]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800605e:	f7fa feb5 	bl	8000dcc <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8088 	beq.w	8006180 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <HAL_RCC_OscConfig+0x54>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006080:	d008      	beq.n	8006094 <HAL_RCC_OscConfig+0x54>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800608a:	d003      	beq.n	8006094 <HAL_RCC_OscConfig+0x54>
 800608c:	21eb      	movs	r1, #235	@ 0xeb
 800608e:	488b      	ldr	r0, [pc, #556]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006090:	f7fa fe9c 	bl	8000dcc <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006094:	4b8a      	ldr	r3, [pc, #552]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b04      	cmp	r3, #4
 800609e:	d00c      	beq.n	80060ba <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060a0:	4b87      	ldr	r3, [pc, #540]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d112      	bne.n	80060d2 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ac:	4b84      	ldr	r3, [pc, #528]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b8:	d10b      	bne.n	80060d2 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ba:	4b81      	ldr	r3, [pc, #516]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05b      	beq.n	800617e <HAL_RCC_OscConfig+0x13e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d157      	bne.n	800617e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e2d8      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060da:	d106      	bne.n	80060ea <HAL_RCC_OscConfig+0xaa>
 80060dc:	4b78      	ldr	r3, [pc, #480]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a77      	ldr	r2, [pc, #476]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e01d      	b.n	8006126 <HAL_RCC_OscConfig+0xe6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060f2:	d10c      	bne.n	800610e <HAL_RCC_OscConfig+0xce>
 80060f4:	4b72      	ldr	r3, [pc, #456]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a71      	ldr	r2, [pc, #452]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80060fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	4b6f      	ldr	r3, [pc, #444]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a6e      	ldr	r2, [pc, #440]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e00b      	b.n	8006126 <HAL_RCC_OscConfig+0xe6>
 800610e:	4b6c      	ldr	r3, [pc, #432]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a6b      	ldr	r2, [pc, #428]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b69      	ldr	r3, [pc, #420]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a68      	ldr	r2, [pc, #416]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006124:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d013      	beq.n	8006156 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612e:	f7fb f86d 	bl	800120c <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006136:	f7fb f869 	bl	800120c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b64      	cmp	r3, #100	@ 0x64
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e29d      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006148:	4b5d      	ldr	r3, [pc, #372]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0xf6>
 8006154:	e014      	b.n	8006180 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006156:	f7fb f859 	bl	800120c <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800615e:	f7fb f855 	bl	800120c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b64      	cmp	r3, #100	@ 0x64
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e289      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006170:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x11e>
 800617c:	e000      	b.n	8006180 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d079      	beq.n	8006280 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCC_OscConfig+0x166>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d004      	beq.n	80061a6 <HAL_RCC_OscConfig+0x166>
 800619c:	f240 111d 	movw	r1, #285	@ 0x11d
 80061a0:	4846      	ldr	r0, [pc, #280]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061a2:	f7fa fe13 	bl	8000dcc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b1f      	cmp	r3, #31
 80061ac:	d904      	bls.n	80061b8 <HAL_RCC_OscConfig+0x178>
 80061ae:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80061b2:	4842      	ldr	r0, [pc, #264]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061b4:	f7fa fe0a 	bl	8000dcc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061b8:	4b41      	ldr	r3, [pc, #260]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061c4:	4b3e      	ldr	r3, [pc, #248]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d11c      	bne.n	800620a <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061d0:	4b3b      	ldr	r3, [pc, #236]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d116      	bne.n	800620a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061dc:	4b38      	ldr	r3, [pc, #224]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1b4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e247      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f4:	4b32      	ldr	r3, [pc, #200]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	492f      	ldr	r1, [pc, #188]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006208:	e03a      	b.n	8006280 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d020      	beq.n	8006254 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006212:	4b2c      	ldr	r3, [pc, #176]	@ (80062c4 <HAL_RCC_OscConfig+0x284>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fa fff8 	bl	800120c <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006220:	f7fa fff4 	bl	800120c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e228      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006232:	4b23      	ldr	r3, [pc, #140]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623e:	4b20      	ldr	r3, [pc, #128]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	491c      	ldr	r1, [pc, #112]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]
 8006252:	e015      	b.n	8006280 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006254:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <HAL_RCC_OscConfig+0x284>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fa ffd7 	bl	800120c <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006262:	f7fa ffd3 	bl	800120c <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e207      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006274:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d045      	beq.n	8006318 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_OscConfig+0x266>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d004      	beq.n	80062a6 <HAL_RCC_OscConfig+0x266>
 800629c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80062a0:	4806      	ldr	r0, [pc, #24]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80062a2:	f7fa fd93 	bl	8000dcc <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01e      	beq.n	80062ec <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_OscConfig+0x288>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fa ffaa 	bl	800120c <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ba:	e010      	b.n	80062de <HAL_RCC_OscConfig+0x29e>
 80062bc:	0800b80c 	.word	0x0800b80c
 80062c0:	40023800 	.word	0x40023800
 80062c4:	42470000 	.word	0x42470000
 80062c8:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062cc:	f7fa ff9e 	bl	800120c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e1d2      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062de:	4b5e      	ldr	r3, [pc, #376]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80062e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0x28c>
 80062ea:	e015      	b.n	8006318 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ec:	4b5b      	ldr	r3, [pc, #364]	@ (800645c <HAL_RCC_OscConfig+0x41c>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7fa ff8b 	bl	800120c <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fa ff87 	bl	800120c <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1bb      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800630c:	4b52      	ldr	r3, [pc, #328]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 800630e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f0      	bne.n	80062fa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80b0 	beq.w	8006486 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d008      	beq.n	800634c <HAL_RCC_OscConfig+0x30c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b05      	cmp	r3, #5
 8006340:	d004      	beq.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006342:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8006346:	4846      	ldr	r0, [pc, #280]	@ (8006460 <HAL_RCC_OscConfig+0x420>)
 8006348:	f7fa fd40 	bl	8000dcc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634c:	4b42      	ldr	r3, [pc, #264]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006358:	2300      	movs	r3, #0
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	4b3e      	ldr	r3, [pc, #248]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	4a3d      	ldr	r2, [pc, #244]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006366:	6413      	str	r3, [r2, #64]	@ 0x40
 8006368:	4b3b      	ldr	r3, [pc, #236]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006374:	2301      	movs	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006378:	4b3a      	ldr	r3, [pc, #232]	@ (8006464 <HAL_RCC_OscConfig+0x424>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d118      	bne.n	80063b6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006384:	4b37      	ldr	r3, [pc, #220]	@ (8006464 <HAL_RCC_OscConfig+0x424>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a36      	ldr	r2, [pc, #216]	@ (8006464 <HAL_RCC_OscConfig+0x424>)
 800638a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006390:	f7fa ff3c 	bl	800120c <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006398:	f7fa ff38 	bl	800120c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e16c      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063aa:	4b2e      	ldr	r3, [pc, #184]	@ (8006464 <HAL_RCC_OscConfig+0x424>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x38c>
 80063be:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c2:	4a25      	ldr	r2, [pc, #148]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ca:	e01c      	b.n	8006406 <HAL_RCC_OscConfig+0x3c6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b05      	cmp	r3, #5
 80063d2:	d10c      	bne.n	80063ee <HAL_RCC_OscConfig+0x3ae>
 80063d4:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063da:	f043 0304 	orr.w	r3, r3, #4
 80063de:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ec:	e00b      	b.n	8006406 <HAL_RCC_OscConfig+0x3c6>
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f2:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fa:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fe:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 8006400:	f023 0304 	bic.w	r3, r3, #4
 8006404:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d015      	beq.n	800643a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640e:	f7fa fefd 	bl	800120c <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006414:	e00a      	b.n	800642c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006416:	f7fa fef9 	bl	800120c <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006424:	4293      	cmp	r3, r2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e12b      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <HAL_RCC_OscConfig+0x418>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ee      	beq.n	8006416 <HAL_RCC_OscConfig+0x3d6>
 8006438:	e01c      	b.n	8006474 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643a:	f7fa fee7 	bl	800120c <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006440:	e012      	b.n	8006468 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006442:	f7fa fee3 	bl	800120c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006450:	4293      	cmp	r3, r2
 8006452:	d909      	bls.n	8006468 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e115      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
 8006458:	40023800 	.word	0x40023800
 800645c:	42470e80 	.word	0x42470e80
 8006460:	0800b80c 	.word	0x0800b80c
 8006464:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006468:	4b88      	ldr	r3, [pc, #544]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e6      	bne.n	8006442 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d105      	bne.n	8006486 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647a:	4b84      	ldr	r3, [pc, #528]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	4a83      	ldr	r2, [pc, #524]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 8006480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x468>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d008      	beq.n	80064a8 <HAL_RCC_OscConfig+0x468>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d004      	beq.n	80064a8 <HAL_RCC_OscConfig+0x468>
 800649e:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80064a2:	487b      	ldr	r0, [pc, #492]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 80064a4:	f7fa fc92 	bl	8000dcc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80e8 	beq.w	8006682 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064b2:	4b76      	ldr	r3, [pc, #472]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	f000 80a9 	beq.w	8006612 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	f040 808d 	bne.w	80065e4 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4a6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064da:	d004      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4a6>
 80064dc:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80064e0:	486b      	ldr	r0, [pc, #428]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 80064e2:	f7fa fc73 	bl	8000dcc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d903      	bls.n	80064f6 <HAL_RCC_OscConfig+0x4b6>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80064f4:	d904      	bls.n	8006500 <HAL_RCC_OscConfig+0x4c0>
 80064f6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80064fa:	4865      	ldr	r0, [pc, #404]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 80064fc:	f7fa fc66 	bl	8000dcc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	2b31      	cmp	r3, #49	@ 0x31
 8006506:	d904      	bls.n	8006512 <HAL_RCC_OscConfig+0x4d2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006510:	d904      	bls.n	800651c <HAL_RCC_OscConfig+0x4dc>
 8006512:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8006516:	485e      	ldr	r0, [pc, #376]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 8006518:	f7fa fc58 	bl	8000dcc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	2b02      	cmp	r3, #2
 8006522:	d010      	beq.n	8006546 <HAL_RCC_OscConfig+0x506>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	2b04      	cmp	r3, #4
 800652a:	d00c      	beq.n	8006546 <HAL_RCC_OscConfig+0x506>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	2b06      	cmp	r3, #6
 8006532:	d008      	beq.n	8006546 <HAL_RCC_OscConfig+0x506>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006538:	2b08      	cmp	r3, #8
 800653a:	d004      	beq.n	8006546 <HAL_RCC_OscConfig+0x506>
 800653c:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8006540:	4853      	ldr	r0, [pc, #332]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 8006542:	f7fa fc43 	bl	8000dcc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d903      	bls.n	8006556 <HAL_RCC_OscConfig+0x516>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d904      	bls.n	8006560 <HAL_RCC_OscConfig+0x520>
 8006556:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800655a:	484d      	ldr	r0, [pc, #308]	@ (8006690 <HAL_RCC_OscConfig+0x650>)
 800655c:	f7fa fc36 	bl	8000dcc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006560:	4b4c      	ldr	r3, [pc, #304]	@ (8006694 <HAL_RCC_OscConfig+0x654>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fa fe51 	bl	800120c <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656e:	f7fa fe4d 	bl	800120c <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e081      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006580:	4b42      	ldr	r3, [pc, #264]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659a:	019b      	lsls	r3, r3, #6
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	3b01      	subs	r3, #1
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	4936      	ldr	r1, [pc, #216]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <HAL_RCC_OscConfig+0x654>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fa fe26 	bl	800120c <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fa fe22 	bl	800120c <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e056      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d6:	4b2d      	ldr	r3, [pc, #180]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x584>
 80065e2:	e04e      	b.n	8006682 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_RCC_OscConfig+0x654>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fa fe0f 	bl	800120c <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fa fe0b 	bl	800120c <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e03f      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006604:	4b21      	ldr	r3, [pc, #132]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f0      	bne.n	80065f2 <HAL_RCC_OscConfig+0x5b2>
 8006610:	e037      	b.n	8006682 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e032      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800661e:	4b1b      	ldr	r3, [pc, #108]	@ (800668c <HAL_RCC_OscConfig+0x64c>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d028      	beq.n	800667e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006636:	429a      	cmp	r2, r3
 8006638:	d121      	bne.n	800667e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d11a      	bne.n	800667e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800664e:	4013      	ands	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006654:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006656:	4293      	cmp	r3, r2
 8006658:	d111      	bne.n	800667e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	3b01      	subs	r3, #1
 8006668:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d107      	bne.n	800667e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d001      	beq.n	8006682 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40023800 	.word	0x40023800
 8006690:	0800b80c 	.word	0x0800b80c
 8006694:	42470060 	.word	0x42470060

08006698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e174      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_RCC_ClockConfig+0x24>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b0f      	cmp	r3, #15
 80066ba:	d904      	bls.n	80066c6 <HAL_RCC_ClockConfig+0x2e>
 80066bc:	f240 215a 	movw	r1, #602	@ 0x25a
 80066c0:	487b      	ldr	r0, [pc, #492]	@ (80068b0 <HAL_RCC_ClockConfig+0x218>)
 80066c2:	f7fa fb83 	bl	8000dcc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d019      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d016      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d013      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d010      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d00d      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d00a      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b06      	cmp	r3, #6
 80066ee:	d007      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b07      	cmp	r3, #7
 80066f4:	d004      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
 80066f6:	f240 215b 	movw	r1, #603	@ 0x25b
 80066fa:	486d      	ldr	r0, [pc, #436]	@ (80068b0 <HAL_RCC_ClockConfig+0x218>)
 80066fc:	f7fa fb66 	bl	8000dcc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006700:	4b6c      	ldr	r3, [pc, #432]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90c      	bls.n	8006728 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b69      	ldr	r3, [pc, #420]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b67      	ldr	r3, [pc, #412]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e136      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d049      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006740:	4b5d      	ldr	r3, [pc, #372]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a5c      	ldr	r2, [pc, #368]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800674a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006758:	4b57      	ldr	r3, [pc, #348]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a56      	ldr	r2, [pc, #344]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 800675e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d024      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d020      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b90      	cmp	r3, #144	@ 0x90
 800677a:	d01c      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2ba0      	cmp	r3, #160	@ 0xa0
 8006782:	d018      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2bb0      	cmp	r3, #176	@ 0xb0
 800678a:	d014      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2bc0      	cmp	r3, #192	@ 0xc0
 8006792:	d010      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2bd0      	cmp	r3, #208	@ 0xd0
 800679a:	d00c      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2be0      	cmp	r3, #224	@ 0xe0
 80067a2:	d008      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x11e>
 80067ac:	f240 217e 	movw	r1, #638	@ 0x27e
 80067b0:	483f      	ldr	r0, [pc, #252]	@ (80068b0 <HAL_RCC_ClockConfig+0x218>)
 80067b2:	f7fa fb0b 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b6:	4b40      	ldr	r3, [pc, #256]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	493d      	ldr	r1, [pc, #244]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d059      	beq.n	8006888 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d010      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d00c      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d004      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
 80067f4:	f240 2185 	movw	r1, #645	@ 0x285
 80067f8:	482d      	ldr	r0, [pc, #180]	@ (80068b0 <HAL_RCC_ClockConfig+0x218>)
 80067fa:	f7fa fae7 	bl	8000dcc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d107      	bne.n	8006816 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006806:	4b2c      	ldr	r3, [pc, #176]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d119      	bne.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e0bf      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d003      	beq.n	8006826 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006822:	2b03      	cmp	r3, #3
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006826:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0af      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006836:	4b20      	ldr	r3, [pc, #128]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e0a7      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006846:	4b1c      	ldr	r3, [pc, #112]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f023 0203 	bic.w	r2, r3, #3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4919      	ldr	r1, [pc, #100]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006854:	4313      	orrs	r3, r2
 8006856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006858:	f7fa fcd8 	bl	800120c <HAL_GetTick>
 800685c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685e:	e00a      	b.n	8006876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006860:	f7fa fcd4 	bl	800120c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e08f      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	4b10      	ldr	r3, [pc, #64]	@ (80068b8 <HAL_RCC_ClockConfig+0x220>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 020c 	and.w	r2, r3, #12
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	429a      	cmp	r2, r3
 8006886:	d1eb      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006888:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d212      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689e:	4b05      	ldr	r3, [pc, #20]	@ (80068b4 <HAL_RCC_ClockConfig+0x21c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d007      	beq.n	80068bc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e072      	b.n	8006996 <HAL_RCC_ClockConfig+0x2fe>
 80068b0:	0800b80c 	.word	0x0800b80c
 80068b4:	40023c00 	.word	0x40023c00
 80068b8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d025      	beq.n	8006914 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d018      	beq.n	8006902 <HAL_RCC_ClockConfig+0x26a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d8:	d013      	beq.n	8006902 <HAL_RCC_ClockConfig+0x26a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068e2:	d00e      	beq.n	8006902 <HAL_RCC_ClockConfig+0x26a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x26a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80068f6:	d004      	beq.n	8006902 <HAL_RCC_ClockConfig+0x26a>
 80068f8:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80068fc:	4828      	ldr	r0, [pc, #160]	@ (80069a0 <HAL_RCC_ClockConfig+0x308>)
 80068fe:	f7fa fa65 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006902:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <HAL_RCC_ClockConfig+0x30c>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	4925      	ldr	r1, [pc, #148]	@ (80069a4 <HAL_RCC_ClockConfig+0x30c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d026      	beq.n	800696e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d018      	beq.n	800695a <HAL_RCC_ClockConfig+0x2c2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d013      	beq.n	800695a <HAL_RCC_ClockConfig+0x2c2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800693a:	d00e      	beq.n	800695a <HAL_RCC_ClockConfig+0x2c2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006944:	d009      	beq.n	800695a <HAL_RCC_ClockConfig+0x2c2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800694e:	d004      	beq.n	800695a <HAL_RCC_ClockConfig+0x2c2>
 8006950:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8006954:	4812      	ldr	r0, [pc, #72]	@ (80069a0 <HAL_RCC_ClockConfig+0x308>)
 8006956:	f7fa fa39 	bl	8000dcc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800695a:	4b12      	ldr	r3, [pc, #72]	@ (80069a4 <HAL_RCC_ClockConfig+0x30c>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	490e      	ldr	r1, [pc, #56]	@ (80069a4 <HAL_RCC_ClockConfig+0x30c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800696e:	f000 f821 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8006972:	4602      	mov	r2, r0
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <HAL_RCC_ClockConfig+0x30c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	490a      	ldr	r1, [pc, #40]	@ (80069a8 <HAL_RCC_ClockConfig+0x310>)
 8006980:	5ccb      	ldrb	r3, [r1, r3]
 8006982:	fa22 f303 	lsr.w	r3, r2, r3
 8006986:	4a09      	ldr	r2, [pc, #36]	@ (80069ac <HAL_RCC_ClockConfig+0x314>)
 8006988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800698a:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <HAL_RCC_ClockConfig+0x318>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fa fbf8 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	0800b80c 	.word	0x0800b80c
 80069a4:	40023800 	.word	0x40023800
 80069a8:	0800b8bc 	.word	0x0800b8bc
 80069ac:	20000000 	.word	0x20000000
 80069b0:	20000004 	.word	0x20000004

080069b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b8:	b094      	sub	sp, #80	@ 0x50
 80069ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069cc:	4b79      	ldr	r3, [pc, #484]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d00d      	beq.n	80069f4 <HAL_RCC_GetSysClockFreq+0x40>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	f200 80e1 	bhi.w	8006ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x34>
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d003      	beq.n	80069ee <HAL_RCC_GetSysClockFreq+0x3a>
 80069e6:	e0db      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e8:	4b73      	ldr	r3, [pc, #460]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80069ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069ec:	e0db      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ee:	4b73      	ldr	r3, [pc, #460]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069f2:	e0d8      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f4:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fe:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d063      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	2200      	movs	r2, #0
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f04f 0000 	mov.w	r0, #0
 8006a2e:	f04f 0100 	mov.w	r1, #0
 8006a32:	0159      	lsls	r1, r3, #5
 8006a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a38:	0150      	lsls	r0, r2, #5
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4621      	mov	r1, r4
 8006a40:	1a51      	subs	r1, r2, r1
 8006a42:	6139      	str	r1, [r7, #16]
 8006a44:	4629      	mov	r1, r5
 8006a46:	eb63 0301 	sbc.w	r3, r3, r1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a58:	4659      	mov	r1, fp
 8006a5a:	018b      	lsls	r3, r1, #6
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a62:	4651      	mov	r1, sl
 8006a64:	018a      	lsls	r2, r1, #6
 8006a66:	4651      	mov	r1, sl
 8006a68:	ebb2 0801 	subs.w	r8, r2, r1
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a86:	4690      	mov	r8, r2
 8006a88:	4699      	mov	r9, r3
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	eb18 0303 	adds.w	r3, r8, r3
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	462b      	mov	r3, r5
 8006a94:	eb49 0303 	adc.w	r3, r9, r3
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	024b      	lsls	r3, r1, #9
 8006aaa:	4621      	mov	r1, r4
 8006aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	024a      	lsls	r2, r1, #9
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aba:	2200      	movs	r2, #0
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ac4:	f7f9 fb88 	bl	80001d8 <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4613      	mov	r3, r2
 8006ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad0:	e058      	b.n	8006b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ad2:	4b38      	ldr	r3, [pc, #224]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	4611      	mov	r1, r2
 8006ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ae2:	623b      	str	r3, [r7, #32]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	f04f 0000 	mov.w	r0, #0
 8006af4:	f04f 0100 	mov.w	r1, #0
 8006af8:	0159      	lsls	r1, r3, #5
 8006afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afe:	0150      	lsls	r0, r2, #5
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4641      	mov	r1, r8
 8006b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b24:	ebb2 040a 	subs.w	r4, r2, sl
 8006b28:	eb63 050b 	sbc.w	r5, r3, fp
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	00eb      	lsls	r3, r5, #3
 8006b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b3a:	00e2      	lsls	r2, r4, #3
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	464b      	mov	r3, r9
 8006b48:	eb45 0303 	adc.w	r3, r5, r3
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	028b      	lsls	r3, r1, #10
 8006b5e:	4621      	mov	r1, r4
 8006b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b64:	4621      	mov	r1, r4
 8006b66:	028a      	lsls	r2, r1, #10
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	61fa      	str	r2, [r7, #28]
 8006b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b78:	f7f9 fb2e 	bl	80001d8 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4613      	mov	r3, r2
 8006b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b84:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	3301      	adds	r3, #1
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b9e:	e002      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3750      	adds	r7, #80	@ 0x50
 8006bac:	46bd      	mov	sp, r7
 8006bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	00f42400 	.word	0x00f42400
 8006bbc:	007a1200 	.word	0x007a1200

08006bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	@ (8006bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000000 	.word	0x20000000

08006bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bdc:	f7ff fff0 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	0a9b      	lsrs	r3, r3, #10
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4903      	ldr	r1, [pc, #12]	@ (8006bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bee:	5ccb      	ldrb	r3, [r1, r3]
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	0800b8cc 	.word	0x0800b8cc

08006c00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b0f      	cmp	r3, #15
 8006c1e:	d904      	bls.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006c20:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 8006c24:	4834      	ldr	r0, [pc, #208]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006c26:	f7fa f8d1 	bl	8000dcc <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d066      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d903      	bls.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b07      	cmp	r3, #7
 8006c50:	d904      	bls.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c52:	f640 2104 	movw	r1, #2564	@ 0xa04
 8006c56:	4828      	ldr	r0, [pc, #160]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006c58:	f7fa f8b8 	bl	8000dcc <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b31      	cmp	r3, #49	@ 0x31
 8006c62:	d904      	bls.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006c6c:	d904      	bls.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c6e:	f640 2105 	movw	r1, #2565	@ 0xa05
 8006c72:	4821      	ldr	r0, [pc, #132]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006c74:	f7fa f8aa 	bl	8000dcc <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d903      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c86:	d904      	bls.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006c88:	f640 2107 	movw	r1, #2567	@ 0xa07
 8006c8c:	481a      	ldr	r0, [pc, #104]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006c8e:	f7fa f89d 	bl	8000dcc <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c92:	4b1a      	ldr	r3, [pc, #104]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c98:	f7fa fab8 	bl	800120c <HAL_GetTick>
 8006c9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ca0:	f7fa fab4 	bl	800120c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e1b3      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb2:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	019b      	lsls	r3, r3, #6
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	071b      	lsls	r3, r3, #28
 8006cd0:	490b      	ldr	r1, [pc, #44]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cd8:	4b08      	ldr	r3, [pc, #32]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cde:	f7fa fa95 	bl	800120c <HAL_GetTick>
 8006ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ce4:	e00e      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ce6:	f7fa fa91 	bl	800120c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d907      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e190      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006cf8:	0800b844 	.word	0x0800b844
 8006cfc:	42470068 	.word	0x42470068
 8006d00:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d04:	4b88      	ldr	r3, [pc, #544]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ea      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8173 	beq.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	f000 80a6 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d32:	f000 80a0 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	f000 809a 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	4a7a      	ldr	r2, [pc, #488]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	f000 8094 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a78      	ldr	r2, [pc, #480]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	f000 808e 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4a76      	ldr	r2, [pc, #472]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	f000 8088 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	4a74      	ldr	r2, [pc, #464]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	f000 8082 	beq.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	4a72      	ldr	r2, [pc, #456]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d07c      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	4a70      	ldr	r2, [pc, #448]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d077      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d072      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	4a6d      	ldr	r2, [pc, #436]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d06d      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	4a6c      	ldr	r2, [pc, #432]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d068      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	4a6a      	ldr	r2, [pc, #424]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d063      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	4a69      	ldr	r2, [pc, #420]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d05e      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	4a67      	ldr	r2, [pc, #412]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d059      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	4a66      	ldr	r2, [pc, #408]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d054      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	4a64      	ldr	r2, [pc, #400]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04f      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	4a63      	ldr	r2, [pc, #396]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	4a61      	ldr	r2, [pc, #388]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4a60      	ldr	r2, [pc, #384]	@ (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4a5e      	ldr	r2, [pc, #376]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	4a5d      	ldr	r2, [pc, #372]	@ (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	4a5b      	ldr	r2, [pc, #364]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	4a5a      	ldr	r2, [pc, #360]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	4a58      	ldr	r2, [pc, #352]	@ (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4a57      	ldr	r2, [pc, #348]	@ (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4a55      	ldr	r2, [pc, #340]	@ (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	4a54      	ldr	r2, [pc, #336]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	4a52      	ldr	r2, [pc, #328]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	4a51      	ldr	r2, [pc, #324]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	4a4e      	ldr	r2, [pc, #312]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e6c:	f640 2137 	movw	r1, #2615	@ 0xa37
 8006e70:	484c      	ldr	r0, [pc, #304]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006e72:	f7f9 ffab 	bl	8000dcc <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e86:	4b28      	ldr	r3, [pc, #160]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e92:	4b45      	ldr	r3, [pc, #276]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a44      	ldr	r2, [pc, #272]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e9e:	f7fa f9b5 	bl	800120c <HAL_GetTick>
 8006ea2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea6:	f7fa f9b1 	bl	800120c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e0b0      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ec4:	4b18      	ldr	r3, [pc, #96]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ecc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d073      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d06c      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ee2:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eec:	4b2f      	ldr	r3, [pc, #188]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006efe:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d158      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f0a:	f7fa f97f 	bl	800120c <HAL_GetTick>
 8006f0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f10:	e04e      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f12:	f7fa f97b 	bl	800120c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d945      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e078      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	00020300 	.word	0x00020300
 8006f30:	00030300 	.word	0x00030300
 8006f34:	00040300 	.word	0x00040300
 8006f38:	00050300 	.word	0x00050300
 8006f3c:	00060300 	.word	0x00060300
 8006f40:	00070300 	.word	0x00070300
 8006f44:	00080300 	.word	0x00080300
 8006f48:	00090300 	.word	0x00090300
 8006f4c:	000a0300 	.word	0x000a0300
 8006f50:	000b0300 	.word	0x000b0300
 8006f54:	000c0300 	.word	0x000c0300
 8006f58:	000d0300 	.word	0x000d0300
 8006f5c:	000e0300 	.word	0x000e0300
 8006f60:	000f0300 	.word	0x000f0300
 8006f64:	00100300 	.word	0x00100300
 8006f68:	00110300 	.word	0x00110300
 8006f6c:	00120300 	.word	0x00120300
 8006f70:	00130300 	.word	0x00130300
 8006f74:	00140300 	.word	0x00140300
 8006f78:	00150300 	.word	0x00150300
 8006f7c:	00160300 	.word	0x00160300
 8006f80:	00170300 	.word	0x00170300
 8006f84:	00180300 	.word	0x00180300
 8006f88:	00190300 	.word	0x00190300
 8006f8c:	001a0300 	.word	0x001a0300
 8006f90:	001b0300 	.word	0x001b0300
 8006f94:	001c0300 	.word	0x001c0300
 8006f98:	001d0300 	.word	0x001d0300
 8006f9c:	001e0300 	.word	0x001e0300
 8006fa0:	001f0300 	.word	0x001f0300
 8006fa4:	0800b844 	.word	0x0800b844
 8006fa8:	40007000 	.word	0x40007000
 8006fac:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0aa      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc8:	d10d      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006fca:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fde:	4911      	ldr	r1, [pc, #68]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	608b      	str	r3, [r1, #8]
 8006fe4:	e005      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4a0e      	ldr	r2, [pc, #56]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006fec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ff0:	6093      	str	r3, [r2, #8]
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006ff4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffe:	4909      	ldr	r1, [pc, #36]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007000:	4313      	orrs	r3, r2
 8007002:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7d1a      	ldrb	r2, [r3, #20]
 8007014:	4b04      	ldr	r3, [pc, #16]	@ (8007028 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007016:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	424711e0 	.word	0x424711e0

0800702c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d141      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800704a:	4b25      	ldr	r3, [pc, #148]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007060:	d131      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007062:	4b20      	ldr	r3, [pc, #128]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007064:	617b      	str	r3, [r7, #20]
          break;
 8007066:	e031      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007068:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007074:	d109      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007076:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800707c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	e008      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800708a:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007094:	4a15      	ldr	r2, [pc, #84]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800709c:	4b10      	ldr	r3, [pc, #64]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800709e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a2:	099b      	lsrs	r3, r3, #6
 80070a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80070b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070b6:	0f1b      	lsrs	r3, r3, #28
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
          break;
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
          break;
 80070ca:	bf00      	nop
        }
      }
      break;
 80070cc:	e000      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80070ce:	bf00      	nop
    }
  }
  return frequency;
 80070d0:	697b      	ldr	r3, [r7, #20]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	00bb8000 	.word	0x00bb8000
 80070e8:	007a1200 	.word	0x007a1200
 80070ec:	00f42400 	.word	0x00f42400

080070f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e18c      	b.n	800741c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a75      	ldr	r2, [pc, #468]	@ (80072dc <HAL_SPI_Init+0x1ec>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d018      	beq.n	800713e <HAL_SPI_Init+0x4e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a73      	ldr	r2, [pc, #460]	@ (80072e0 <HAL_SPI_Init+0x1f0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_SPI_Init+0x4e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a72      	ldr	r2, [pc, #456]	@ (80072e4 <HAL_SPI_Init+0x1f4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_SPI_Init+0x4e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a70      	ldr	r2, [pc, #448]	@ (80072e8 <HAL_SPI_Init+0x1f8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_SPI_Init+0x4e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6f      	ldr	r2, [pc, #444]	@ (80072ec <HAL_SPI_Init+0x1fc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_SPI_Init+0x4e>
 8007134:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8007138:	486d      	ldr	r0, [pc, #436]	@ (80072f0 <HAL_SPI_Init+0x200>)
 800713a:	f7f9 fe47 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_SPI_Init+0x6a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800714e:	d004      	beq.n	800715a <HAL_SPI_Init+0x6a>
 8007150:	f240 1141 	movw	r1, #321	@ 0x141
 8007154:	4866      	ldr	r0, [pc, #408]	@ (80072f0 <HAL_SPI_Init+0x200>)
 8007156:	f7f9 fe39 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <HAL_SPI_Init+0x90>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716a:	d009      	beq.n	8007180 <HAL_SPI_Init+0x90>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007174:	d004      	beq.n	8007180 <HAL_SPI_Init+0x90>
 8007176:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800717a:	485d      	ldr	r0, [pc, #372]	@ (80072f0 <HAL_SPI_Init+0x200>)
 800717c:	f7f9 fe26 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007188:	d008      	beq.n	800719c <HAL_SPI_Init+0xac>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <HAL_SPI_Init+0xac>
 8007192:	f240 1143 	movw	r1, #323	@ 0x143
 8007196:	4856      	ldr	r0, [pc, #344]	@ (80072f0 <HAL_SPI_Init+0x200>)
 8007198:	f7f9 fe18 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a4:	d00d      	beq.n	80071c2 <HAL_SPI_Init+0xd2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <HAL_SPI_Init+0xd2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071b6:	d004      	beq.n	80071c2 <HAL_SPI_Init+0xd2>
 80071b8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80071bc:	484c      	ldr	r0, [pc, #304]	@ (80072f0 <HAL_SPI_Init+0x200>)
 80071be:	f7f9 fe05 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d020      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d01c      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d018      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b18      	cmp	r3, #24
 80071e0:	d014      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d010      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	2b28      	cmp	r3, #40	@ 0x28
 80071f0:	d00c      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b30      	cmp	r3, #48	@ 0x30
 80071f8:	d008      	beq.n	800720c <HAL_SPI_Init+0x11c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	2b38      	cmp	r3, #56	@ 0x38
 8007200:	d004      	beq.n	800720c <HAL_SPI_Init+0x11c>
 8007202:	f240 1145 	movw	r1, #325	@ 0x145
 8007206:	483a      	ldr	r0, [pc, #232]	@ (80072f0 <HAL_SPI_Init+0x200>)
 8007208:	f7f9 fde0 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_SPI_Init+0x136>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	2b80      	cmp	r3, #128	@ 0x80
 800721a:	d004      	beq.n	8007226 <HAL_SPI_Init+0x136>
 800721c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8007220:	4833      	ldr	r0, [pc, #204]	@ (80072f0 <HAL_SPI_Init+0x200>)
 8007222:	f7f9 fdd3 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <HAL_SPI_Init+0x150>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007232:	2b10      	cmp	r3, #16
 8007234:	d004      	beq.n	8007240 <HAL_SPI_Init+0x150>
 8007236:	f240 1147 	movw	r1, #327	@ 0x147
 800723a:	482d      	ldr	r0, [pc, #180]	@ (80072f0 <HAL_SPI_Init+0x200>)
 800723c:	f7f9 fdc6 	bl	8000dcc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	d155      	bne.n	80072f4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_SPI_Init+0x172>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d004      	beq.n	8007262 <HAL_SPI_Init+0x172>
 8007258:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800725c:	4824      	ldr	r0, [pc, #144]	@ (80072f0 <HAL_SPI_Init+0x200>)
 800725e:	f7f9 fdb5 	bl	8000dcc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <HAL_SPI_Init+0x18c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d004      	beq.n	800727c <HAL_SPI_Init+0x18c>
 8007272:	f240 114b 	movw	r1, #331	@ 0x14b
 8007276:	481e      	ldr	r0, [pc, #120]	@ (80072f0 <HAL_SPI_Init+0x200>)
 8007278:	f7f9 fda8 	bl	8000dcc <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007284:	d125      	bne.n	80072d2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d05d      	beq.n	800734a <HAL_SPI_Init+0x25a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b08      	cmp	r3, #8
 8007294:	d059      	beq.n	800734a <HAL_SPI_Init+0x25a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b10      	cmp	r3, #16
 800729c:	d055      	beq.n	800734a <HAL_SPI_Init+0x25a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b18      	cmp	r3, #24
 80072a4:	d051      	beq.n	800734a <HAL_SPI_Init+0x25a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d04d      	beq.n	800734a <HAL_SPI_Init+0x25a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	2b28      	cmp	r3, #40	@ 0x28
 80072b4:	d049      	beq.n	800734a <HAL_SPI_Init+0x25a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	2b30      	cmp	r3, #48	@ 0x30
 80072bc:	d045      	beq.n	800734a <HAL_SPI_Init+0x25a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b38      	cmp	r3, #56	@ 0x38
 80072c4:	d041      	beq.n	800734a <HAL_SPI_Init+0x25a>
 80072c6:	f240 114f 	movw	r1, #335	@ 0x14f
 80072ca:	4809      	ldr	r0, [pc, #36]	@ (80072f0 <HAL_SPI_Init+0x200>)
 80072cc:	f7f9 fd7e 	bl	8000dcc <assert_failed>
 80072d0:	e03b      	b.n	800734a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
 80072d8:	e037      	b.n	800734a <HAL_SPI_Init+0x25a>
 80072da:	bf00      	nop
 80072dc:	40013000 	.word	0x40013000
 80072e0:	40003800 	.word	0x40003800
 80072e4:	40003c00 	.word	0x40003c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40015000 	.word	0x40015000
 80072f0:	0800b880 	.word	0x0800b880
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d020      	beq.n	800733e <HAL_SPI_Init+0x24e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d01c      	beq.n	800733e <HAL_SPI_Init+0x24e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	2b10      	cmp	r3, #16
 800730a:	d018      	beq.n	800733e <HAL_SPI_Init+0x24e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	2b18      	cmp	r3, #24
 8007312:	d014      	beq.n	800733e <HAL_SPI_Init+0x24e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	2b20      	cmp	r3, #32
 800731a:	d010      	beq.n	800733e <HAL_SPI_Init+0x24e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	2b28      	cmp	r3, #40	@ 0x28
 8007322:	d00c      	beq.n	800733e <HAL_SPI_Init+0x24e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	2b30      	cmp	r3, #48	@ 0x30
 800732a:	d008      	beq.n	800733e <HAL_SPI_Init+0x24e>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	2b38      	cmp	r3, #56	@ 0x38
 8007332:	d004      	beq.n	800733e <HAL_SPI_Init+0x24e>
 8007334:	f240 1159 	movw	r1, #345	@ 0x159
 8007338:	483a      	ldr	r0, [pc, #232]	@ (8007424 <HAL_SPI_Init+0x334>)
 800733a:	f7f9 fd47 	bl	8000dcc <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7f9 fd73 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007380:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ce:	ea42 0103 	orr.w	r1, r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	f003 0104 	and.w	r1, r3, #4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	f003 0210 	and.w	r2, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69da      	ldr	r2, [r3, #28]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800740a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0800b880 	.word	0x0800b880

08007428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007428:	b084      	sub	sp, #16
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	f107 001c 	add.w	r0, r7, #28
 8007436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800743a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800743e:	2b01      	cmp	r3, #1
 8007440:	d123      	bne.n	800748a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800746a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800746e:	2b01      	cmp	r3, #1
 8007470:	d105      	bne.n	800747e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f9dc 	bl	800783c <USB_CoreReset>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e01b      	b.n	80074c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9d0 	bl	800783c <USB_CoreReset>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80074b4:	e005      	b.n	80074c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074c2:	7fbb      	ldrb	r3, [r7, #30]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d10b      	bne.n	80074e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f043 0206 	orr.w	r2, r3, #6
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f043 0220 	orr.w	r2, r3, #32
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074ec:	b004      	add	sp, #16
 80074ee:	4770      	bx	lr

080074f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f043 0201 	orr.w	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d115      	bne.n	8007582 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007562:	200a      	movs	r0, #10
 8007564:	f7f9 fe5e 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	330a      	adds	r3, #10
 800756c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f956 	bl	8007820 <USB_GetMode>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d01e      	beq.n	80075b8 <USB_SetCurrentMode+0x84>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2bc7      	cmp	r3, #199	@ 0xc7
 800757e:	d9f0      	bls.n	8007562 <USB_SetCurrentMode+0x2e>
 8007580:	e01a      	b.n	80075b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d115      	bne.n	80075b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007594:	200a      	movs	r0, #10
 8007596:	f7f9 fe45 	bl	8001224 <HAL_Delay>
      ms += 10U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	330a      	adds	r3, #10
 800759e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f93d 	bl	8007820 <USB_GetMode>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <USB_SetCurrentMode+0x84>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80075b0:	d9f0      	bls.n	8007594 <USB_SetCurrentMode+0x60>
 80075b2:	e001      	b.n	80075b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e005      	b.n	80075c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80075bc:	d101      	bne.n	80075c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e6:	d901      	bls.n	80075ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e01b      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	daf2      	bge.n	80075da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007610:	d901      	bls.n	8007616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d0f0      	beq.n	8007604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e018      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	daf2      	bge.n	800763c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2210      	movs	r2, #16
 800765e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800766c:	d901      	bls.n	8007672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e006      	b.n	8007680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b10      	cmp	r3, #16
 800767c:	d0f0      	beq.n	8007660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	@ 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4611      	mov	r1, r2
 8007698:	461a      	mov	r2, r3
 800769a:	460b      	mov	r3, r1
 800769c:	71fb      	strb	r3, [r7, #7]
 800769e:	4613      	mov	r3, r2
 80076a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d123      	bne.n	80076fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076b2:	88bb      	ldrh	r3, [r7, #4]
 80076b4:	3303      	adds	r3, #3
 80076b6:	089b      	lsrs	r3, r3, #2
 80076b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	e018      	b.n	80076f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	031a      	lsls	r2, r3, #12
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076cc:	461a      	mov	r2, r3
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3301      	adds	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	3301      	adds	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d3e2      	bcc.n	80076c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3724      	adds	r7, #36	@ 0x24
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007708:	b480      	push	{r7}
 800770a:	b08b      	sub	sp, #44	@ 0x2c
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	089b      	lsrs	r3, r3, #2
 8007722:	b29b      	uxth	r3, r3
 8007724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800772e:	2300      	movs	r3, #0
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	e014      	b.n	800775e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	3301      	adds	r3, #1
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	3301      	adds	r3, #1
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	3301      	adds	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	3301      	adds	r3, #1
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	6a3a      	ldr	r2, [r7, #32]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	429a      	cmp	r2, r3
 8007764:	d3e6      	bcc.n	8007734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007766:	8bfb      	ldrh	r3, [r7, #30]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01e      	beq.n	80077aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007776:	461a      	mov	r2, r3
 8007778:	f107 0310 	add.w	r3, r7, #16
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	701a      	strb	r2, [r3, #0]
      i++;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	3301      	adds	r3, #1
 8007796:	623b      	str	r3, [r7, #32]
      pDest++;
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	3301      	adds	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800779e:	8bfb      	ldrh	r3, [r7, #30]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077a4:	8bfb      	ldrh	r3, [r7, #30]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1ea      	bne.n	8007780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	372c      	adds	r7, #44	@ 0x2c
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4013      	ands	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4013      	ands	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007812:	68bb      	ldr	r3, [r7, #8]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f003 0301 	and.w	r3, r3, #1
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007854:	d901      	bls.n	800785a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e01b      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	daf2      	bge.n	8007848 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f043 0201 	orr.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800787e:	d901      	bls.n	8007884 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e006      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d0f0      	beq.n	8007872 <USB_CoreReset+0x36>

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078a0:	b084      	sub	sp, #16
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80078f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d10a      	bne.n	8007914 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800790c:	f043 0304 	orr.w	r3, r3, #4
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e014      	b.n	800793e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007922:	f023 0304 	bic.w	r3, r3, #4
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e009      	b.n	800793e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800793e:	2110      	movs	r1, #16
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fe43 	bl	80075cc <USB_FlushTxFifo>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fe6d 	bl	8007630 <USB_FlushRxFifo>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	e015      	b.n	8007992 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007972:	461a      	mov	r2, r3
 8007974:	f04f 33ff 	mov.w	r3, #4294967295
 8007978:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	3301      	adds	r3, #1
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007996:	461a      	mov	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4293      	cmp	r3, r2
 800799c:	d3e3      	bcc.n	8007966 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f04f 32ff 	mov.w	r2, #4294967295
 80079aa:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2280      	movs	r2, #128	@ 0x80
 80079b0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a0e      	ldr	r2, [pc, #56]	@ (80079f0 <USB_HostInit+0x150>)
 80079b6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a0e      	ldr	r2, [pc, #56]	@ (80079f4 <USB_HostInit+0x154>)
 80079bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f043 0210 	orr.w	r2, r3, #16
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	4b07      	ldr	r3, [pc, #28]	@ (80079f8 <USB_HostInit+0x158>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ec:	b004      	add	sp, #16
 80079ee:	4770      	bx	lr
 80079f0:	00600080 	.word	0x00600080
 80079f4:	004000e0 	.word	0x004000e0
 80079f8:	a3200008 	.word	0xa3200008

080079fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d107      	bne.n	8007a4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a44:	461a      	mov	r2, r3
 8007a46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a4a:	6053      	str	r3, [r2, #4]
 8007a4c:	e00c      	b.n	8007a68 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d107      	bne.n	8007a64 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007a60:	6053      	str	r3, [r2, #4]
 8007a62:	e001      	b.n	8007a68 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aa4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007aa6:	2064      	movs	r0, #100	@ 0x64
 8007aa8:	f7f9 fbbc 	bl	8001224 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007aba:	200a      	movs	r0, #10
 8007abc:	f7f9 fbb2 	bl	8001224 <HAL_Delay>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007aee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <USB_DriveVbus+0x44>
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d106      	bne.n	8007b0e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b0c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b18:	d109      	bne.n	8007b2e <USB_DriveVbus+0x64>
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b2c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	0c5b      	lsrs	r3, r3, #17
 8007b5a:	f003 0303 	and.w	r3, r3, #3
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	b29b      	uxth	r3, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	70fb      	strb	r3, [r7, #3]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70bb      	strb	r3, [r7, #2]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d867      	bhi.n	8007c9a <USB_HC_Init+0x10e>
 8007bca:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <USB_HC_Init+0x44>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007c5d 	.word	0x08007c5d
 8007bd8:	08007be1 	.word	0x08007be1
 8007bdc:	08007c1f 	.word	0x08007c1f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bec:	461a      	mov	r2, r3
 8007bee:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007bf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007bf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da51      	bge.n	8007ca0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c1a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007c1c:	e040      	b.n	8007ca0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007c30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	da34      	bge.n	8007ca4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	0151      	lsls	r1, r2, #5
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	440a      	add	r2, r1
 8007c50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c58:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c5a:	e023      	b.n	8007ca4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f240 2325 	movw	r3, #549	@ 0x225
 8007c6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da17      	bge.n	8007ca8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c92:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c96:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c98:	e006      	b.n	8007ca8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	77fb      	strb	r3, [r7, #31]
      break;
 8007c9e:	e004      	b.n	8007caa <USB_HC_Init+0x11e>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e002      	b.n	8007caa <USB_HC_Init+0x11e>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <USB_HC_Init+0x11e>
      break;
 8007ca8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cd6:	f043 0302 	orr.w	r3, r3, #2
 8007cda:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ce2:	699a      	ldr	r2, [r3, #24]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	2101      	movs	r1, #1
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	6939      	ldr	r1, [r7, #16]
 8007cf2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da03      	bge.n	8007d16 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d12:	61bb      	str	r3, [r7, #24]
 8007d14:	e001      	b.n	8007d1a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ff0e 	bl	8007b3c <USB_GetHostSpeed>
 8007d20:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d106      	bne.n	8007d38 <USB_HC_Init+0x1ac>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d003      	beq.n	8007d38 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e001      	b.n	8007d3c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d3c:	787b      	ldrb	r3, [r7, #1]
 8007d3e:	059b      	lsls	r3, r3, #22
 8007d40:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d44:	78bb      	ldrb	r3, [r7, #2]
 8007d46:	02db      	lsls	r3, r3, #11
 8007d48:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d52:	049b      	lsls	r3, r3, #18
 8007d54:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007d5a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d60:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	431a      	orrs	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d6a:	78fa      	ldrb	r2, [r7, #3]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d7a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d003      	beq.n	8007d8c <USB_HC_Init+0x200>
 8007d84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10f      	bne.n	8007dac <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007daa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop

08007db8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	@ 0x30
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007dd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007dd4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	799b      	ldrb	r3, [r3, #6]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d158      	bne.n	8007e90 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007dde:	2301      	movs	r3, #1
 8007de0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	8a92      	ldrh	r2, [r2, #20]
 8007df0:	fb03 f202 	mul.w	r2, r3, r2
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	61da      	str	r2, [r3, #28]
 8007df8:	e079      	b.n	8007eee <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	7c9b      	ldrb	r3, [r3, #18]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d130      	bne.n	8007e64 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	2bbc      	cmp	r3, #188	@ 0xbc
 8007e08:	d918      	bls.n	8007e3c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	8a9b      	ldrh	r3, [r3, #20]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d003      	beq.n	8007e2c <USB_HC_StartXfer+0x74>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d103      	bne.n	8007e34 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	60da      	str	r2, [r3, #12]
 8007e32:	e05c      	b.n	8007eee <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2201      	movs	r2, #1
 8007e38:	60da      	str	r2, [r3, #12]
 8007e3a:	e058      	b.n	8007eee <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d007      	beq.n	8007e5c <USB_HC_StartXfer+0xa4>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d003      	beq.n	8007e5c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2204      	movs	r2, #4
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	e048      	b.n	8007eee <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2203      	movs	r2, #3
 8007e60:	60da      	str	r2, [r3, #12]
 8007e62:	e044      	b.n	8007eee <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10d      	bne.n	8007e86 <USB_HC_StartXfer+0xce>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	8a92      	ldrh	r2, [r2, #20]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d907      	bls.n	8007e86 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	8a92      	ldrh	r2, [r2, #20]
 8007e7c:	fb03 f202 	mul.w	r2, r3, r2
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61da      	str	r2, [r3, #28]
 8007e84:	e033      	b.n	8007eee <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6a1a      	ldr	r2, [r3, #32]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	61da      	str	r2, [r3, #28]
 8007e8e:	e02e      	b.n	8007eee <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d018      	beq.n	8007eca <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	8a92      	ldrh	r2, [r2, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	8a92      	ldrh	r2, [r2, #20]
 8007ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007eae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007eb0:	8b7b      	ldrh	r3, [r7, #26]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d90b      	bls.n	8007ece <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	8a92      	ldrh	r2, [r2, #20]
 8007ec0:	fb03 f202 	mul.w	r2, r3, r2
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	61da      	str	r2, [r3, #28]
 8007ec8:	e001      	b.n	8007ece <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	8a92      	ldrh	r2, [r2, #20]
 8007edc:	fb03 f202 	mul.w	r2, r3, r2
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	61da      	str	r2, [r3, #28]
 8007ee4:	e003      	b.n	8007eee <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ef6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ef8:	04d9      	lsls	r1, r3, #19
 8007efa:	4ba4      	ldr	r3, [pc, #656]	@ (800818c <USB_HC_StartXfer+0x3d4>)
 8007efc:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007efe:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	7d9b      	ldrb	r3, [r3, #22]
 8007f04:	075b      	lsls	r3, r3, #29
 8007f06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f0a:	69f9      	ldr	r1, [r7, #28]
 8007f0c:	0148      	lsls	r0, r1, #5
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	4401      	add	r1, r0
 8007f12:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f16:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f18:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6999      	ldr	r1, [r3, #24]
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f30:	460a      	mov	r2, r1
 8007f32:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	6a3a      	ldr	r2, [r7, #32]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	7e7b      	ldrb	r3, [r7, #25]
 8007f7c:	075b      	lsls	r3, r3, #29
 8007f7e:	69f9      	ldr	r1, [r7, #28]
 8007f80:	0148      	lsls	r0, r1, #5
 8007f82:	6a39      	ldr	r1, [r7, #32]
 8007f84:	4401      	add	r1, r0
 8007f86:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	799b      	ldrb	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	f040 80c4 	bne.w	8008120 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7c5b      	ldrb	r3, [r3, #17]
 8007f9c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fb4:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	6a3a      	ldr	r2, [r7, #32]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007fd4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	79db      	ldrb	r3, [r3, #7]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d123      	bne.n	8008026 <USB_HC_StartXfer+0x26e>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d11f      	bne.n	8008026 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	6a3a      	ldr	r2, [r7, #32]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008004:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	6a3a      	ldr	r2, [r7, #32]
 800801a:	440a      	add	r2, r1
 800801c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008024:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	7c9b      	ldrb	r3, [r3, #18]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d003      	beq.n	8008036 <USB_HC_StartXfer+0x27e>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	7c9b      	ldrb	r3, [r3, #18]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d117      	bne.n	8008066 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800803a:	2b01      	cmp	r3, #1
 800803c:	d113      	bne.n	8008066 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	78db      	ldrb	r3, [r3, #3]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d10f      	bne.n	8008066 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	6a3a      	ldr	r2, [r7, #32]
 800805a:	440a      	add	r2, r1
 800805c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008064:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	7c9b      	ldrb	r3, [r3, #18]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d163      	bne.n	8008136 <USB_HC_StartXfer+0x37e>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d15f      	bne.n	8008136 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	3b01      	subs	r3, #1
 800807c:	2b03      	cmp	r3, #3
 800807e:	d859      	bhi.n	8008134 <USB_HC_StartXfer+0x37c>
 8008080:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <USB_HC_StartXfer+0x2d0>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	08008099 	.word	0x08008099
 800808c:	080080bb 	.word	0x080080bb
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080ff 	.word	0x080080ff
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	6a3a      	ldr	r2, [r7, #32]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b6:	6053      	str	r3, [r2, #4]
          break;
 80080b8:	e03d      	b.n	8008136 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080d4:	f043 030e 	orr.w	r3, r3, #14
 80080d8:	6053      	str	r3, [r2, #4]
          break;
 80080da:	e02c      	b.n	8008136 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	6a3a      	ldr	r2, [r7, #32]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080fa:	6053      	str	r3, [r2, #4]
          break;
 80080fc:	e01b      	b.n	8008136 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	6a3a      	ldr	r2, [r7, #32]
 8008112:	440a      	add	r2, r1
 8008114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008118:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800811c:	6053      	str	r3, [r2, #4]
          break;
 800811e:	e00a      	b.n	8008136 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	4413      	add	r3, r2
 8008128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812c:	461a      	mov	r2, r3
 800812e:	2300      	movs	r3, #0
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	e000      	b.n	8008136 <USB_HC_StartXfer+0x37e>
          break;
 8008134:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	4413      	add	r3, r2
 800813e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800814c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	e003      	b.n	8008168 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008166:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800816e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817c:	461a      	mov	r2, r3
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e055      	b.n	8008238 <USB_HC_StartXfer+0x480>
 800818c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	78db      	ldrb	r3, [r3, #3]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d14e      	bne.n	8008236 <USB_HC_StartXfer+0x47e>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d04a      	beq.n	8008236 <USB_HC_StartXfer+0x47e>
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	79db      	ldrb	r3, [r3, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d146      	bne.n	8008236 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	7c9b      	ldrb	r3, [r3, #18]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d831      	bhi.n	8008214 <USB_HC_StartXfer+0x45c>
 80081b0:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <USB_HC_StartXfer+0x400>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	080081c9 	.word	0x080081c9
 80081c4:	080081ed 	.word	0x080081ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	3303      	adds	r3, #3
 80081ce:	089b      	lsrs	r3, r3, #2
 80081d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081d2:	8afa      	ldrh	r2, [r7, #22]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	b29b      	uxth	r3, r3
 80081da:	429a      	cmp	r2, r3
 80081dc:	d91c      	bls.n	8008218 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80081ea:	e015      	b.n	8008218 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	3303      	adds	r3, #3
 80081f2:	089b      	lsrs	r3, r3, #2
 80081f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80081f6:	8afa      	ldrh	r2, [r7, #22]
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	b29b      	uxth	r3, r3
 8008202:	429a      	cmp	r2, r3
 8008204:	d90a      	bls.n	800821c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	619a      	str	r2, [r3, #24]
        }
        break;
 8008212:	e003      	b.n	800821c <USB_HC_StartXfer+0x464>

      default:
        break;
 8008214:	bf00      	nop
 8008216:	e002      	b.n	800821e <USB_HC_StartXfer+0x466>
        break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <USB_HC_StartXfer+0x466>
        break;
 800821c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6999      	ldr	r1, [r3, #24]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	785a      	ldrb	r2, [r3, #1]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	b29b      	uxth	r3, r3
 800822c:	2000      	movs	r0, #0
 800822e:	9000      	str	r0, [sp, #0]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fa2b 	bl	800768c <USB_WritePacket>
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3728      	adds	r7, #40	@ 0x28
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	b29b      	uxth	r3, r3
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008262:	b480      	push	{r7}
 8008264:	b089      	sub	sp, #36	@ 0x24
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	0c9b      	lsrs	r3, r3, #18
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	0fdb      	lsrs	r3, r3, #31
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	0fdb      	lsrs	r3, r3, #31
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d10d      	bne.n	80082e4 <USB_HC_Halt+0x82>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <USB_HC_Halt+0x82>
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d002      	beq.n	80082e0 <USB_HC_Halt+0x7e>
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d101      	bne.n	80082e4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e0d8      	b.n	8008496 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <USB_HC_Halt+0x8e>
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d173      	bne.n	80083d8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800830a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800830e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d14a      	bne.n	80083b2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d133      	bne.n	8008390 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008346:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	440a      	add	r2, r1
 800835e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008362:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008366:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3301      	adds	r3, #1
 800836c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008374:	d82e      	bhi.n	80083d4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800838c:	d0ec      	beq.n	8008368 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800838e:	e081      	b.n	8008494 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083ae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083b0:	e070      	b.n	8008494 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083d2:	e05f      	b.n	8008494 <USB_HC_Halt+0x232>
            break;
 80083d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083d6:	e05d      	b.n	8008494 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d133      	bne.n	8008470 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	440a      	add	r2, r1
 800841e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008422:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008446:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3301      	adds	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008454:	d81d      	bhi.n	8008492 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800846c:	d0ec      	beq.n	8008448 <USB_HC_Halt+0x1e6>
 800846e:	e011      	b.n	8008494 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	440a      	add	r2, r1
 8008486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800848a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	e000      	b.n	8008494 <USB_HC_Halt+0x232>
          break;
 8008492:	bf00      	nop
    }
  }

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3724      	adds	r7, #36	@ 0x24
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff f82b 	bl	8007512 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084bc:	2110      	movs	r1, #16
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff f884 	bl	80075cc <USB_FlushTxFifo>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff f8ae 	bl	8007630 <USB_FlushRxFifo>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084de:	2300      	movs	r3, #0
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	e01f      	b.n	8008524 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084fa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008502:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800850a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008518:	461a      	mov	r2, r3
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	3301      	adds	r3, #1
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d9dc      	bls.n	80084e4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800852a:	2300      	movs	r3, #0
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	e034      	b.n	800859a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4413      	add	r3, r2
 8008538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008546:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800854e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008556:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008564:	461a      	mov	r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008576:	d80c      	bhi.n	8008592 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800858a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800858e:	d0ec      	beq.n	800856a <USB_StopHost+0xc8>
 8008590:	e000      	b.n	8008594 <USB_StopHost+0xf2>
        break;
 8008592:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	3301      	adds	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b0f      	cmp	r3, #15
 800859e:	d9c7      	bls.n	8008530 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085a6:	461a      	mov	r2, r3
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fe ff9a 	bl	80074f0 <USB_EnableGlobalInt>

  return ret;
 80085bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80085c6:	b590      	push	{r4, r7, lr}
 80085c8:	b089      	sub	sp, #36	@ 0x24
 80085ca:	af04      	add	r7, sp, #16
 80085cc:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80085ce:	2301      	movs	r3, #1
 80085d0:	2202      	movs	r2, #2
 80085d2:	2102      	movs	r1, #2
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fc86 	bl	8008ee6 <USBH_FindInterface>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2bff      	cmp	r3, #255	@ 0xff
 80085e2:	d002      	beq.n	80085ea <USBH_CDC_InterfaceInit+0x24>
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d901      	bls.n	80085ee <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	e13d      	b.n	800886a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fc5b 	bl	8008eae <USBH_SelectInterface>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008602:	2302      	movs	r3, #2
 8008604:	e131      	b.n	800886a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800860c:	2050      	movs	r0, #80	@ 0x50
 800860e:	f002 fb65 	bl	800acdc <malloc>
 8008612:	4603      	mov	r3, r0
 8008614:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008626:	2302      	movs	r3, #2
 8008628:	e11f      	b.n	800886a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800862a:	2250      	movs	r2, #80	@ 0x50
 800862c:	2100      	movs	r1, #0
 800862e:	68b8      	ldr	r0, [r7, #8]
 8008630:	f002 fe0a 	bl	800b248 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	211a      	movs	r1, #26
 800863a:	fb01 f303 	mul.w	r3, r1, r3
 800863e:	4413      	add	r3, r2
 8008640:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b25b      	sxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	da15      	bge.n	8008678 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	211a      	movs	r1, #26
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	211a      	movs	r1, #26
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008672:	881a      	ldrh	r2, [r3, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 ffbf 	bl	800a602 <USBH_AllocPipe>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	7819      	ldrb	r1, [r3, #0]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	7858      	ldrb	r0, [r3, #1]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	8952      	ldrh	r2, [r2, #10]
 80086a4:	9202      	str	r2, [sp, #8]
 80086a6:	2203      	movs	r2, #3
 80086a8:	9201      	str	r2, [sp, #4]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4623      	mov	r3, r4
 80086ae:	4602      	mov	r2, r0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 ff77 	bl	800a5a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 fa86 	bl	800abd0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80086c4:	2300      	movs	r3, #0
 80086c6:	2200      	movs	r2, #0
 80086c8:	210a      	movs	r1, #10
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fc0b 	bl	8008ee6 <USBH_FindInterface>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2bff      	cmp	r3, #255	@ 0xff
 80086d8:	d002      	beq.n	80086e0 <USBH_CDC_InterfaceInit+0x11a>
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d901      	bls.n	80086e4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086e0:	2302      	movs	r3, #2
 80086e2:	e0c2      	b.n	800886a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	211a      	movs	r1, #26
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da16      	bge.n	800872a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	211a      	movs	r1, #26
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	4413      	add	r3, r2
 8008708:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	211a      	movs	r1, #26
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4413      	add	r3, r2
 800871e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008722:	881a      	ldrh	r2, [r3, #0]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	835a      	strh	r2, [r3, #26]
 8008728:	e015      	b.n	8008756 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	211a      	movs	r1, #26
 8008730:	fb01 f303 	mul.w	r3, r1, r3
 8008734:	4413      	add	r3, r2
 8008736:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	211a      	movs	r1, #26
 8008746:	fb01 f303 	mul.w	r3, r1, r3
 800874a:	4413      	add	r3, r2
 800874c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008750:	881a      	ldrh	r2, [r3, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	211a      	movs	r1, #26
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b25b      	sxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	da16      	bge.n	800879c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	211a      	movs	r1, #26
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	4413      	add	r3, r2
 800877a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	211a      	movs	r1, #26
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	835a      	strh	r2, [r3, #26]
 800879a:	e015      	b.n	80087c8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	211a      	movs	r1, #26
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	211a      	movs	r1, #26
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80087c2:	881a      	ldrh	r2, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	7b9b      	ldrb	r3, [r3, #14]
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 ff17 	bl	800a602 <USBH_AllocPipe>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	7bdb      	ldrb	r3, [r3, #15]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 ff0d 	bl	800a602 <USBH_AllocPipe>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	7b59      	ldrb	r1, [r3, #13]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	7b98      	ldrb	r0, [r3, #14]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	8b12      	ldrh	r2, [r2, #24]
 8008808:	9202      	str	r2, [sp, #8]
 800880a:	2202      	movs	r2, #2
 800880c:	9201      	str	r2, [sp, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4623      	mov	r3, r4
 8008812:	4602      	mov	r2, r0
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 fec5 	bl	800a5a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	7b19      	ldrb	r1, [r3, #12]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	7bd8      	ldrb	r0, [r3, #15]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	8b52      	ldrh	r2, [r2, #26]
 8008832:	9202      	str	r2, [sp, #8]
 8008834:	2202      	movs	r2, #2
 8008836:	9201      	str	r2, [sp, #4]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4623      	mov	r3, r4
 800883c:	4602      	mov	r2, r0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 feb0 	bl	800a5a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	7b5b      	ldrb	r3, [r3, #13]
 8008850:	2200      	movs	r2, #0
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f002 f9bb 	bl	800abd0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	7b1b      	ldrb	r3, [r3, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f002 f9b4 	bl	800abd0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}

08008872 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fea5 	bl	800a5e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fed0 	bl	800a644 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7b1b      	ldrb	r3, [r3, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	7b1b      	ldrb	r3, [r3, #12]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fe92 	bl	800a5e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7b1b      	ldrb	r3, [r3, #12]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 febd 	bl	800a644 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	7b5b      	ldrb	r3, [r3, #13]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	7b5b      	ldrb	r3, [r3, #13]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fe7f 	bl	800a5e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	7b5b      	ldrb	r3, [r3, #13]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 feaa 	bl	800a644 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	4618      	mov	r0, r3
 800890c:	f002 f9ee 	bl	800acec <free>
    phost->pActiveClass->pData = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008916:	2200      	movs	r2, #0
 8008918:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3340      	adds	r3, #64	@ 0x40
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f8b2 	bl	8008aa6 <GetLineCoding>
 8008942:	4603      	mov	r3, r0
 8008944:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008952:	2102      	movs	r1, #2
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008958:	7afb      	ldrb	r3, [r7, #11]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800896c:	2301      	movs	r3, #1
 800896e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008984:	2b04      	cmp	r3, #4
 8008986:	d877      	bhi.n	8008a78 <USBH_CDC_Process+0x114>
 8008988:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <USBH_CDC_Process+0x2c>)
 800898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898e:	bf00      	nop
 8008990:	080089a5 	.word	0x080089a5
 8008994:	080089ab 	.word	0x080089ab
 8008998:	080089db 	.word	0x080089db
 800899c:	08008a4f 	.word	0x08008a4f
 80089a0:	08008a5d 	.word	0x08008a5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	e06d      	b.n	8008a86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f897 	bl	8008ae4 <SetLineCoding>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089c8:	e058      	b.n	8008a7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d055      	beq.n	8008a7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2204      	movs	r2, #4
 80089d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80089d8:	e050      	b.n	8008a7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	3340      	adds	r3, #64	@ 0x40
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f860 	bl	8008aa6 <GetLineCoding>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d126      	bne.n	8008a3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d13b      	bne.n	8008a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d133      	bne.n	8008a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d12b      	bne.n	8008a80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d124      	bne.n	8008a80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f958 	bl	8008cec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a3c:	e020      	b.n	8008a80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d01d      	beq.n	8008a80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2204      	movs	r2, #4
 8008a48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a4c:	e018      	b.n	8008a80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f867 	bl	8008b22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f8da 	bl	8008c0e <CDC_ProcessReception>
      break;
 8008a5a:	e014      	b.n	8008a86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 f81a 	bl	8009a98 <USBH_ClrFeature>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008a76:	e005      	b.n	8008a84 <USBH_CDC_Process+0x120>

    default:
      break;
 8008a78:	bf00      	nop
 8008a7a:	e004      	b.n	8008a86 <USBH_CDC_Process+0x122>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e002      	b.n	8008a86 <USBH_CDC_Process+0x122>
      break;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <USBH_CDC_Process+0x122>
      break;
 8008a84:	bf00      	nop

  }

  return status;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	22a1      	movs	r2, #161	@ 0xa1
 8008ab4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2221      	movs	r2, #33	@ 0x21
 8008aba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2207      	movs	r2, #7
 8008acc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fb14 	bl	800a102 <USBH_CtlReq>
 8008ada:	4603      	mov	r3, r0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2221      	movs	r2, #33	@ 0x21
 8008af2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2207      	movs	r2, #7
 8008b0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2207      	movs	r2, #7
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 faf5 	bl	800a102 <USBH_CtlReq>
 8008b18:	4603      	mov	r3, r0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af02      	add	r7, sp, #8
 8008b28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d002      	beq.n	8008b48 <CDC_ProcessTransmission+0x26>
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d023      	beq.n	8008b8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008b46:	e05e      	b.n	8008c06 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	8b12      	ldrh	r2, [r2, #24]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d90b      	bls.n	8008b6c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	69d9      	ldr	r1, [r3, #28]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8b1a      	ldrh	r2, [r3, #24]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	7b5b      	ldrb	r3, [r3, #13]
 8008b60:	2001      	movs	r0, #1
 8008b62:	9000      	str	r0, [sp, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 fcda 	bl	800a51e <USBH_BulkSendData>
 8008b6a:	e00b      	b.n	8008b84 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	7b5b      	ldrb	r3, [r3, #13]
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	9000      	str	r0, [sp, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 fccd 	bl	800a51e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b8c:	e03b      	b.n	8008c06 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	7b5b      	ldrb	r3, [r3, #13]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fff1 	bl	800ab7c <USBH_LL_GetURBState>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d128      	bne.n	8008bf6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	8b12      	ldrh	r2, [r2, #24]
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d90e      	bls.n	8008bce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	8b12      	ldrh	r2, [r2, #24]
 8008bb8:	1a9a      	subs	r2, r3, r2
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	8b12      	ldrh	r2, [r2, #24]
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	61da      	str	r2, [r3, #28]
 8008bcc:	e002      	b.n	8008bd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d004      	beq.n	8008be6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008be4:	e00e      	b.n	8008c04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f868 	bl	8008cc4 <USBH_CDC_TransmitCallback>
      break;
 8008bf4:	e006      	b.n	8008c04 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d103      	bne.n	8008c04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c04:	bf00      	nop
  }
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b086      	sub	sp, #24
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d002      	beq.n	8008c34 <CDC_ProcessReception+0x26>
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d00e      	beq.n	8008c50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008c32:	e043      	b.n	8008cbc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	6a19      	ldr	r1, [r3, #32]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	8b5a      	ldrh	r2, [r3, #26]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	7b1b      	ldrb	r3, [r3, #12]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 fc91 	bl	800a568 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008c4e:	e035      	b.n	8008cbc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	7b1b      	ldrb	r3, [r3, #12]
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 ff90 	bl	800ab7c <USBH_LL_GetURBState>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d129      	bne.n	8008cba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	7b1b      	ldrb	r3, [r3, #12]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 fef3 	bl	800aa58 <USBH_LL_GetLastXferSize>
 8008c72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d016      	beq.n	8008cac <CDC_ProcessReception+0x9e>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	8b5b      	ldrh	r3, [r3, #26]
 8008c82:	461a      	mov	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d110      	bne.n	8008cac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	441a      	add	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008caa:	e006      	b.n	8008cba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f80f 	bl	8008cd8 <USBH_CDC_ReceiveCallback>
      break;
 8008cba:	bf00      	nop
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008d14:	2302      	movs	r3, #2
 8008d16:	e029      	b.n	8008d6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	79fa      	ldrb	r2, [r7, #7]
 8008d1c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f81f 	bl	8008d74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f001 fdc3 	bl	800a8f0 <USBH_LL_Init>

  return USBH_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e009      	b.n	8008d9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	33e0      	adds	r3, #224	@ 0xe0
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	2200      	movs	r2, #0
 8008d92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3301      	adds	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b0f      	cmp	r3, #15
 8008d9e:	d9f2      	bls.n	8008d86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e009      	b.n	8008dba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc0:	d3f1      	bcc.n	8008da6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2240      	movs	r2, #64	@ 0x40
 8008de6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	331c      	adds	r3, #28
 8008e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 fa15 	bl	800b248 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 fa0c 	bl	800b248 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008e36:	2212      	movs	r2, #18
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f002 fa04 	bl	800b248 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008e46:	223e      	movs	r2, #62	@ 0x3e
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 f9fc 	bl	800b248 <memset>

  return USBH_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10e      	bne.n	8008e96 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e7e:	1c59      	adds	r1, r3, #1
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	33de      	adds	r3, #222	@ 0xde
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
 8008e94:	e004      	b.n	8008ea0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e96:	2302      	movs	r3, #2
 8008e98:	73fb      	strb	r3, [r7, #15]
 8008e9a:	e001      	b.n	8008ea0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d204      	bcs.n	8008ed4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008ed2:	e001      	b.n	8008ed8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	70fb      	strb	r3, [r7, #3]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70bb      	strb	r3, [r7, #2]
 8008efc:	4613      	mov	r3, r2
 8008efe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f10:	e025      	b.n	8008f5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	221a      	movs	r2, #26
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	3302      	adds	r3, #2
 8008f22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	795b      	ldrb	r3, [r3, #5]
 8008f28:	78fa      	ldrb	r2, [r7, #3]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d002      	beq.n	8008f34 <USBH_FindInterface+0x4e>
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	2bff      	cmp	r3, #255	@ 0xff
 8008f32:	d111      	bne.n	8008f58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f38:	78ba      	ldrb	r2, [r7, #2]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d002      	beq.n	8008f44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f3e:	78bb      	ldrb	r3, [r7, #2]
 8008f40:	2bff      	cmp	r3, #255	@ 0xff
 8008f42:	d109      	bne.n	8008f58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f48:	787a      	ldrb	r2, [r7, #1]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d002      	beq.n	8008f54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f4e:	787b      	ldrb	r3, [r7, #1]
 8008f50:	2bff      	cmp	r3, #255	@ 0xff
 8008f52:	d101      	bne.n	8008f58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	e006      	b.n	8008f66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d9d6      	bls.n	8008f12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f64:	23ff      	movs	r3, #255	@ 0xff
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 fcf4 	bl	800a968 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f80:	2101      	movs	r1, #1
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 fe0d 	bl	800aba2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d102      	bne.n	8008fb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b0b      	cmp	r3, #11
 8008fbe:	f200 81bb 	bhi.w	8009338 <USBH_Process+0x3a4>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <USBH_Process+0x34>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008ff9 	.word	0x08008ff9
 8008fcc:	0800902b 	.word	0x0800902b
 8008fd0:	08009093 	.word	0x08009093
 8008fd4:	080092d3 	.word	0x080092d3
 8008fd8:	08009339 	.word	0x08009339
 8008fdc:	08009133 	.word	0x08009133
 8008fe0:	08009279 	.word	0x08009279
 8008fe4:	08009169 	.word	0x08009169
 8008fe8:	08009189 	.word	0x08009189
 8008fec:	080091a7 	.word	0x080091a7
 8008ff0:	080091eb 	.word	0x080091eb
 8008ff4:	080092bb 	.word	0x080092bb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 819b 	beq.w	800933c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800900c:	20c8      	movs	r0, #200	@ 0xc8
 800900e:	f001 fe12 	bl	800ac36 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fd05 	bl	800aa22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009028:	e188      	b.n	800933c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009030:	2b01      	cmp	r3, #1
 8009032:	d107      	bne.n	8009044 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009042:	e18a      	b.n	800935a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800904a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800904e:	d914      	bls.n	800907a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009056:	3301      	adds	r3, #1
 8009058:	b2da      	uxtb	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009066:	2b03      	cmp	r3, #3
 8009068:	d903      	bls.n	8009072 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220d      	movs	r2, #13
 800906e:	701a      	strb	r2, [r3, #0]
      break;
 8009070:	e173      	b.n	800935a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
      break;
 8009078:	e16f      	b.n	800935a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009080:	f103 020a 	add.w	r2, r3, #10
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800908a:	200a      	movs	r0, #10
 800908c:	f001 fdd3 	bl	800ac36 <USBH_Delay>
      break;
 8009090:	e163      	b.n	800935a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090a2:	2104      	movs	r1, #4
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80090a8:	2064      	movs	r0, #100	@ 0x64
 80090aa:	f001 fdc4 	bl	800ac36 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fc90 	bl	800a9d4 <USBH_LL_GetSpeed>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2205      	movs	r2, #5
 80090c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fa9b 	bl	800a602 <USBH_AllocPipe>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80090d4:	2180      	movs	r1, #128	@ 0x80
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fa93 	bl	800a602 <USBH_AllocPipe>
 80090dc:	4603      	mov	r3, r0
 80090de:	461a      	mov	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7919      	ldrb	r1, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090f8:	9202      	str	r2, [sp, #8]
 80090fa:	2200      	movs	r2, #0
 80090fc:	9201      	str	r2, [sp, #4]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	2280      	movs	r2, #128	@ 0x80
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fa4d 	bl	800a5a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7959      	ldrb	r1, [r3, #5]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800911e:	9202      	str	r2, [sp, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	4603      	mov	r3, r0
 8009128:	2200      	movs	r2, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 fa3a 	bl	800a5a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009130:	e113      	b.n	800935a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f916 	bl	8009364 <USBH_HandleEnum>
 8009138:	4603      	mov	r3, r0
 800913a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	f040 80fd 	bne.w	8009340 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009154:	2b01      	cmp	r3, #1
 8009156:	d103      	bne.n	8009160 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2208      	movs	r2, #8
 800915c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800915e:	e0ef      	b.n	8009340 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2207      	movs	r2, #7
 8009164:	701a      	strb	r2, [r3, #0]
      break;
 8009166:	e0eb      	b.n	8009340 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 80e8 	beq.w	8009344 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800917a:	2101      	movs	r1, #1
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2208      	movs	r2, #8
 8009184:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009186:	e0dd      	b.n	8009344 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fc3a 	bl	8009a0a <USBH_SetCfg>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	f040 80d5 	bne.w	8009348 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2209      	movs	r2, #9
 80091a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091a4:	e0d0      	b.n	8009348 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d016      	beq.n	80091e2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fc4a 	bl	8009a50 <USBH_SetFeature>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d103      	bne.n	80091d0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	220a      	movs	r2, #10
 80091cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091ce:	e0bd      	b.n	800934c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	f040 80b9 	bne.w	800934c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	220a      	movs	r2, #10
 80091de:	701a      	strb	r2, [r3, #0]
      break;
 80091e0:	e0b4      	b.n	800934c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	220a      	movs	r2, #10
 80091e6:	701a      	strb	r2, [r3, #0]
      break;
 80091e8:	e0b0      	b.n	800934c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80ad 	beq.w	8009350 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
 8009202:	e016      	b.n	8009232 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009204:	7bfa      	ldrb	r2, [r7, #15]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	32de      	adds	r2, #222	@ 0xde
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	791a      	ldrb	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009216:	429a      	cmp	r2, r3
 8009218:	d108      	bne.n	800922c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	32de      	adds	r2, #222	@ 0xde
 8009220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800922a:	e005      	b.n	8009238 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	3301      	adds	r3, #1
 8009230:	73fb      	strb	r3, [r7, #15]
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0e5      	beq.n	8009204 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d016      	beq.n	8009270 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	4798      	blx	r3
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2206      	movs	r2, #6
 8009258:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009260:	2103      	movs	r1, #3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009266:	e073      	b.n	8009350 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	220d      	movs	r2, #13
 800926c:	701a      	strb	r2, [r3, #0]
      break;
 800926e:	e06f      	b.n	8009350 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220d      	movs	r2, #13
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e06b      	b.n	8009350 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d017      	beq.n	80092b2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	220b      	movs	r2, #11
 800929e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092a0:	e058      	b.n	8009354 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d154      	bne.n	8009354 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	220d      	movs	r2, #13
 80092ae:	701a      	strb	r2, [r3, #0]
      break;
 80092b0:	e050      	b.n	8009354 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	220d      	movs	r2, #13
 80092b6:	701a      	strb	r2, [r3, #0]
      break;
 80092b8:	e04c      	b.n	8009354 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d049      	beq.n	8009358 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
      }
      break;
 80092d0:	e042      	b.n	8009358 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff fd4a 	bl	8008d74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800930e:	2105      	movs	r1, #5
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d107      	bne.n	8009330 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fe22 	bl	8008f72 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800932e:	e014      	b.n	800935a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fb19 	bl	800a968 <USBH_LL_Start>
      break;
 8009336:	e010      	b.n	800935a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009338:	bf00      	nop
 800933a:	e00e      	b.n	800935a <USBH_Process+0x3c6>
      break;
 800933c:	bf00      	nop
 800933e:	e00c      	b.n	800935a <USBH_Process+0x3c6>
      break;
 8009340:	bf00      	nop
 8009342:	e00a      	b.n	800935a <USBH_Process+0x3c6>
    break;
 8009344:	bf00      	nop
 8009346:	e008      	b.n	800935a <USBH_Process+0x3c6>
      break;
 8009348:	bf00      	nop
 800934a:	e006      	b.n	800935a <USBH_Process+0x3c6>
      break;
 800934c:	bf00      	nop
 800934e:	e004      	b.n	800935a <USBH_Process+0x3c6>
      break;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <USBH_Process+0x3c6>
      break;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <USBH_Process+0x3c6>
      break;
 8009358:	bf00      	nop
  }
  return USBH_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af04      	add	r7, sp, #16
 800936a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800936c:	2301      	movs	r3, #1
 800936e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009370:	2301      	movs	r3, #1
 8009372:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b07      	cmp	r3, #7
 800937a:	f200 81bd 	bhi.w	80096f8 <USBH_HandleEnum+0x394>
 800937e:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <USBH_HandleEnum+0x20>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093a5 	.word	0x080093a5
 8009388:	0800945f 	.word	0x0800945f
 800938c:	080094c9 	.word	0x080094c9
 8009390:	08009553 	.word	0x08009553
 8009394:	080095bd 	.word	0x080095bd
 8009398:	0800962d 	.word	0x0800962d
 800939c:	08009673 	.word	0x08009673
 80093a0:	080096b9 	.word	0x080096b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093a4:	2108      	movs	r1, #8
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa4c 	bl	8009844 <USBH_Get_DevDesc>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d12e      	bne.n	8009414 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7919      	ldrb	r1, [r3, #4]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093da:	9202      	str	r2, [sp, #8]
 80093dc:	2200      	movs	r2, #0
 80093de:	9201      	str	r2, [sp, #4]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	4603      	mov	r3, r0
 80093e4:	2280      	movs	r2, #128	@ 0x80
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 f8dc 	bl	800a5a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7959      	ldrb	r1, [r3, #5]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	2200      	movs	r2, #0
 8009404:	9201      	str	r2, [sp, #4]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4603      	mov	r3, r0
 800940a:	2200      	movs	r2, #0
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f8c9 	bl	800a5a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009412:	e173      	b.n	80096fc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	2b03      	cmp	r3, #3
 8009418:	f040 8170 	bne.w	80096fc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009422:	3301      	adds	r3, #1
 8009424:	b2da      	uxtb	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009432:	2b03      	cmp	r3, #3
 8009434:	d903      	bls.n	800943e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	220d      	movs	r2, #13
 800943a:	701a      	strb	r2, [r3, #0]
      break;
 800943c:	e15e      	b.n	80096fc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	795b      	ldrb	r3, [r3, #5]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 f8fd 	bl	800a644 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	791b      	ldrb	r3, [r3, #4]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 f8f7 	bl	800a644 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	701a      	strb	r2, [r3, #0]
      break;
 800945c:	e14e      	b.n	80096fc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800945e:	2112      	movs	r1, #18
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f9ef 	bl	8009844 <USBH_Get_DevDesc>
 8009466:	4603      	mov	r3, r0
 8009468:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009476:	e143      	b.n	8009700 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2b03      	cmp	r3, #3
 800947c:	f040 8140 	bne.w	8009700 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009486:	3301      	adds	r3, #1
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009496:	2b03      	cmp	r3, #3
 8009498:	d903      	bls.n	80094a2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	220d      	movs	r2, #13
 800949e:	701a      	strb	r2, [r3, #0]
      break;
 80094a0:	e12e      	b.n	8009700 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	795b      	ldrb	r3, [r3, #5]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f8cb 	bl	800a644 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f8c5 	bl	800a644 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
      break;
 80094c6:	e11b      	b.n	8009700 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80094c8:	2101      	movs	r1, #1
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa79 	bl	80099c2 <USBH_SetAddress>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d130      	bne.n	800953c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80094da:	2002      	movs	r0, #2
 80094dc:	f001 fbab 	bl	800ac36 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2203      	movs	r2, #3
 80094ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7919      	ldrb	r1, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009502:	9202      	str	r2, [sp, #8]
 8009504:	2200      	movs	r2, #0
 8009506:	9201      	str	r2, [sp, #4]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	4603      	mov	r3, r0
 800950c:	2280      	movs	r2, #128	@ 0x80
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 f848 	bl	800a5a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7959      	ldrb	r1, [r3, #5]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	2200      	movs	r2, #0
 800952c:	9201      	str	r2, [sp, #4]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4603      	mov	r3, r0
 8009532:	2200      	movs	r2, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 f835 	bl	800a5a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800953a:	e0e3      	b.n	8009704 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b03      	cmp	r3, #3
 8009540:	f040 80e0 	bne.w	8009704 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	220d      	movs	r2, #13
 8009548:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	705a      	strb	r2, [r3, #1]
      break;
 8009550:	e0d8      	b.n	8009704 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009552:	2109      	movs	r1, #9
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f9a1 	bl	800989c <USBH_Get_CfgDesc>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800956a:	e0cd      	b.n	8009708 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b03      	cmp	r3, #3
 8009570:	f040 80ca 	bne.w	8009708 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800957a:	3301      	adds	r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800958a:	2b03      	cmp	r3, #3
 800958c:	d903      	bls.n	8009596 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	220d      	movs	r2, #13
 8009592:	701a      	strb	r2, [r3, #0]
      break;
 8009594:	e0b8      	b.n	8009708 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	795b      	ldrb	r3, [r3, #5]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f851 	bl	800a644 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	791b      	ldrb	r3, [r3, #4]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 f84b 	bl	800a644 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
      break;
 80095ba:	e0a5      	b.n	8009708 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f969 	bl	800989c <USBH_Get_CfgDesc>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2205      	movs	r2, #5
 80095d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095da:	e097      	b.n	800970c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f040 8094 	bne.w	800970c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095ea:	3301      	adds	r3, #1
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d903      	bls.n	8009606 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	220d      	movs	r2, #13
 8009602:	701a      	strb	r2, [r3, #0]
      break;
 8009604:	e082      	b.n	800970c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	795b      	ldrb	r3, [r3, #5]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f819 	bl	800a644 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f813 	bl	800a644 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
      break;
 800962a:	e06f      	b.n	800970c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009632:	2b00      	cmp	r3, #0
 8009634:	d019      	beq.n	800966a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009642:	23ff      	movs	r3, #255	@ 0xff
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f953 	bl	80098f0 <USBH_Get_StringDesc>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d103      	bne.n	800965c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2206      	movs	r2, #6
 8009658:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800965a:	e059      	b.n	8009710 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d156      	bne.n	8009710 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2206      	movs	r2, #6
 8009666:	705a      	strb	r2, [r3, #1]
      break;
 8009668:	e052      	b.n	8009710 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2206      	movs	r2, #6
 800966e:	705a      	strb	r2, [r3, #1]
      break;
 8009670:	e04e      	b.n	8009710 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009678:	2b00      	cmp	r3, #0
 800967a:	d019      	beq.n	80096b0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009688:	23ff      	movs	r3, #255	@ 0xff
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f930 	bl	80098f0 <USBH_Get_StringDesc>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2207      	movs	r2, #7
 800969e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096a0:	e038      	b.n	8009714 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d135      	bne.n	8009714 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2207      	movs	r2, #7
 80096ac:	705a      	strb	r2, [r3, #1]
      break;
 80096ae:	e031      	b.n	8009714 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2207      	movs	r2, #7
 80096b4:	705a      	strb	r2, [r3, #1]
      break;
 80096b6:	e02d      	b.n	8009714 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d017      	beq.n	80096f2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80096ce:	23ff      	movs	r3, #255	@ 0xff
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f90d 	bl	80098f0 <USBH_Get_StringDesc>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80096e4:	e018      	b.n	8009718 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d115      	bne.n	8009718 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
      break;
 80096f0:	e012      	b.n	8009718 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]
      break;
 80096f6:	e00f      	b.n	8009718 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80096f8:	bf00      	nop
 80096fa:	e00e      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 80096fc:	bf00      	nop
 80096fe:	e00c      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009700:	bf00      	nop
 8009702:	e00a      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009704:	bf00      	nop
 8009706:	e008      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009708:	bf00      	nop
 800970a:	e006      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 800970c:	bf00      	nop
 800970e:	e004      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009710:	bf00      	nop
 8009712:	e002      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009714:	bf00      	nop
 8009716:	e000      	b.n	800971a <USBH_HandleEnum+0x3b6>
      break;
 8009718:	bf00      	nop
  }
  return Status;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f804 	bl	8009766 <USBH_HandleSof>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b0b      	cmp	r3, #11
 8009776:	d10a      	bne.n	800978e <USBH_HandleSof+0x28>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
  }
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80097a6:	bf00      	nop
}
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80097c2:	bf00      	nop
}
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 f8be 	bl	800a99e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	791b      	ldrb	r3, [r3, #4]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 ff0b 	bl	800a644 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	795b      	ldrb	r3, [r3, #5]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 ff05 	bl	800a644 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af02      	add	r7, sp, #8
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009850:	887b      	ldrh	r3, [r7, #2]
 8009852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009856:	d901      	bls.n	800985c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009858:	2303      	movs	r3, #3
 800985a:	e01b      	b.n	8009894 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009862:	887b      	ldrh	r3, [r7, #2]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	4613      	mov	r3, r2
 8009868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800986c:	2100      	movs	r1, #0
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f872 	bl	8009958 <USBH_GetDescriptor>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d109      	bne.n	8009892 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009884:	887a      	ldrh	r2, [r7, #2]
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f929 	bl	8009ae0 <USBH_ParseDevDesc>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	331c      	adds	r3, #28
 80098ac:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b4:	d901      	bls.n	80098ba <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e016      	b.n	80098e8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80098ba:	887b      	ldrh	r3, [r7, #2]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f846 	bl	8009958 <USBH_GetDescriptor>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d107      	bne.n	80098e6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80098d6:	887b      	ldrh	r3, [r7, #2]
 80098d8:	461a      	mov	r2, r3
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9af 	bl	8009c40 <USBH_ParseCfgDesc>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	461a      	mov	r2, r3
 80098fc:	460b      	mov	r3, r1
 80098fe:	72fb      	strb	r3, [r7, #11]
 8009900:	4613      	mov	r3, r2
 8009902:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990a:	d802      	bhi.n	8009912 <USBH_Get_StringDesc+0x22>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009912:	2303      	movs	r3, #3
 8009914:	e01c      	b.n	8009950 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009916:	7afb      	ldrb	r3, [r7, #11]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800991e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009926:	893b      	ldrh	r3, [r7, #8]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	460b      	mov	r3, r1
 800992c:	2100      	movs	r1, #0
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f812 	bl	8009958 <USBH_GetDescriptor>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009944:	893a      	ldrh	r2, [r7, #8]
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fb8d 	bl	800a068 <USBH_ParseStringDesc>
  }

  return status;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	72fb      	strb	r3, [r7, #11]
 8009966:	4613      	mov	r3, r2
 8009968:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	789b      	ldrb	r3, [r3, #2]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d11c      	bne.n	80099ac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2206      	movs	r2, #6
 8009982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	893a      	ldrh	r2, [r7, #8]
 8009988:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800998a:	893b      	ldrh	r3, [r7, #8]
 800998c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009990:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009994:	d104      	bne.n	80099a0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f240 4209 	movw	r2, #1033	@ 0x409
 800999c:	829a      	strh	r2, [r3, #20]
 800999e:	e002      	b.n	80099a6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8b3a      	ldrh	r2, [r7, #24]
 80099aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80099ac:	8b3b      	ldrh	r3, [r7, #24]
 80099ae:	461a      	mov	r2, r3
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fba5 	bl	800a102 <USBH_CtlReq>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	789b      	ldrb	r3, [r3, #2]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10f      	bne.n	80099f6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2205      	movs	r2, #5
 80099e0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb81 	bl	800a102 <USBH_CtlReq>
 8009a00:	4603      	mov	r3, r0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	789b      	ldrb	r3, [r3, #2]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d10e      	bne.n	8009a3c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2209      	movs	r2, #9
 8009a28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	887a      	ldrh	r2, [r7, #2]
 8009a2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb5e 	bl	800a102 <USBH_CtlReq>
 8009a46:	4603      	mov	r3, r0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10f      	bne.n	8009a84 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb3a 	bl	800a102 <USBH_CtlReq>
 8009a8e:	4603      	mov	r3, r0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	789b      	ldrb	r3, [r3, #2]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d10f      	bne.n	8009acc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fb16 	bl	800a102 <USBH_CtlReq>
 8009ad6:	4603      	mov	r3, r0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009af4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009b00:	2302      	movs	r3, #2
 8009b02:	e094      	b.n	8009c2e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	785a      	ldrb	r2, [r3, #1]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	3302      	adds	r3, #2
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	791a      	ldrb	r2, [r3, #4]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	795a      	ldrb	r2, [r3, #5]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	799a      	ldrb	r2, [r3, #6]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	79da      	ldrb	r2, [r3, #7]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d004      	beq.n	8009b62 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d11b      	bne.n	8009b9a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	79db      	ldrb	r3, [r3, #7]
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	dc0f      	bgt.n	8009b8a <USBH_ParseDevDesc+0xaa>
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	db0f      	blt.n	8009b8e <USBH_ParseDevDesc+0xae>
 8009b6e:	3b08      	subs	r3, #8
 8009b70:	4a32      	ldr	r2, [pc, #200]	@ (8009c3c <USBH_ParseDevDesc+0x15c>)
 8009b72:	fa22 f303 	lsr.w	r3, r2, r3
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d106      	bne.n	8009b96 <USBH_ParseDevDesc+0xb6>
 8009b88:	e001      	b.n	8009b8e <USBH_ParseDevDesc+0xae>
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d003      	beq.n	8009b96 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2208      	movs	r2, #8
 8009b92:	71da      	strb	r2, [r3, #7]
        break;
 8009b94:	e000      	b.n	8009b98 <USBH_ParseDevDesc+0xb8>
        break;
 8009b96:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b98:	e00e      	b.n	8009bb8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d107      	bne.n	8009bb4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	79db      	ldrb	r3, [r3, #7]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d005      	beq.n	8009bb8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2208      	movs	r2, #8
 8009bb0:	71da      	strb	r2, [r3, #7]
 8009bb2:	e001      	b.n	8009bb8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009bb8:	88fb      	ldrh	r3, [r7, #6]
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d936      	bls.n	8009c2c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	3309      	adds	r3, #9
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	330a      	adds	r3, #10
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	330b      	adds	r3, #11
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	330d      	adds	r3, #13
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	7b9a      	ldrb	r2, [r3, #14]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	7bda      	ldrb	r2, [r3, #15]
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	7c1a      	ldrb	r2, [r3, #16]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	7c5a      	ldrb	r2, [r3, #17]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	01000101 	.word	0x01000101

08009c40 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08c      	sub	sp, #48	@ 0x30
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c54:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e0da      	b.n	8009e28 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	d002      	beq.n	8009c84 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	2209      	movs	r2, #9
 8009c82:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	781a      	ldrb	r2, [r3, #0]
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	785a      	ldrb	r2, [r3, #1]
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3302      	adds	r3, #2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	3303      	adds	r3, #3
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cae:	bf28      	it	cs
 8009cb0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	791a      	ldrb	r2, [r3, #4]
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	795a      	ldrb	r2, [r3, #5]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	799a      	ldrb	r2, [r3, #6]
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	79da      	ldrb	r2, [r3, #7]
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	7a1a      	ldrb	r2, [r3, #8]
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	f240 809d 	bls.w	8009e24 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cea:	2309      	movs	r3, #9
 8009cec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cf2:	e081      	b.n	8009df8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cf4:	f107 0316 	add.w	r3, r7, #22
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cfc:	f000 f9e7 	bl	800a0ce <USBH_GetNextDesc>
 8009d00:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d04:	785b      	ldrb	r3, [r3, #1]
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d176      	bne.n	8009df8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b09      	cmp	r3, #9
 8009d10:	d002      	beq.n	8009d18 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	2209      	movs	r2, #9
 8009d16:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d1c:	221a      	movs	r2, #26
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
 8009d22:	3308      	adds	r3, #8
 8009d24:	6a3a      	ldr	r2, [r7, #32]
 8009d26:	4413      	add	r3, r2
 8009d28:	3302      	adds	r3, #2
 8009d2a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d2e:	69f8      	ldr	r0, [r7, #28]
 8009d30:	f000 f87e 	bl	8009e30 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d3e:	e043      	b.n	8009dc8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d40:	f107 0316 	add.w	r3, r7, #22
 8009d44:	4619      	mov	r1, r3
 8009d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d48:	f000 f9c1 	bl	800a0ce <USBH_GetNextDesc>
 8009d4c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d50:	785b      	ldrb	r3, [r3, #1]
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	d138      	bne.n	8009dc8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	795b      	ldrb	r3, [r3, #5]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d113      	bne.n	8009d86 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d003      	beq.n	8009d6e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	799b      	ldrb	r3, [r3, #6]
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d10b      	bne.n	8009d86 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	79db      	ldrb	r3, [r3, #7]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <USBH_ParseCfgDesc+0x14e>
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	d007      	beq.n	8009d8e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	2209      	movs	r2, #9
 8009d82:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d84:	e003      	b.n	8009d8e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	2207      	movs	r2, #7
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	e000      	b.n	8009d90 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d8e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d98:	3201      	adds	r2, #1
 8009d9a:	00d2      	lsls	r2, r2, #3
 8009d9c:	211a      	movs	r1, #26
 8009d9e:	fb01 f303 	mul.w	r3, r1, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	3308      	adds	r3, #8
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	4413      	add	r3, r2
 8009daa:	3304      	adds	r3, #4
 8009dac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db0:	69b9      	ldr	r1, [r7, #24]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f870 	bl	8009e98 <USBH_ParseEPDesc>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	791b      	ldrb	r3, [r3, #4]
 8009dcc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d204      	bcs.n	8009dde <USBH_ParseCfgDesc+0x19e>
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	885a      	ldrh	r2, [r3, #2]
 8009dd8:	8afb      	ldrh	r3, [r7, #22]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d8b0      	bhi.n	8009d40 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d201      	bcs.n	8009dee <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e01c      	b.n	8009e28 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009dee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009df2:	3301      	adds	r3, #1
 8009df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d805      	bhi.n	8009e0c <USBH_ParseCfgDesc+0x1cc>
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	885a      	ldrh	r2, [r3, #2]
 8009e04:	8afb      	ldrh	r3, [r7, #22]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	f63f af74 	bhi.w	8009cf4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	791b      	ldrb	r3, [r3, #4]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	bf28      	it	cs
 8009e14:	2302      	movcs	r3, #2
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d201      	bcs.n	8009e24 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e001      	b.n	8009e28 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3730      	adds	r7, #48	@ 0x30
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781a      	ldrb	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	785a      	ldrb	r2, [r3, #1]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	789a      	ldrb	r2, [r3, #2]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	78da      	ldrb	r2, [r3, #3]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	bf28      	it	cs
 8009e64:	2302      	movcs	r3, #2
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	795a      	ldrb	r2, [r3, #5]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	799a      	ldrb	r2, [r3, #6]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	79da      	ldrb	r2, [r3, #7]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	7a1a      	ldrb	r2, [r3, #8]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	721a      	strb	r2, [r3, #8]
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	785a      	ldrb	r2, [r3, #1]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	789a      	ldrb	r2, [r3, #2]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	78da      	ldrb	r2, [r3, #3]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3305      	adds	r3, #5
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	799a      	ldrb	r2, [r3, #6]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	889b      	ldrh	r3, [r3, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d009      	beq.n	8009f06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efa:	d804      	bhi.n	8009f06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f04:	d901      	bls.n	8009f0a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009f06:	2303      	movs	r3, #3
 8009f08:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d136      	bne.n	8009f82 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	78db      	ldrb	r3, [r3, #3]
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d108      	bne.n	8009f32 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	889b      	ldrh	r3, [r3, #4]
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	f240 8097 	bls.w	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
 8009f30:	e093      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	78db      	ldrb	r3, [r3, #3]
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	889b      	ldrh	r3, [r3, #4]
 8009f42:	2b40      	cmp	r3, #64	@ 0x40
 8009f44:	f240 8089 	bls.w	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	75fb      	strb	r3, [r7, #23]
 8009f4c:	e085      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	78db      	ldrb	r3, [r3, #3]
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d005      	beq.n	8009f66 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	78db      	ldrb	r3, [r3, #3]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d10a      	bne.n	8009f7c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	799b      	ldrb	r3, [r3, #6]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <USBH_ParseEPDesc+0xde>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	799b      	ldrb	r3, [r3, #6]
 8009f72:	2b10      	cmp	r3, #16
 8009f74:	d970      	bls.n	800a058 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009f76:	2303      	movs	r3, #3
 8009f78:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f7a:	e06d      	b.n	800a058 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	75fb      	strb	r3, [r7, #23]
 8009f80:	e06b      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d13c      	bne.n	800a006 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	78db      	ldrb	r3, [r3, #3]
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d005      	beq.n	8009fa4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	78db      	ldrb	r3, [r3, #3]
 8009f9c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	889b      	ldrh	r3, [r3, #4]
 8009fa8:	2b40      	cmp	r3, #64	@ 0x40
 8009faa:	d956      	bls.n	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fac:	2303      	movs	r3, #3
 8009fae:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fb0:	e053      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	78db      	ldrb	r3, [r3, #3]
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d10e      	bne.n	8009fdc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	799b      	ldrb	r3, [r3, #6]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d007      	beq.n	8009fd6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d803      	bhi.n	8009fd6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009fd2:	2b40      	cmp	r3, #64	@ 0x40
 8009fd4:	d941      	bls.n	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	75fb      	strb	r3, [r7, #23]
 8009fda:	e03e      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	78db      	ldrb	r3, [r3, #3]
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d10b      	bne.n	800a000 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	799b      	ldrb	r3, [r3, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <USBH_ParseEPDesc+0x162>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	889b      	ldrh	r3, [r3, #4]
 8009ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ff8:	d32f      	bcc.n	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e02c      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a000:	2303      	movs	r3, #3
 800a002:	75fb      	strb	r3, [r7, #23]
 800a004:	e029      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d120      	bne.n	800a052 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	78db      	ldrb	r3, [r3, #3]
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	889b      	ldrh	r3, [r3, #4]
 800a020:	2b08      	cmp	r3, #8
 800a022:	d01a      	beq.n	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a024:	2303      	movs	r3, #3
 800a026:	75fb      	strb	r3, [r7, #23]
 800a028:	e017      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	78db      	ldrb	r3, [r3, #3]
 800a02e:	f003 0303 	and.w	r3, r3, #3
 800a032:	2b03      	cmp	r3, #3
 800a034:	d10a      	bne.n	800a04c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	799b      	ldrb	r3, [r3, #6]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <USBH_ParseEPDesc+0x1ae>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	2b08      	cmp	r3, #8
 800a044:	d909      	bls.n	800a05a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a046:	2303      	movs	r3, #3
 800a048:	75fb      	strb	r3, [r7, #23]
 800a04a:	e006      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a04c:	2303      	movs	r3, #3
 800a04e:	75fb      	strb	r3, [r7, #23]
 800a050:	e003      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a052:	2303      	movs	r3, #3
 800a054:	75fb      	strb	r3, [r7, #23]
 800a056:	e000      	b.n	800a05a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a058:	bf00      	nop
  }

  return status;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	371c      	adds	r7, #28
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d120      	bne.n	800a0c2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	1e9a      	subs	r2, r3, #2
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	4293      	cmp	r3, r2
 800a08a:	bf28      	it	cs
 800a08c:	4613      	movcs	r3, r2
 800a08e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3302      	adds	r3, #2
 800a094:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a096:	2300      	movs	r3, #0
 800a098:	82fb      	strh	r3, [r7, #22]
 800a09a:	e00b      	b.n	800a0b4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a09c:	8afb      	ldrh	r3, [r7, #22]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a0ae:	8afb      	ldrh	r3, [r7, #22]
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	82fb      	strh	r3, [r7, #22]
 800a0b4:	8afa      	ldrh	r2, [r7, #22]
 800a0b6:	8abb      	ldrh	r3, [r7, #20]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d3ef      	bcc.n	800a09c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	701a      	strb	r2, [r3, #0]
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	7812      	ldrb	r2, [r2, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b086      	sub	sp, #24
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	4613      	mov	r3, r2
 800a10e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a110:	2301      	movs	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	789b      	ldrb	r3, [r3, #2]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d002      	beq.n	800a122 <USBH_CtlReq+0x20>
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d00f      	beq.n	800a140 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a120:	e027      	b.n	800a172 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	88fa      	ldrh	r2, [r7, #6]
 800a12c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2202      	movs	r2, #2
 800a138:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
      break;
 800a13e:	e018      	b.n	800a172 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f81b 	bl	800a17c <USBH_HandleControl>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <USBH_CtlReq+0x54>
 800a150:	7dfb      	ldrb	r3, [r7, #23]
 800a152:	2b03      	cmp	r3, #3
 800a154:	d106      	bne.n	800a164 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	761a      	strb	r2, [r3, #24]
      break;
 800a162:	e005      	b.n	800a170 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b02      	cmp	r3, #2
 800a168:	d102      	bne.n	800a170 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2201      	movs	r2, #1
 800a16e:	709a      	strb	r2, [r3, #2]
      break;
 800a170:	bf00      	nop
  }
  return status;
 800a172:	7dfb      	ldrb	r3, [r7, #23]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af02      	add	r7, sp, #8
 800a182:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a188:	2300      	movs	r3, #0
 800a18a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7e1b      	ldrb	r3, [r3, #24]
 800a190:	3b01      	subs	r3, #1
 800a192:	2b0a      	cmp	r3, #10
 800a194:	f200 8156 	bhi.w	800a444 <USBH_HandleControl+0x2c8>
 800a198:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <USBH_HandleControl+0x24>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1cd 	.word	0x0800a1cd
 800a1a4:	0800a1e7 	.word	0x0800a1e7
 800a1a8:	0800a251 	.word	0x0800a251
 800a1ac:	0800a277 	.word	0x0800a277
 800a1b0:	0800a2af 	.word	0x0800a2af
 800a1b4:	0800a2d9 	.word	0x0800a2d9
 800a1b8:	0800a32b 	.word	0x0800a32b
 800a1bc:	0800a34d 	.word	0x0800a34d
 800a1c0:	0800a389 	.word	0x0800a389
 800a1c4:	0800a3af 	.word	0x0800a3af
 800a1c8:	0800a3ed 	.word	0x0800a3ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 0110 	add.w	r1, r3, #16
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	795b      	ldrb	r3, [r3, #5]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f943 	bl	800a464 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	761a      	strb	r2, [r3, #24]
      break;
 800a1e4:	e139      	b.n	800a45a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	795b      	ldrb	r3, [r3, #5]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fcc5 	bl	800ab7c <USBH_LL_GetURBState>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d11e      	bne.n	800a23a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7c1b      	ldrb	r3, [r3, #16]
 800a200:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a204:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8adb      	ldrh	r3, [r3, #22]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a20e:	7b7b      	ldrb	r3, [r7, #13]
 800a210:	2b80      	cmp	r3, #128	@ 0x80
 800a212:	d103      	bne.n	800a21c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2203      	movs	r2, #3
 800a218:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a21a:	e115      	b.n	800a448 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2205      	movs	r2, #5
 800a220:	761a      	strb	r2, [r3, #24]
      break;
 800a222:	e111      	b.n	800a448 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a224:	7b7b      	ldrb	r3, [r7, #13]
 800a226:	2b80      	cmp	r3, #128	@ 0x80
 800a228:	d103      	bne.n	800a232 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2209      	movs	r2, #9
 800a22e:	761a      	strb	r2, [r3, #24]
      break;
 800a230:	e10a      	b.n	800a448 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2207      	movs	r2, #7
 800a236:	761a      	strb	r2, [r3, #24]
      break;
 800a238:	e106      	b.n	800a448 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d003      	beq.n	800a248 <USBH_HandleControl+0xcc>
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b02      	cmp	r3, #2
 800a244:	f040 8100 	bne.w	800a448 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	220b      	movs	r2, #11
 800a24c:	761a      	strb	r2, [r3, #24]
      break;
 800a24e:	e0fb      	b.n	800a448 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a256:	b29a      	uxth	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6899      	ldr	r1, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	899a      	ldrh	r2, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	791b      	ldrb	r3, [r3, #4]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f93a 	bl	800a4e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2204      	movs	r2, #4
 800a272:	761a      	strb	r2, [r3, #24]
      break;
 800a274:	e0f1      	b.n	800a45a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	791b      	ldrb	r3, [r3, #4]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fc7d 	bl	800ab7c <USBH_LL_GetURBState>
 800a282:	4603      	mov	r3, r0
 800a284:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d102      	bne.n	800a292 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2209      	movs	r2, #9
 800a290:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	2b05      	cmp	r3, #5
 800a296:	d102      	bne.n	800a29e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a298:	2303      	movs	r3, #3
 800a29a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a29c:	e0d6      	b.n	800a44c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	f040 80d3 	bne.w	800a44c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	220b      	movs	r2, #11
 800a2aa:	761a      	strb	r2, [r3, #24]
      break;
 800a2ac:	e0ce      	b.n	800a44c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6899      	ldr	r1, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	899a      	ldrh	r2, [r3, #12]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	795b      	ldrb	r3, [r3, #5]
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	9000      	str	r0, [sp, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8ea 	bl	800a498 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	761a      	strb	r2, [r3, #24]
      break;
 800a2d6:	e0c0      	b.n	800a45a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	795b      	ldrb	r3, [r3, #5]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fc4c 	bl	800ab7c <USBH_LL_GetURBState>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d103      	bne.n	800a2f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2f4:	e0ac      	b.n	800a450 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b05      	cmp	r3, #5
 800a2fa:	d105      	bne.n	800a308 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	220c      	movs	r2, #12
 800a300:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a302:	2303      	movs	r3, #3
 800a304:	73fb      	strb	r3, [r7, #15]
      break;
 800a306:	e0a3      	b.n	800a450 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d103      	bne.n	800a316 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2205      	movs	r2, #5
 800a312:	761a      	strb	r2, [r3, #24]
      break;
 800a314:	e09c      	b.n	800a450 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b04      	cmp	r3, #4
 800a31a:	f040 8099 	bne.w	800a450 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	220b      	movs	r2, #11
 800a322:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a324:	2302      	movs	r3, #2
 800a326:	73fb      	strb	r3, [r7, #15]
      break;
 800a328:	e092      	b.n	800a450 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	791b      	ldrb	r3, [r3, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	2100      	movs	r1, #0
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f8d5 	bl	800a4e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2208      	movs	r2, #8
 800a348:	761a      	strb	r2, [r3, #24]

      break;
 800a34a:	e086      	b.n	800a45a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	791b      	ldrb	r3, [r3, #4]
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fc12 	bl	800ab7c <USBH_LL_GetURBState>
 800a358:	4603      	mov	r3, r0
 800a35a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d105      	bne.n	800a36e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	220d      	movs	r2, #13
 800a366:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a36c:	e072      	b.n	800a454 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	2b04      	cmp	r3, #4
 800a372:	d103      	bne.n	800a37c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	220b      	movs	r2, #11
 800a378:	761a      	strb	r2, [r3, #24]
      break;
 800a37a:	e06b      	b.n	800a454 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b05      	cmp	r3, #5
 800a380:	d168      	bne.n	800a454 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a382:	2303      	movs	r3, #3
 800a384:	73fb      	strb	r3, [r7, #15]
      break;
 800a386:	e065      	b.n	800a454 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	795b      	ldrb	r3, [r3, #5]
 800a38c:	2201      	movs	r2, #1
 800a38e:	9200      	str	r2, [sp, #0]
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f87f 	bl	800a498 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	761a      	strb	r2, [r3, #24]
      break;
 800a3ac:	e055      	b.n	800a45a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	795b      	ldrb	r3, [r3, #5]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fbe1 	bl	800ab7c <USBH_LL_GetURBState>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a3be:	7bbb      	ldrb	r3, [r7, #14]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d105      	bne.n	800a3d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	220d      	movs	r2, #13
 800a3cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3ce:	e043      	b.n	800a458 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d103      	bne.n	800a3de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2209      	movs	r2, #9
 800a3da:	761a      	strb	r2, [r3, #24]
      break;
 800a3dc:	e03c      	b.n	800a458 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d139      	bne.n	800a458 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	220b      	movs	r2, #11
 800a3e8:	761a      	strb	r2, [r3, #24]
      break;
 800a3ea:	e035      	b.n	800a458 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7e5b      	ldrb	r3, [r3, #25]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	765a      	strb	r2, [r3, #25]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7e5b      	ldrb	r3, [r3, #25]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d806      	bhi.n	800a40e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a40c:	e025      	b.n	800a45a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a414:	2106      	movs	r1, #6
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	795b      	ldrb	r3, [r3, #5]
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f90c 	bl	800a644 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	791b      	ldrb	r3, [r3, #4]
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f906 	bl	800a644 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a43e:	2302      	movs	r3, #2
 800a440:	73fb      	strb	r3, [r7, #15]
      break;
 800a442:	e00a      	b.n	800a45a <USBH_HandleControl+0x2de>

    default:
      break;
 800a444:	bf00      	nop
 800a446:	e008      	b.n	800a45a <USBH_HandleControl+0x2de>
      break;
 800a448:	bf00      	nop
 800a44a:	e006      	b.n	800a45a <USBH_HandleControl+0x2de>
      break;
 800a44c:	bf00      	nop
 800a44e:	e004      	b.n	800a45a <USBH_HandleControl+0x2de>
      break;
 800a450:	bf00      	nop
 800a452:	e002      	b.n	800a45a <USBH_HandleControl+0x2de>
      break;
 800a454:	bf00      	nop
 800a456:	e000      	b.n	800a45a <USBH_HandleControl+0x2de>
      break;
 800a458:	bf00      	nop
  }

  return status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af04      	add	r7, sp, #16
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a472:	79f9      	ldrb	r1, [r7, #7]
 800a474:	2300      	movs	r3, #0
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	2308      	movs	r3, #8
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	2300      	movs	r3, #0
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	2300      	movs	r3, #0
 800a486:	2200      	movs	r2, #0
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 fb46 	bl	800ab1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	80fb      	strh	r3, [r7, #6]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4bc:	7979      	ldrb	r1, [r7, #5]
 800a4be:	7e3b      	ldrb	r3, [r7, #24]
 800a4c0:	9303      	str	r3, [sp, #12]
 800a4c2:	88fb      	ldrh	r3, [r7, #6]
 800a4c4:	9302      	str	r3, [sp, #8]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fb21 	bl	800ab1a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b088      	sub	sp, #32
 800a4e6:	af04      	add	r7, sp, #16
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	80fb      	strh	r3, [r7, #6]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4f8:	7979      	ldrb	r1, [r7, #5]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9303      	str	r3, [sp, #12]
 800a4fe:	88fb      	ldrh	r3, [r7, #6]
 800a500:	9302      	str	r3, [sp, #8]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	2301      	movs	r3, #1
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	2300      	movs	r3, #0
 800a50c:	2201      	movs	r2, #1
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fb03 	bl	800ab1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a514:	2300      	movs	r3, #0

}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b088      	sub	sp, #32
 800a522:	af04      	add	r7, sp, #16
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	4611      	mov	r1, r2
 800a52a:	461a      	mov	r2, r3
 800a52c:	460b      	mov	r3, r1
 800a52e:	80fb      	strh	r3, [r7, #6]
 800a530:	4613      	mov	r3, r2
 800a532:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a542:	7979      	ldrb	r1, [r7, #5]
 800a544:	7e3b      	ldrb	r3, [r7, #24]
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	2301      	movs	r3, #1
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	2302      	movs	r3, #2
 800a556:	2200      	movs	r2, #0
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fade 	bl	800ab1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af04      	add	r7, sp, #16
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	4611      	mov	r1, r2
 800a574:	461a      	mov	r2, r3
 800a576:	460b      	mov	r3, r1
 800a578:	80fb      	strh	r3, [r7, #6]
 800a57a:	4613      	mov	r3, r2
 800a57c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a57e:	7979      	ldrb	r1, [r7, #5]
 800a580:	2300      	movs	r3, #0
 800a582:	9303      	str	r3, [sp, #12]
 800a584:	88fb      	ldrh	r3, [r7, #6]
 800a586:	9302      	str	r3, [sp, #8]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	9301      	str	r3, [sp, #4]
 800a58c:	2301      	movs	r3, #1
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	2302      	movs	r3, #2
 800a592:	2201      	movs	r2, #1
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 fac0 	bl	800ab1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af04      	add	r7, sp, #16
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	70fb      	strb	r3, [r7, #3]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70bb      	strb	r3, [r7, #2]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a5be:	7878      	ldrb	r0, [r7, #1]
 800a5c0:	78ba      	ldrb	r2, [r7, #2]
 800a5c2:	78f9      	ldrb	r1, [r7, #3]
 800a5c4:	8b3b      	ldrh	r3, [r7, #24]
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	7d3b      	ldrb	r3, [r7, #20]
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	7c3b      	ldrb	r3, [r7, #16]
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa53 	bl	800aa7e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fa72 	bl	800aadc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f836 	bl	800a680 <USBH_GetFreePipe>
 800a614:	4603      	mov	r3, r0
 800a616:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a61e:	4293      	cmp	r3, r2
 800a620:	d00a      	beq.n	800a638 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a622:	78fa      	ldrb	r2, [r7, #3]
 800a624:	89fb      	ldrh	r3, [r7, #14]
 800a626:	f003 030f 	and.w	r3, r3, #15
 800a62a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	33e0      	adds	r3, #224	@ 0xe0
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a638:	89fb      	ldrh	r3, [r7, #14]
 800a63a:	b2db      	uxtb	r3, r3
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d80d      	bhi.n	800a672 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	33e0      	adds	r3, #224	@ 0xe0
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	33e0      	adds	r3, #224	@ 0xe0
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	440b      	add	r3, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]
 800a690:	e00f      	b.n	800a6b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	33e0      	adds	r3, #224	@ 0xe0
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	e007      	b.n	800a6bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	73fb      	strb	r3, [r7, #15]
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
 800a6b4:	2b0f      	cmp	r3, #15
 800a6b6:	d9ec      	bls.n	800a692 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a6b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	490e      	ldr	r1, [pc, #56]	@ (800a708 <MX_USB_HOST_Init+0x40>)
 800a6d0:	480e      	ldr	r0, [pc, #56]	@ (800a70c <MX_USB_HOST_Init+0x44>)
 800a6d2:	f7fe fb15 	bl	8008d00 <USBH_Init>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a6dc:	f7f6 fb70 	bl	8000dc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a6e0:	490b      	ldr	r1, [pc, #44]	@ (800a710 <MX_USB_HOST_Init+0x48>)
 800a6e2:	480a      	ldr	r0, [pc, #40]	@ (800a70c <MX_USB_HOST_Init+0x44>)
 800a6e4:	f7fe fbb9 	bl	8008e5a <USBH_RegisterClass>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a6ee:	f7f6 fb67 	bl	8000dc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a6f2:	4806      	ldr	r0, [pc, #24]	@ (800a70c <MX_USB_HOST_Init+0x44>)
 800a6f4:	f7fe fc3d 	bl	8008f72 <USBH_Start>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a6fe:	f7f6 fb5f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	0800a729 	.word	0x0800a729
 800a70c:	200002a0 	.word	0x200002a0
 800a710:	2000000c 	.word	0x2000000c

0800a714 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a718:	4802      	ldr	r0, [pc, #8]	@ (800a724 <MX_USB_HOST_Process+0x10>)
 800a71a:	f7fe fc3b 	bl	8008f94 <USBH_Process>
}
 800a71e:	bf00      	nop
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	200002a0 	.word	0x200002a0

0800a728 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	3b01      	subs	r3, #1
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d819      	bhi.n	800a770 <USBH_UserProcess+0x48>
 800a73c:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <USBH_UserProcess+0x1c>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a771 	.word	0x0800a771
 800a748:	0800a761 	.word	0x0800a761
 800a74c:	0800a771 	.word	0x0800a771
 800a750:	0800a769 	.word	0x0800a769
 800a754:	0800a759 	.word	0x0800a759
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a758:	4b09      	ldr	r3, [pc, #36]	@ (800a780 <USBH_UserProcess+0x58>)
 800a75a:	2203      	movs	r2, #3
 800a75c:	701a      	strb	r2, [r3, #0]
  break;
 800a75e:	e008      	b.n	800a772 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a760:	4b07      	ldr	r3, [pc, #28]	@ (800a780 <USBH_UserProcess+0x58>)
 800a762:	2202      	movs	r2, #2
 800a764:	701a      	strb	r2, [r3, #0]
  break;
 800a766:	e004      	b.n	800a772 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a768:	4b05      	ldr	r3, [pc, #20]	@ (800a780 <USBH_UserProcess+0x58>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	701a      	strb	r2, [r3, #0]
  break;
 800a76e:	e000      	b.n	800a772 <USBH_UserProcess+0x4a>

  default:
  break;
 800a770:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20000678 	.word	0x20000678

0800a784 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	@ 0x28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	605a      	str	r2, [r3, #4]
 800a796:	609a      	str	r2, [r3, #8]
 800a798:	60da      	str	r2, [r3, #12]
 800a79a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7a4:	d147      	bne.n	800a836 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	4b25      	ldr	r3, [pc, #148]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ae:	4a24      	ldr	r2, [pc, #144]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a7b0:	f043 0301 	orr.w	r3, r3, #1
 800a7b4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7b6:	4b22      	ldr	r3, [pc, #136]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	613b      	str	r3, [r7, #16]
 800a7c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a7c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a7d0:	f107 0314 	add.w	r3, r7, #20
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	481b      	ldr	r0, [pc, #108]	@ (800a844 <HAL_HCD_MspInit+0xc0>)
 800a7d8:	f7f8 f908 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a7dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a7e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7f2:	f107 0314 	add.w	r3, r7, #20
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4812      	ldr	r0, [pc, #72]	@ (800a844 <HAL_HCD_MspInit+0xc0>)
 800a7fa:	f7f8 f8f7 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7fe:	4b10      	ldr	r3, [pc, #64]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a802:	4a0f      	ldr	r2, [pc, #60]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a808:	6353      	str	r3, [r2, #52]	@ 0x34
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	4b0c      	ldr	r3, [pc, #48]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a812:	4a0b      	ldr	r2, [pc, #44]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a818:	6453      	str	r3, [r2, #68]	@ 0x44
 800a81a:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <HAL_HCD_MspInit+0xbc>)
 800a81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	2043      	movs	r0, #67	@ 0x43
 800a82c:	f7f7 fba4 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a830:	2043      	movs	r0, #67	@ 0x43
 800a832:	f7f7 fbcd 	bl	8001fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a836:	bf00      	nop
 800a838:	3728      	adds	r7, #40	@ 0x28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40023800 	.word	0x40023800
 800a844:	40020000 	.word	0x40020000

0800a848 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe ff73 	bl	8009742 <USBH_LL_IncTimer>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe ffab 	bl	80097ce <USBH_LL_Connect>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe ffb4 	bl	80097fc <USBH_LL_Disconnect>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe ff65 	bl	8009796 <USBH_LL_PortEnabled>
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe ff65 	bl	80097b2 <USBH_LL_PortDisabled>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d12a      	bne.n	800a958 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a902:	4a18      	ldr	r2, [pc, #96]	@ (800a964 <USBH_LL_Init+0x74>)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a15      	ldr	r2, [pc, #84]	@ (800a964 <USBH_LL_Init+0x74>)
 800a90e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a912:	4b14      	ldr	r3, [pc, #80]	@ (800a964 <USBH_LL_Init+0x74>)
 800a914:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a918:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a91a:	4b12      	ldr	r3, [pc, #72]	@ (800a964 <USBH_LL_Init+0x74>)
 800a91c:	2208      	movs	r2, #8
 800a91e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a920:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <USBH_LL_Init+0x74>)
 800a922:	2201      	movs	r2, #1
 800a924:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a926:	4b0f      	ldr	r3, [pc, #60]	@ (800a964 <USBH_LL_Init+0x74>)
 800a928:	2200      	movs	r2, #0
 800a92a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <USBH_LL_Init+0x74>)
 800a92e:	2202      	movs	r2, #2
 800a930:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a932:	4b0c      	ldr	r3, [pc, #48]	@ (800a964 <USBH_LL_Init+0x74>)
 800a934:	2200      	movs	r2, #0
 800a936:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a938:	480a      	ldr	r0, [pc, #40]	@ (800a964 <USBH_LL_Init+0x74>)
 800a93a:	f7f8 fb1b 	bl	8002f74 <HAL_HCD_Init>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a944:	f7f6 fa3c 	bl	8000dc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a948:	4806      	ldr	r0, [pc, #24]	@ (800a964 <USBH_LL_Init+0x74>)
 800a94a:	f7f8 ff87 	bl	800385c <HAL_HCD_GetCurrentFrame>
 800a94e:	4603      	mov	r3, r0
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7fe fee6 	bl	8009724 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	2000067c 	.word	0x2000067c

0800a968 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a97e:	4618      	mov	r0, r3
 800a980:	f7f8 fef4 	bl	800376c <HAL_HCD_Start>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f95e 	bl	800ac4c <USBH_Get_USB_Status>
 800a990:	4603      	mov	r3, r0
 800a992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a994:	7bbb      	ldrb	r3, [r7, #14]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7f8 fefc 	bl	80037b2 <HAL_HCD_Stop>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 f943 	bl	800ac4c <USBH_Get_USB_Status>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f8 ff46 	bl	8003878 <HAL_HCD_GetCurrentSpeed>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d00c      	beq.n	800aa0c <USBH_LL_GetSpeed+0x38>
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d80d      	bhi.n	800aa12 <USBH_LL_GetSpeed+0x3e>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <USBH_LL_GetSpeed+0x2c>
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d003      	beq.n	800aa06 <USBH_LL_GetSpeed+0x32>
 800a9fe:	e008      	b.n	800aa12 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]
    break;
 800aa04:	e008      	b.n	800aa18 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0a:	e005      	b.n	800aa18 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa10:	e002      	b.n	800aa18 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aa12:	2301      	movs	r3, #1
 800aa14:	73fb      	strb	r3, [r7, #15]
    break;
 800aa16:	bf00      	nop
  }
  return  speed;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f8 fed7 	bl	80037ec <HAL_HCD_ResetPort>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f901 	bl	800ac4c <USBH_Get_USB_Status>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f8 fedf 	bl	8003832 <HAL_HCD_HC_GetXferCount>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa7e:	b590      	push	{r4, r7, lr}
 800aa80:	b089      	sub	sp, #36	@ 0x24
 800aa82:	af04      	add	r7, sp, #16
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	70fb      	strb	r3, [r7, #3]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70bb      	strb	r3, [r7, #2]
 800aa94:	4613      	mov	r3, r2
 800aa96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800aaa6:	787c      	ldrb	r4, [r7, #1]
 800aaa8:	78ba      	ldrb	r2, [r7, #2]
 800aaaa:	78f9      	ldrb	r1, [r7, #3]
 800aaac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aaae:	9302      	str	r3, [sp, #8]
 800aab0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	4623      	mov	r3, r4
 800aabe:	f7f8 facb 	bl	8003058 <HAL_HCD_HC_Init>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f8bf 	bl	800ac4c <USBH_Get_USB_Status>
 800aace:	4603      	mov	r3, r0
 800aad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd90      	pop	{r4, r7, pc}

0800aadc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aaf6:	78fa      	ldrb	r2, [r7, #3]
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f8 fb64 	bl	80031c8 <HAL_HCD_HC_Halt>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f8a0 	bl	800ac4c <USBH_Get_USB_Status>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ab1a:	b590      	push	{r4, r7, lr}
 800ab1c:	b089      	sub	sp, #36	@ 0x24
 800ab1e:	af04      	add	r7, sp, #16
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	461a      	mov	r2, r3
 800ab28:	4603      	mov	r3, r0
 800ab2a:	70fb      	strb	r3, [r7, #3]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70bb      	strb	r3, [r7, #2]
 800ab30:	4613      	mov	r3, r2
 800ab32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ab42:	787c      	ldrb	r4, [r7, #1]
 800ab44:	78ba      	ldrb	r2, [r7, #2]
 800ab46:	78f9      	ldrb	r1, [r7, #3]
 800ab48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ab4c:	9303      	str	r3, [sp, #12]
 800ab4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab50:	9302      	str	r3, [sp, #8]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4623      	mov	r3, r4
 800ab5e:	f7f8 fb57 	bl	8003210 <HAL_HCD_HC_SubmitRequest>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f86f 	bl	800ac4c <USBH_Get_USB_Status>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd90      	pop	{r4, r7, pc}

0800ab7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab8e:	78fa      	ldrb	r2, [r7, #3]
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f8 fe38 	bl	8003808 <HAL_HCD_HC_GetURBState>
 800ab98:	4603      	mov	r3, r0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d103      	bne.n	800abc0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f872 	bl	800aca4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800abc0:	20c8      	movs	r0, #200	@ 0xc8
 800abc2:	f7f6 fb2f 	bl	8001224 <HAL_Delay>
  return USBH_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
 800abdc:	4613      	mov	r3, r2
 800abde:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abe6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	4613      	mov	r3, r2
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	3317      	adds	r3, #23
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	68f9      	ldr	r1, [r7, #12]
 800ac02:	4613      	mov	r3, r2
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	333c      	adds	r3, #60	@ 0x3c
 800ac0e:	78ba      	ldrb	r2, [r7, #2]
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	e009      	b.n	800ac28 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	333d      	adds	r3, #61	@ 0x3d
 800ac24:	78ba      	ldrb	r2, [r7, #2]
 800ac26:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7f6 faf0 	bl	8001224 <HAL_Delay>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d817      	bhi.n	800ac90 <USBH_Get_USB_Status+0x44>
 800ac60:	a201      	add	r2, pc, #4	@ (adr r2, 800ac68 <USBH_Get_USB_Status+0x1c>)
 800ac62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac66:	bf00      	nop
 800ac68:	0800ac79 	.word	0x0800ac79
 800ac6c:	0800ac7f 	.word	0x0800ac7f
 800ac70:	0800ac85 	.word	0x0800ac85
 800ac74:	0800ac8b 	.word	0x0800ac8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac7c:	e00b      	b.n	800ac96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	73fb      	strb	r3, [r7, #15]
    break;
 800ac82:	e008      	b.n	800ac96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ac84:	2301      	movs	r3, #1
 800ac86:	73fb      	strb	r3, [r7, #15]
    break;
 800ac88:	e005      	b.n	800ac96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac8e:	e002      	b.n	800ac96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac90:	2302      	movs	r3, #2
 800ac92:	73fb      	strb	r3, [r7, #15]
    break;
 800ac94:	bf00      	nop
  }
  return usb_status;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
 800acbc:	e001      	b.n	800acc2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	461a      	mov	r2, r3
 800acc6:	2101      	movs	r1, #1
 800acc8:	4803      	ldr	r0, [pc, #12]	@ (800acd8 <MX_DriverVbusFS+0x34>)
 800acca:	f7f8 f927 	bl	8002f1c <HAL_GPIO_WritePin>
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	40020800 	.word	0x40020800

0800acdc <malloc>:
 800acdc:	4b02      	ldr	r3, [pc, #8]	@ (800ace8 <malloc+0xc>)
 800acde:	4601      	mov	r1, r0
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	f000 b82d 	b.w	800ad40 <_malloc_r>
 800ace6:	bf00      	nop
 800ace8:	20000038 	.word	0x20000038

0800acec <free>:
 800acec:	4b02      	ldr	r3, [pc, #8]	@ (800acf8 <free+0xc>)
 800acee:	4601      	mov	r1, r0
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f000 bb35 	b.w	800b360 <_free_r>
 800acf6:	bf00      	nop
 800acf8:	20000038 	.word	0x20000038

0800acfc <sbrk_aligned>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ad3c <sbrk_aligned+0x40>)
 800ad00:	460c      	mov	r4, r1
 800ad02:	6831      	ldr	r1, [r6, #0]
 800ad04:	4605      	mov	r5, r0
 800ad06:	b911      	cbnz	r1, 800ad0e <sbrk_aligned+0x12>
 800ad08:	f000 fada 	bl	800b2c0 <_sbrk_r>
 800ad0c:	6030      	str	r0, [r6, #0]
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	f000 fad5 	bl	800b2c0 <_sbrk_r>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	d103      	bne.n	800ad22 <sbrk_aligned+0x26>
 800ad1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad1e:	4620      	mov	r0, r4
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	1cc4      	adds	r4, r0, #3
 800ad24:	f024 0403 	bic.w	r4, r4, #3
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d0f8      	beq.n	800ad1e <sbrk_aligned+0x22>
 800ad2c:	1a21      	subs	r1, r4, r0
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f000 fac6 	bl	800b2c0 <_sbrk_r>
 800ad34:	3001      	adds	r0, #1
 800ad36:	d1f2      	bne.n	800ad1e <sbrk_aligned+0x22>
 800ad38:	e7ef      	b.n	800ad1a <sbrk_aligned+0x1e>
 800ad3a:	bf00      	nop
 800ad3c:	20000a5c 	.word	0x20000a5c

0800ad40 <_malloc_r>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	1ccd      	adds	r5, r1, #3
 800ad46:	f025 0503 	bic.w	r5, r5, #3
 800ad4a:	3508      	adds	r5, #8
 800ad4c:	2d0c      	cmp	r5, #12
 800ad4e:	bf38      	it	cc
 800ad50:	250c      	movcc	r5, #12
 800ad52:	2d00      	cmp	r5, #0
 800ad54:	4606      	mov	r6, r0
 800ad56:	db01      	blt.n	800ad5c <_malloc_r+0x1c>
 800ad58:	42a9      	cmp	r1, r5
 800ad5a:	d904      	bls.n	800ad66 <_malloc_r+0x26>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	6033      	str	r3, [r6, #0]
 800ad60:	2000      	movs	r0, #0
 800ad62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae3c <_malloc_r+0xfc>
 800ad6a:	f000 f869 	bl	800ae40 <__malloc_lock>
 800ad6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad72:	461c      	mov	r4, r3
 800ad74:	bb44      	cbnz	r4, 800adc8 <_malloc_r+0x88>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff ffbf 	bl	800acfc <sbrk_aligned>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	4604      	mov	r4, r0
 800ad82:	d158      	bne.n	800ae36 <_malloc_r+0xf6>
 800ad84:	f8d8 4000 	ldr.w	r4, [r8]
 800ad88:	4627      	mov	r7, r4
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	d143      	bne.n	800ae16 <_malloc_r+0xd6>
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	d04b      	beq.n	800ae2a <_malloc_r+0xea>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	4639      	mov	r1, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	eb04 0903 	add.w	r9, r4, r3
 800ad9c:	f000 fa90 	bl	800b2c0 <_sbrk_r>
 800ada0:	4581      	cmp	r9, r0
 800ada2:	d142      	bne.n	800ae2a <_malloc_r+0xea>
 800ada4:	6821      	ldr	r1, [r4, #0]
 800ada6:	1a6d      	subs	r5, r5, r1
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ffa6 	bl	800acfc <sbrk_aligned>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d03a      	beq.n	800ae2a <_malloc_r+0xea>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	442b      	add	r3, r5
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	f8d8 3000 	ldr.w	r3, [r8]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	bb62      	cbnz	r2, 800ae1c <_malloc_r+0xdc>
 800adc2:	f8c8 7000 	str.w	r7, [r8]
 800adc6:	e00f      	b.n	800ade8 <_malloc_r+0xa8>
 800adc8:	6822      	ldr	r2, [r4, #0]
 800adca:	1b52      	subs	r2, r2, r5
 800adcc:	d420      	bmi.n	800ae10 <_malloc_r+0xd0>
 800adce:	2a0b      	cmp	r2, #11
 800add0:	d917      	bls.n	800ae02 <_malloc_r+0xc2>
 800add2:	1961      	adds	r1, r4, r5
 800add4:	42a3      	cmp	r3, r4
 800add6:	6025      	str	r5, [r4, #0]
 800add8:	bf18      	it	ne
 800adda:	6059      	strne	r1, [r3, #4]
 800addc:	6863      	ldr	r3, [r4, #4]
 800adde:	bf08      	it	eq
 800ade0:	f8c8 1000 	streq.w	r1, [r8]
 800ade4:	5162      	str	r2, [r4, r5]
 800ade6:	604b      	str	r3, [r1, #4]
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 f82f 	bl	800ae4c <__malloc_unlock>
 800adee:	f104 000b 	add.w	r0, r4, #11
 800adf2:	1d23      	adds	r3, r4, #4
 800adf4:	f020 0007 	bic.w	r0, r0, #7
 800adf8:	1ac2      	subs	r2, r0, r3
 800adfa:	bf1c      	itt	ne
 800adfc:	1a1b      	subne	r3, r3, r0
 800adfe:	50a3      	strne	r3, [r4, r2]
 800ae00:	e7af      	b.n	800ad62 <_malloc_r+0x22>
 800ae02:	6862      	ldr	r2, [r4, #4]
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	bf0c      	ite	eq
 800ae08:	f8c8 2000 	streq.w	r2, [r8]
 800ae0c:	605a      	strne	r2, [r3, #4]
 800ae0e:	e7eb      	b.n	800ade8 <_malloc_r+0xa8>
 800ae10:	4623      	mov	r3, r4
 800ae12:	6864      	ldr	r4, [r4, #4]
 800ae14:	e7ae      	b.n	800ad74 <_malloc_r+0x34>
 800ae16:	463c      	mov	r4, r7
 800ae18:	687f      	ldr	r7, [r7, #4]
 800ae1a:	e7b6      	b.n	800ad8a <_malloc_r+0x4a>
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d1fb      	bne.n	800ae1c <_malloc_r+0xdc>
 800ae24:	2300      	movs	r3, #0
 800ae26:	6053      	str	r3, [r2, #4]
 800ae28:	e7de      	b.n	800ade8 <_malloc_r+0xa8>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	6033      	str	r3, [r6, #0]
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 f80c 	bl	800ae4c <__malloc_unlock>
 800ae34:	e794      	b.n	800ad60 <_malloc_r+0x20>
 800ae36:	6005      	str	r5, [r0, #0]
 800ae38:	e7d6      	b.n	800ade8 <_malloc_r+0xa8>
 800ae3a:	bf00      	nop
 800ae3c:	20000a60 	.word	0x20000a60

0800ae40 <__malloc_lock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	@ (800ae48 <__malloc_lock+0x8>)
 800ae42:	f000 ba8a 	b.w	800b35a <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000ba4 	.word	0x20000ba4

0800ae4c <__malloc_unlock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	@ (800ae54 <__malloc_unlock+0x8>)
 800ae4e:	f000 ba85 	b.w	800b35c <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000ba4 	.word	0x20000ba4

0800ae58 <std>:
 800ae58:	2300      	movs	r3, #0
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae66:	6083      	str	r3, [r0, #8]
 800ae68:	8181      	strh	r1, [r0, #12]
 800ae6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae6c:	81c2      	strh	r2, [r0, #14]
 800ae6e:	6183      	str	r3, [r0, #24]
 800ae70:	4619      	mov	r1, r3
 800ae72:	2208      	movs	r2, #8
 800ae74:	305c      	adds	r0, #92	@ 0x5c
 800ae76:	f000 f9e7 	bl	800b248 <memset>
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb0 <std+0x58>)
 800ae7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb4 <std+0x5c>)
 800ae80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae82:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb8 <std+0x60>)
 800ae84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae86:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <std+0x64>)
 800ae88:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <std+0x68>)
 800ae8c:	6224      	str	r4, [r4, #32]
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d006      	beq.n	800aea0 <std+0x48>
 800ae92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae96:	4294      	cmp	r4, r2
 800ae98:	d002      	beq.n	800aea0 <std+0x48>
 800ae9a:	33d0      	adds	r3, #208	@ 0xd0
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d105      	bne.n	800aeac <std+0x54>
 800aea0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f000 ba56 	b.w	800b358 <__retarget_lock_init_recursive>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	0800b099 	.word	0x0800b099
 800aeb4:	0800b0bb 	.word	0x0800b0bb
 800aeb8:	0800b0f3 	.word	0x0800b0f3
 800aebc:	0800b117 	.word	0x0800b117
 800aec0:	20000a64 	.word	0x20000a64

0800aec4 <stdio_exit_handler>:
 800aec4:	4a02      	ldr	r2, [pc, #8]	@ (800aed0 <stdio_exit_handler+0xc>)
 800aec6:	4903      	ldr	r1, [pc, #12]	@ (800aed4 <stdio_exit_handler+0x10>)
 800aec8:	4803      	ldr	r0, [pc, #12]	@ (800aed8 <stdio_exit_handler+0x14>)
 800aeca:	f000 b869 	b.w	800afa0 <_fwalk_sglue>
 800aece:	bf00      	nop
 800aed0:	2000002c 	.word	0x2000002c
 800aed4:	0800b4fd 	.word	0x0800b4fd
 800aed8:	2000003c 	.word	0x2000003c

0800aedc <cleanup_stdio>:
 800aedc:	6841      	ldr	r1, [r0, #4]
 800aede:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <cleanup_stdio+0x34>)
 800aee0:	4299      	cmp	r1, r3
 800aee2:	b510      	push	{r4, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	d001      	beq.n	800aeec <cleanup_stdio+0x10>
 800aee8:	f000 fb08 	bl	800b4fc <_fflush_r>
 800aeec:	68a1      	ldr	r1, [r4, #8]
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <cleanup_stdio+0x38>)
 800aef0:	4299      	cmp	r1, r3
 800aef2:	d002      	beq.n	800aefa <cleanup_stdio+0x1e>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fb01 	bl	800b4fc <_fflush_r>
 800aefa:	68e1      	ldr	r1, [r4, #12]
 800aefc:	4b06      	ldr	r3, [pc, #24]	@ (800af18 <cleanup_stdio+0x3c>)
 800aefe:	4299      	cmp	r1, r3
 800af00:	d004      	beq.n	800af0c <cleanup_stdio+0x30>
 800af02:	4620      	mov	r0, r4
 800af04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af08:	f000 baf8 	b.w	800b4fc <_fflush_r>
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	20000a64 	.word	0x20000a64
 800af14:	20000acc 	.word	0x20000acc
 800af18:	20000b34 	.word	0x20000b34

0800af1c <global_stdio_init.part.0>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	4b0b      	ldr	r3, [pc, #44]	@ (800af4c <global_stdio_init.part.0+0x30>)
 800af20:	4c0b      	ldr	r4, [pc, #44]	@ (800af50 <global_stdio_init.part.0+0x34>)
 800af22:	4a0c      	ldr	r2, [pc, #48]	@ (800af54 <global_stdio_init.part.0+0x38>)
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	4620      	mov	r0, r4
 800af28:	2200      	movs	r2, #0
 800af2a:	2104      	movs	r1, #4
 800af2c:	f7ff ff94 	bl	800ae58 <std>
 800af30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af34:	2201      	movs	r2, #1
 800af36:	2109      	movs	r1, #9
 800af38:	f7ff ff8e 	bl	800ae58 <std>
 800af3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af40:	2202      	movs	r2, #2
 800af42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af46:	2112      	movs	r1, #18
 800af48:	f7ff bf86 	b.w	800ae58 <std>
 800af4c:	20000b9c 	.word	0x20000b9c
 800af50:	20000a64 	.word	0x20000a64
 800af54:	0800aec5 	.word	0x0800aec5

0800af58 <__sfp_lock_acquire>:
 800af58:	4801      	ldr	r0, [pc, #4]	@ (800af60 <__sfp_lock_acquire+0x8>)
 800af5a:	f000 b9fe 	b.w	800b35a <__retarget_lock_acquire_recursive>
 800af5e:	bf00      	nop
 800af60:	20000ba5 	.word	0x20000ba5

0800af64 <__sfp_lock_release>:
 800af64:	4801      	ldr	r0, [pc, #4]	@ (800af6c <__sfp_lock_release+0x8>)
 800af66:	f000 b9f9 	b.w	800b35c <__retarget_lock_release_recursive>
 800af6a:	bf00      	nop
 800af6c:	20000ba5 	.word	0x20000ba5

0800af70 <__sinit>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	f7ff fff0 	bl	800af58 <__sfp_lock_acquire>
 800af78:	6a23      	ldr	r3, [r4, #32]
 800af7a:	b11b      	cbz	r3, 800af84 <__sinit+0x14>
 800af7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af80:	f7ff bff0 	b.w	800af64 <__sfp_lock_release>
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <__sinit+0x28>)
 800af86:	6223      	str	r3, [r4, #32]
 800af88:	4b04      	ldr	r3, [pc, #16]	@ (800af9c <__sinit+0x2c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f5      	bne.n	800af7c <__sinit+0xc>
 800af90:	f7ff ffc4 	bl	800af1c <global_stdio_init.part.0>
 800af94:	e7f2      	b.n	800af7c <__sinit+0xc>
 800af96:	bf00      	nop
 800af98:	0800aedd 	.word	0x0800aedd
 800af9c:	20000b9c 	.word	0x20000b9c

0800afa0 <_fwalk_sglue>:
 800afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	4607      	mov	r7, r0
 800afa6:	4688      	mov	r8, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	2600      	movs	r6, #0
 800afac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afb0:	f1b9 0901 	subs.w	r9, r9, #1
 800afb4:	d505      	bpl.n	800afc2 <_fwalk_sglue+0x22>
 800afb6:	6824      	ldr	r4, [r4, #0]
 800afb8:	2c00      	cmp	r4, #0
 800afba:	d1f7      	bne.n	800afac <_fwalk_sglue+0xc>
 800afbc:	4630      	mov	r0, r6
 800afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d907      	bls.n	800afd8 <_fwalk_sglue+0x38>
 800afc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afcc:	3301      	adds	r3, #1
 800afce:	d003      	beq.n	800afd8 <_fwalk_sglue+0x38>
 800afd0:	4629      	mov	r1, r5
 800afd2:	4638      	mov	r0, r7
 800afd4:	47c0      	blx	r8
 800afd6:	4306      	orrs	r6, r0
 800afd8:	3568      	adds	r5, #104	@ 0x68
 800afda:	e7e9      	b.n	800afb0 <_fwalk_sglue+0x10>

0800afdc <_puts_r>:
 800afdc:	6a03      	ldr	r3, [r0, #32]
 800afde:	b570      	push	{r4, r5, r6, lr}
 800afe0:	6884      	ldr	r4, [r0, #8]
 800afe2:	4605      	mov	r5, r0
 800afe4:	460e      	mov	r6, r1
 800afe6:	b90b      	cbnz	r3, 800afec <_puts_r+0x10>
 800afe8:	f7ff ffc2 	bl	800af70 <__sinit>
 800afec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afee:	07db      	lsls	r3, r3, #31
 800aff0:	d405      	bmi.n	800affe <_puts_r+0x22>
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	0598      	lsls	r0, r3, #22
 800aff6:	d402      	bmi.n	800affe <_puts_r+0x22>
 800aff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800affa:	f000 f9ae 	bl	800b35a <__retarget_lock_acquire_recursive>
 800affe:	89a3      	ldrh	r3, [r4, #12]
 800b000:	0719      	lsls	r1, r3, #28
 800b002:	d502      	bpl.n	800b00a <_puts_r+0x2e>
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d135      	bne.n	800b076 <_puts_r+0x9a>
 800b00a:	4621      	mov	r1, r4
 800b00c:	4628      	mov	r0, r5
 800b00e:	f000 f8c5 	bl	800b19c <__swsetup_r>
 800b012:	b380      	cbz	r0, 800b076 <_puts_r+0x9a>
 800b014:	f04f 35ff 	mov.w	r5, #4294967295
 800b018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b01a:	07da      	lsls	r2, r3, #31
 800b01c:	d405      	bmi.n	800b02a <_puts_r+0x4e>
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	059b      	lsls	r3, r3, #22
 800b022:	d402      	bmi.n	800b02a <_puts_r+0x4e>
 800b024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b026:	f000 f999 	bl	800b35c <__retarget_lock_release_recursive>
 800b02a:	4628      	mov	r0, r5
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da04      	bge.n	800b03c <_puts_r+0x60>
 800b032:	69a2      	ldr	r2, [r4, #24]
 800b034:	429a      	cmp	r2, r3
 800b036:	dc17      	bgt.n	800b068 <_puts_r+0x8c>
 800b038:	290a      	cmp	r1, #10
 800b03a:	d015      	beq.n	800b068 <_puts_r+0x8c>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	6022      	str	r2, [r4, #0]
 800b042:	7019      	strb	r1, [r3, #0]
 800b044:	68a3      	ldr	r3, [r4, #8]
 800b046:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b04a:	3b01      	subs	r3, #1
 800b04c:	60a3      	str	r3, [r4, #8]
 800b04e:	2900      	cmp	r1, #0
 800b050:	d1ed      	bne.n	800b02e <_puts_r+0x52>
 800b052:	2b00      	cmp	r3, #0
 800b054:	da11      	bge.n	800b07a <_puts_r+0x9e>
 800b056:	4622      	mov	r2, r4
 800b058:	210a      	movs	r1, #10
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 f85f 	bl	800b11e <__swbuf_r>
 800b060:	3001      	adds	r0, #1
 800b062:	d0d7      	beq.n	800b014 <_puts_r+0x38>
 800b064:	250a      	movs	r5, #10
 800b066:	e7d7      	b.n	800b018 <_puts_r+0x3c>
 800b068:	4622      	mov	r2, r4
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 f857 	bl	800b11e <__swbuf_r>
 800b070:	3001      	adds	r0, #1
 800b072:	d1e7      	bne.n	800b044 <_puts_r+0x68>
 800b074:	e7ce      	b.n	800b014 <_puts_r+0x38>
 800b076:	3e01      	subs	r6, #1
 800b078:	e7e4      	b.n	800b044 <_puts_r+0x68>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	220a      	movs	r2, #10
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	e7ee      	b.n	800b064 <_puts_r+0x88>
	...

0800b088 <puts>:
 800b088:	4b02      	ldr	r3, [pc, #8]	@ (800b094 <puts+0xc>)
 800b08a:	4601      	mov	r1, r0
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	f7ff bfa5 	b.w	800afdc <_puts_r>
 800b092:	bf00      	nop
 800b094:	20000038 	.word	0x20000038

0800b098 <__sread>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	460c      	mov	r4, r1
 800b09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a0:	f000 f8fc 	bl	800b29c <_read_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	bfab      	itete	ge
 800b0a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b0ac:	181b      	addge	r3, r3, r0
 800b0ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0b2:	bfac      	ite	ge
 800b0b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0b6:	81a3      	strhlt	r3, [r4, #12]
 800b0b8:	bd10      	pop	{r4, pc}

0800b0ba <__swrite>:
 800b0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0be:	461f      	mov	r7, r3
 800b0c0:	898b      	ldrh	r3, [r1, #12]
 800b0c2:	05db      	lsls	r3, r3, #23
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	4616      	mov	r6, r2
 800b0ca:	d505      	bpl.n	800b0d8 <__swrite+0x1e>
 800b0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f000 f8d0 	bl	800b278 <_lseek_r>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0e2:	81a3      	strh	r3, [r4, #12]
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	f000 b8f7 	b.w	800b2e0 <_write_r>

0800b0f2 <__sseek>:
 800b0f2:	b510      	push	{r4, lr}
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fa:	f000 f8bd 	bl	800b278 <_lseek_r>
 800b0fe:	1c43      	adds	r3, r0, #1
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	bf15      	itete	ne
 800b104:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b10a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b10e:	81a3      	strheq	r3, [r4, #12]
 800b110:	bf18      	it	ne
 800b112:	81a3      	strhne	r3, [r4, #12]
 800b114:	bd10      	pop	{r4, pc}

0800b116 <__sclose>:
 800b116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11a:	f000 b89d 	b.w	800b258 <_close_r>

0800b11e <__swbuf_r>:
 800b11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b120:	460e      	mov	r6, r1
 800b122:	4614      	mov	r4, r2
 800b124:	4605      	mov	r5, r0
 800b126:	b118      	cbz	r0, 800b130 <__swbuf_r+0x12>
 800b128:	6a03      	ldr	r3, [r0, #32]
 800b12a:	b90b      	cbnz	r3, 800b130 <__swbuf_r+0x12>
 800b12c:	f7ff ff20 	bl	800af70 <__sinit>
 800b130:	69a3      	ldr	r3, [r4, #24]
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	071a      	lsls	r2, r3, #28
 800b138:	d501      	bpl.n	800b13e <__swbuf_r+0x20>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	b943      	cbnz	r3, 800b150 <__swbuf_r+0x32>
 800b13e:	4621      	mov	r1, r4
 800b140:	4628      	mov	r0, r5
 800b142:	f000 f82b 	bl	800b19c <__swsetup_r>
 800b146:	b118      	cbz	r0, 800b150 <__swbuf_r+0x32>
 800b148:	f04f 37ff 	mov.w	r7, #4294967295
 800b14c:	4638      	mov	r0, r7
 800b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	6922      	ldr	r2, [r4, #16]
 800b154:	1a98      	subs	r0, r3, r2
 800b156:	6963      	ldr	r3, [r4, #20]
 800b158:	b2f6      	uxtb	r6, r6
 800b15a:	4283      	cmp	r3, r0
 800b15c:	4637      	mov	r7, r6
 800b15e:	dc05      	bgt.n	800b16c <__swbuf_r+0x4e>
 800b160:	4621      	mov	r1, r4
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f9ca 	bl	800b4fc <_fflush_r>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1ed      	bne.n	800b148 <__swbuf_r+0x2a>
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	3b01      	subs	r3, #1
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	701e      	strb	r6, [r3, #0]
 800b17a:	6962      	ldr	r2, [r4, #20]
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	429a      	cmp	r2, r3
 800b180:	d004      	beq.n	800b18c <__swbuf_r+0x6e>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	07db      	lsls	r3, r3, #31
 800b186:	d5e1      	bpl.n	800b14c <__swbuf_r+0x2e>
 800b188:	2e0a      	cmp	r6, #10
 800b18a:	d1df      	bne.n	800b14c <__swbuf_r+0x2e>
 800b18c:	4621      	mov	r1, r4
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 f9b4 	bl	800b4fc <_fflush_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	d0d9      	beq.n	800b14c <__swbuf_r+0x2e>
 800b198:	e7d6      	b.n	800b148 <__swbuf_r+0x2a>
	...

0800b19c <__swsetup_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4b29      	ldr	r3, [pc, #164]	@ (800b244 <__swsetup_r+0xa8>)
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	6818      	ldr	r0, [r3, #0]
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	b118      	cbz	r0, 800b1b0 <__swsetup_r+0x14>
 800b1a8:	6a03      	ldr	r3, [r0, #32]
 800b1aa:	b90b      	cbnz	r3, 800b1b0 <__swsetup_r+0x14>
 800b1ac:	f7ff fee0 	bl	800af70 <__sinit>
 800b1b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b4:	0719      	lsls	r1, r3, #28
 800b1b6:	d422      	bmi.n	800b1fe <__swsetup_r+0x62>
 800b1b8:	06da      	lsls	r2, r3, #27
 800b1ba:	d407      	bmi.n	800b1cc <__swsetup_r+0x30>
 800b1bc:	2209      	movs	r2, #9
 800b1be:	602a      	str	r2, [r5, #0]
 800b1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ca:	e033      	b.n	800b234 <__swsetup_r+0x98>
 800b1cc:	0758      	lsls	r0, r3, #29
 800b1ce:	d512      	bpl.n	800b1f6 <__swsetup_r+0x5a>
 800b1d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1d2:	b141      	cbz	r1, 800b1e6 <__swsetup_r+0x4a>
 800b1d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d002      	beq.n	800b1e2 <__swsetup_r+0x46>
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 f8bf 	bl	800b360 <_free_r>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	6063      	str	r3, [r4, #4]
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	f043 0308 	orr.w	r3, r3, #8
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	b94b      	cbnz	r3, 800b216 <__swsetup_r+0x7a>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b20c:	d003      	beq.n	800b216 <__swsetup_r+0x7a>
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f000 f9c1 	bl	800b598 <__smakebuf_r>
 800b216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b21a:	f013 0201 	ands.w	r2, r3, #1
 800b21e:	d00a      	beq.n	800b236 <__swsetup_r+0x9a>
 800b220:	2200      	movs	r2, #0
 800b222:	60a2      	str	r2, [r4, #8]
 800b224:	6962      	ldr	r2, [r4, #20]
 800b226:	4252      	negs	r2, r2
 800b228:	61a2      	str	r2, [r4, #24]
 800b22a:	6922      	ldr	r2, [r4, #16]
 800b22c:	b942      	cbnz	r2, 800b240 <__swsetup_r+0xa4>
 800b22e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b232:	d1c5      	bne.n	800b1c0 <__swsetup_r+0x24>
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	0799      	lsls	r1, r3, #30
 800b238:	bf58      	it	pl
 800b23a:	6962      	ldrpl	r2, [r4, #20]
 800b23c:	60a2      	str	r2, [r4, #8]
 800b23e:	e7f4      	b.n	800b22a <__swsetup_r+0x8e>
 800b240:	2000      	movs	r0, #0
 800b242:	e7f7      	b.n	800b234 <__swsetup_r+0x98>
 800b244:	20000038 	.word	0x20000038

0800b248 <memset>:
 800b248:	4402      	add	r2, r0
 800b24a:	4603      	mov	r3, r0
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d100      	bne.n	800b252 <memset+0xa>
 800b250:	4770      	bx	lr
 800b252:	f803 1b01 	strb.w	r1, [r3], #1
 800b256:	e7f9      	b.n	800b24c <memset+0x4>

0800b258 <_close_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d06      	ldr	r5, [pc, #24]	@ (800b274 <_close_r+0x1c>)
 800b25c:	2300      	movs	r3, #0
 800b25e:	4604      	mov	r4, r0
 800b260:	4608      	mov	r0, r1
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	f7f5 fec5 	bl	8000ff2 <_close>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_close_r+0x1a>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_close_r+0x1a>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20000ba0 	.word	0x20000ba0

0800b278 <_lseek_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	@ (800b298 <_lseek_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f5 feda 	bl	8001040 <_lseek>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_lseek_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_lseek_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20000ba0 	.word	0x20000ba0

0800b29c <_read_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d07      	ldr	r5, [pc, #28]	@ (800b2bc <_read_r+0x20>)
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	602a      	str	r2, [r5, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f7f5 fe84 	bl	8000fb8 <_read>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_read_r+0x1e>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_read_r+0x1e>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20000ba0 	.word	0x20000ba0

0800b2c0 <_sbrk_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d06      	ldr	r5, [pc, #24]	@ (800b2dc <_sbrk_r+0x1c>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f5 fec6 	bl	800105c <_sbrk>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_sbrk_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_sbrk_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	20000ba0 	.word	0x20000ba0

0800b2e0 <_write_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d07      	ldr	r5, [pc, #28]	@ (800b300 <_write_r+0x20>)
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f7f5 fc93 	bl	8000c1a <_write>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_write_r+0x1e>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_write_r+0x1e>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	20000ba0 	.word	0x20000ba0

0800b304 <__errno>:
 800b304:	4b01      	ldr	r3, [pc, #4]	@ (800b30c <__errno+0x8>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000038 	.word	0x20000038

0800b310 <__libc_init_array>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	4d0d      	ldr	r5, [pc, #52]	@ (800b348 <__libc_init_array+0x38>)
 800b314:	4c0d      	ldr	r4, [pc, #52]	@ (800b34c <__libc_init_array+0x3c>)
 800b316:	1b64      	subs	r4, r4, r5
 800b318:	10a4      	asrs	r4, r4, #2
 800b31a:	2600      	movs	r6, #0
 800b31c:	42a6      	cmp	r6, r4
 800b31e:	d109      	bne.n	800b334 <__libc_init_array+0x24>
 800b320:	4d0b      	ldr	r5, [pc, #44]	@ (800b350 <__libc_init_array+0x40>)
 800b322:	4c0c      	ldr	r4, [pc, #48]	@ (800b354 <__libc_init_array+0x44>)
 800b324:	f000 f996 	bl	800b654 <_init>
 800b328:	1b64      	subs	r4, r4, r5
 800b32a:	10a4      	asrs	r4, r4, #2
 800b32c:	2600      	movs	r6, #0
 800b32e:	42a6      	cmp	r6, r4
 800b330:	d105      	bne.n	800b33e <__libc_init_array+0x2e>
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	f855 3b04 	ldr.w	r3, [r5], #4
 800b338:	4798      	blx	r3
 800b33a:	3601      	adds	r6, #1
 800b33c:	e7ee      	b.n	800b31c <__libc_init_array+0xc>
 800b33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b342:	4798      	blx	r3
 800b344:	3601      	adds	r6, #1
 800b346:	e7f2      	b.n	800b32e <__libc_init_array+0x1e>
 800b348:	0800b8e4 	.word	0x0800b8e4
 800b34c:	0800b8e4 	.word	0x0800b8e4
 800b350:	0800b8e4 	.word	0x0800b8e4
 800b354:	0800b8e8 	.word	0x0800b8e8

0800b358 <__retarget_lock_init_recursive>:
 800b358:	4770      	bx	lr

0800b35a <__retarget_lock_acquire_recursive>:
 800b35a:	4770      	bx	lr

0800b35c <__retarget_lock_release_recursive>:
 800b35c:	4770      	bx	lr
	...

0800b360 <_free_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4605      	mov	r5, r0
 800b364:	2900      	cmp	r1, #0
 800b366:	d041      	beq.n	800b3ec <_free_r+0x8c>
 800b368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36c:	1f0c      	subs	r4, r1, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfb8      	it	lt
 800b372:	18e4      	addlt	r4, r4, r3
 800b374:	f7ff fd64 	bl	800ae40 <__malloc_lock>
 800b378:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f0 <_free_r+0x90>)
 800b37a:	6813      	ldr	r3, [r2, #0]
 800b37c:	b933      	cbnz	r3, 800b38c <_free_r+0x2c>
 800b37e:	6063      	str	r3, [r4, #4]
 800b380:	6014      	str	r4, [r2, #0]
 800b382:	4628      	mov	r0, r5
 800b384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b388:	f7ff bd60 	b.w	800ae4c <__malloc_unlock>
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d908      	bls.n	800b3a2 <_free_r+0x42>
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	1821      	adds	r1, r4, r0
 800b394:	428b      	cmp	r3, r1
 800b396:	bf01      	itttt	eq
 800b398:	6819      	ldreq	r1, [r3, #0]
 800b39a:	685b      	ldreq	r3, [r3, #4]
 800b39c:	1809      	addeq	r1, r1, r0
 800b39e:	6021      	streq	r1, [r4, #0]
 800b3a0:	e7ed      	b.n	800b37e <_free_r+0x1e>
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	b10b      	cbz	r3, 800b3ac <_free_r+0x4c>
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	d9fa      	bls.n	800b3a2 <_free_r+0x42>
 800b3ac:	6811      	ldr	r1, [r2, #0]
 800b3ae:	1850      	adds	r0, r2, r1
 800b3b0:	42a0      	cmp	r0, r4
 800b3b2:	d10b      	bne.n	800b3cc <_free_r+0x6c>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	4401      	add	r1, r0
 800b3b8:	1850      	adds	r0, r2, r1
 800b3ba:	4283      	cmp	r3, r0
 800b3bc:	6011      	str	r1, [r2, #0]
 800b3be:	d1e0      	bne.n	800b382 <_free_r+0x22>
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	6053      	str	r3, [r2, #4]
 800b3c6:	4408      	add	r0, r1
 800b3c8:	6010      	str	r0, [r2, #0]
 800b3ca:	e7da      	b.n	800b382 <_free_r+0x22>
 800b3cc:	d902      	bls.n	800b3d4 <_free_r+0x74>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	602b      	str	r3, [r5, #0]
 800b3d2:	e7d6      	b.n	800b382 <_free_r+0x22>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	1821      	adds	r1, r4, r0
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	bf04      	itt	eq
 800b3dc:	6819      	ldreq	r1, [r3, #0]
 800b3de:	685b      	ldreq	r3, [r3, #4]
 800b3e0:	6063      	str	r3, [r4, #4]
 800b3e2:	bf04      	itt	eq
 800b3e4:	1809      	addeq	r1, r1, r0
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	6054      	str	r4, [r2, #4]
 800b3ea:	e7ca      	b.n	800b382 <_free_r+0x22>
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000a60 	.word	0x20000a60

0800b3f4 <__sflush_r>:
 800b3f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	0716      	lsls	r6, r2, #28
 800b3fe:	4605      	mov	r5, r0
 800b400:	460c      	mov	r4, r1
 800b402:	d454      	bmi.n	800b4ae <__sflush_r+0xba>
 800b404:	684b      	ldr	r3, [r1, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc02      	bgt.n	800b410 <__sflush_r+0x1c>
 800b40a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd48      	ble.n	800b4a2 <__sflush_r+0xae>
 800b410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b412:	2e00      	cmp	r6, #0
 800b414:	d045      	beq.n	800b4a2 <__sflush_r+0xae>
 800b416:	2300      	movs	r3, #0
 800b418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b41c:	682f      	ldr	r7, [r5, #0]
 800b41e:	6a21      	ldr	r1, [r4, #32]
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	d030      	beq.n	800b486 <__sflush_r+0x92>
 800b424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	0759      	lsls	r1, r3, #29
 800b42a:	d505      	bpl.n	800b438 <__sflush_r+0x44>
 800b42c:	6863      	ldr	r3, [r4, #4]
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b432:	b10b      	cbz	r3, 800b438 <__sflush_r+0x44>
 800b434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b43c:	6a21      	ldr	r1, [r4, #32]
 800b43e:	4628      	mov	r0, r5
 800b440:	47b0      	blx	r6
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	d106      	bne.n	800b456 <__sflush_r+0x62>
 800b448:	6829      	ldr	r1, [r5, #0]
 800b44a:	291d      	cmp	r1, #29
 800b44c:	d82b      	bhi.n	800b4a6 <__sflush_r+0xb2>
 800b44e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f8 <__sflush_r+0x104>)
 800b450:	410a      	asrs	r2, r1
 800b452:	07d6      	lsls	r6, r2, #31
 800b454:	d427      	bmi.n	800b4a6 <__sflush_r+0xb2>
 800b456:	2200      	movs	r2, #0
 800b458:	6062      	str	r2, [r4, #4]
 800b45a:	04d9      	lsls	r1, r3, #19
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	6022      	str	r2, [r4, #0]
 800b460:	d504      	bpl.n	800b46c <__sflush_r+0x78>
 800b462:	1c42      	adds	r2, r0, #1
 800b464:	d101      	bne.n	800b46a <__sflush_r+0x76>
 800b466:	682b      	ldr	r3, [r5, #0]
 800b468:	b903      	cbnz	r3, 800b46c <__sflush_r+0x78>
 800b46a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b46e:	602f      	str	r7, [r5, #0]
 800b470:	b1b9      	cbz	r1, 800b4a2 <__sflush_r+0xae>
 800b472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b476:	4299      	cmp	r1, r3
 800b478:	d002      	beq.n	800b480 <__sflush_r+0x8c>
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff ff70 	bl	800b360 <_free_r>
 800b480:	2300      	movs	r3, #0
 800b482:	6363      	str	r3, [r4, #52]	@ 0x34
 800b484:	e00d      	b.n	800b4a2 <__sflush_r+0xae>
 800b486:	2301      	movs	r3, #1
 800b488:	4628      	mov	r0, r5
 800b48a:	47b0      	blx	r6
 800b48c:	4602      	mov	r2, r0
 800b48e:	1c50      	adds	r0, r2, #1
 800b490:	d1c9      	bne.n	800b426 <__sflush_r+0x32>
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0c6      	beq.n	800b426 <__sflush_r+0x32>
 800b498:	2b1d      	cmp	r3, #29
 800b49a:	d001      	beq.n	800b4a0 <__sflush_r+0xac>
 800b49c:	2b16      	cmp	r3, #22
 800b49e:	d11e      	bne.n	800b4de <__sflush_r+0xea>
 800b4a0:	602f      	str	r7, [r5, #0]
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e022      	b.n	800b4ec <__sflush_r+0xf8>
 800b4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4aa:	b21b      	sxth	r3, r3
 800b4ac:	e01b      	b.n	800b4e6 <__sflush_r+0xf2>
 800b4ae:	690f      	ldr	r7, [r1, #16]
 800b4b0:	2f00      	cmp	r7, #0
 800b4b2:	d0f6      	beq.n	800b4a2 <__sflush_r+0xae>
 800b4b4:	0793      	lsls	r3, r2, #30
 800b4b6:	680e      	ldr	r6, [r1, #0]
 800b4b8:	bf08      	it	eq
 800b4ba:	694b      	ldreq	r3, [r1, #20]
 800b4bc:	600f      	str	r7, [r1, #0]
 800b4be:	bf18      	it	ne
 800b4c0:	2300      	movne	r3, #0
 800b4c2:	eba6 0807 	sub.w	r8, r6, r7
 800b4c6:	608b      	str	r3, [r1, #8]
 800b4c8:	f1b8 0f00 	cmp.w	r8, #0
 800b4cc:	dde9      	ble.n	800b4a2 <__sflush_r+0xae>
 800b4ce:	6a21      	ldr	r1, [r4, #32]
 800b4d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4d2:	4643      	mov	r3, r8
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b0      	blx	r6
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	dc08      	bgt.n	800b4f0 <__sflush_r+0xfc>
 800b4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	4407      	add	r7, r0
 800b4f2:	eba8 0800 	sub.w	r8, r8, r0
 800b4f6:	e7e7      	b.n	800b4c8 <__sflush_r+0xd4>
 800b4f8:	dfbffffe 	.word	0xdfbffffe

0800b4fc <_fflush_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	690b      	ldr	r3, [r1, #16]
 800b500:	4605      	mov	r5, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b913      	cbnz	r3, 800b50c <_fflush_r+0x10>
 800b506:	2500      	movs	r5, #0
 800b508:	4628      	mov	r0, r5
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	b118      	cbz	r0, 800b516 <_fflush_r+0x1a>
 800b50e:	6a03      	ldr	r3, [r0, #32]
 800b510:	b90b      	cbnz	r3, 800b516 <_fflush_r+0x1a>
 800b512:	f7ff fd2d 	bl	800af70 <__sinit>
 800b516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0f3      	beq.n	800b506 <_fflush_r+0xa>
 800b51e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b520:	07d0      	lsls	r0, r2, #31
 800b522:	d404      	bmi.n	800b52e <_fflush_r+0x32>
 800b524:	0599      	lsls	r1, r3, #22
 800b526:	d402      	bmi.n	800b52e <_fflush_r+0x32>
 800b528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b52a:	f7ff ff16 	bl	800b35a <__retarget_lock_acquire_recursive>
 800b52e:	4628      	mov	r0, r5
 800b530:	4621      	mov	r1, r4
 800b532:	f7ff ff5f 	bl	800b3f4 <__sflush_r>
 800b536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b538:	07da      	lsls	r2, r3, #31
 800b53a:	4605      	mov	r5, r0
 800b53c:	d4e4      	bmi.n	800b508 <_fflush_r+0xc>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	059b      	lsls	r3, r3, #22
 800b542:	d4e1      	bmi.n	800b508 <_fflush_r+0xc>
 800b544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b546:	f7ff ff09 	bl	800b35c <__retarget_lock_release_recursive>
 800b54a:	e7dd      	b.n	800b508 <_fflush_r+0xc>

0800b54c <__swhatbuf_r>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	460c      	mov	r4, r1
 800b550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b554:	2900      	cmp	r1, #0
 800b556:	b096      	sub	sp, #88	@ 0x58
 800b558:	4615      	mov	r5, r2
 800b55a:	461e      	mov	r6, r3
 800b55c:	da0d      	bge.n	800b57a <__swhatbuf_r+0x2e>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b564:	f04f 0100 	mov.w	r1, #0
 800b568:	bf14      	ite	ne
 800b56a:	2340      	movne	r3, #64	@ 0x40
 800b56c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b570:	2000      	movs	r0, #0
 800b572:	6031      	str	r1, [r6, #0]
 800b574:	602b      	str	r3, [r5, #0]
 800b576:	b016      	add	sp, #88	@ 0x58
 800b578:	bd70      	pop	{r4, r5, r6, pc}
 800b57a:	466a      	mov	r2, sp
 800b57c:	f000 f848 	bl	800b610 <_fstat_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	dbec      	blt.n	800b55e <__swhatbuf_r+0x12>
 800b584:	9901      	ldr	r1, [sp, #4]
 800b586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b58a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b58e:	4259      	negs	r1, r3
 800b590:	4159      	adcs	r1, r3
 800b592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b596:	e7eb      	b.n	800b570 <__swhatbuf_r+0x24>

0800b598 <__smakebuf_r>:
 800b598:	898b      	ldrh	r3, [r1, #12]
 800b59a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b59c:	079d      	lsls	r5, r3, #30
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	d507      	bpl.n	800b5b4 <__smakebuf_r+0x1c>
 800b5a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	6123      	str	r3, [r4, #16]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	6163      	str	r3, [r4, #20]
 800b5b0:	b003      	add	sp, #12
 800b5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b4:	ab01      	add	r3, sp, #4
 800b5b6:	466a      	mov	r2, sp
 800b5b8:	f7ff ffc8 	bl	800b54c <__swhatbuf_r>
 800b5bc:	9f00      	ldr	r7, [sp, #0]
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7ff fbbc 	bl	800ad40 <_malloc_r>
 800b5c8:	b948      	cbnz	r0, 800b5de <__smakebuf_r+0x46>
 800b5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ce:	059a      	lsls	r2, r3, #22
 800b5d0:	d4ee      	bmi.n	800b5b0 <__smakebuf_r+0x18>
 800b5d2:	f023 0303 	bic.w	r3, r3, #3
 800b5d6:	f043 0302 	orr.w	r3, r3, #2
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	e7e2      	b.n	800b5a4 <__smakebuf_r+0xc>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	6020      	str	r0, [r4, #0]
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5ee:	b15b      	cbz	r3, 800b608 <__smakebuf_r+0x70>
 800b5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f000 f81d 	bl	800b634 <_isatty_r>
 800b5fa:	b128      	cbz	r0, 800b608 <__smakebuf_r+0x70>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f023 0303 	bic.w	r3, r3, #3
 800b602:	f043 0301 	orr.w	r3, r3, #1
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	431d      	orrs	r5, r3
 800b60c:	81a5      	strh	r5, [r4, #12]
 800b60e:	e7cf      	b.n	800b5b0 <__smakebuf_r+0x18>

0800b610 <_fstat_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	@ (800b630 <_fstat_r+0x20>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	4611      	mov	r1, r2
 800b61c:	602b      	str	r3, [r5, #0]
 800b61e:	f7f5 fcf4 	bl	800100a <_fstat>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	d102      	bne.n	800b62c <_fstat_r+0x1c>
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	b103      	cbz	r3, 800b62c <_fstat_r+0x1c>
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	bf00      	nop
 800b630:	20000ba0 	.word	0x20000ba0

0800b634 <_isatty_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d06      	ldr	r5, [pc, #24]	@ (800b650 <_isatty_r+0x1c>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	602b      	str	r3, [r5, #0]
 800b640:	f7f5 fcf3 	bl	800102a <_isatty>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_isatty_r+0x1a>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_isatty_r+0x1a>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	20000ba0 	.word	0x20000ba0

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
