
BatDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800c000  0800c000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2ac  0800c2ac  0000e088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2ac  0800c2ac  0000d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b4  0800c2b4  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b4  0800c2b4  0000d2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2b8  0800c2b8  0000d2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c2bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  20000088  0800c344  0000e088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  0800c344  0000ebf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c36b  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e71  00000000  00000000  0002a423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0002f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001138  00000000  00000000  00030918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d694  00000000  00000000  00031a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000231f5  00000000  00000000  0004f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a07f1  00000000  00000000  000722d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006248  00000000  00000000  00112b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00118d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bfe8 	.word	0x0800bfe8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	0800bfe8 	.word	0x0800bfe8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b36      	ldr	r3, [pc, #216]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004dc:	4a36      	ldr	r2, [pc, #216]	@ (80005b8 <MX_ADC1_Init+0xf0>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80004e0:	4b34      	ldr	r3, [pc, #208]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b32      	ldr	r3, [pc, #200]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004ee:	4b31      	ldr	r3, [pc, #196]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f4:	4b2f      	ldr	r3, [pc, #188]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b2e      	ldr	r3, [pc, #184]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b2c      	ldr	r3, [pc, #176]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800050a:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <MX_ADC1_Init+0xf4>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000514:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000516:	2204      	movs	r2, #4
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000522:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	4822      	ldr	r0, [pc, #136]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800052a:	f000 ffe1 	bl	80014f0 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fcf4 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	481a      	ldr	r0, [pc, #104]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800054a:	f001 fa65 	bl	8001a18 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fce4 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000558:	2301      	movs	r3, #1
 800055a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000566:	f001 fa57 	bl	8001a18 <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 fcd6 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000574:	2302      	movs	r3, #2
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000578:	2303      	movs	r3, #3
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000582:	f001 fa49 	bl	8001a18 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800058c:	f000 fcc8 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000590:	2303      	movs	r3, #3
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800059e:	f001 fa3b 	bl	8001a18 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005a8:	f000 fcba 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000a4 	.word	0x200000a4
 80005b8:	40012000 	.word	0x40012000
 80005bc:	0f000001 	.word	0x0f000001

080005c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <HAL_ADC_MspInit+0xdc>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d157      	bne.n	8000692 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ea:	4a2d      	ldr	r2, [pc, #180]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800061a:	230f      	movs	r3, #15
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	481d      	ldr	r0, [pc, #116]	@ (80006a4 <HAL_ADC_MspInit+0xe4>)
 800062e:	f002 fb1f 	bl	8002c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000634:	4a1d      	ldr	r2, [pc, #116]	@ (80006ac <HAL_ADC_MspInit+0xec>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800064c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000654:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800065c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000678:	f001 fe10 	bl	800229c <HAL_DMA_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000682:	f000 fc4d 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068a:	639a      	str	r2, [r3, #56]	@ 0x38
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	@ 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	200000ec 	.word	0x200000ec
 80006ac:	40026410 	.word	0x40026410

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2038      	movs	r0, #56	@ 0x38
 80006d8:	f001 fd90 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006dc:	2038      	movs	r0, #56	@ 0x38
 80006de:	f001 fdb9 	bl	8002254 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	@ 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b5b      	ldr	r3, [pc, #364]	@ (8000878 <MX_GPIO_Init+0x188>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a5a      	ldr	r2, [pc, #360]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a53      	ldr	r2, [pc, #332]	@ (8000878 <MX_GPIO_Init+0x188>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a4c      	ldr	r2, [pc, #304]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b4a      	ldr	r3, [pc, #296]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b46      	ldr	r3, [pc, #280]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a45      	ldr	r2, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b43      	ldr	r3, [pc, #268]	@ (8000878 <MX_GPIO_Init+0x188>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a3e      	ldr	r2, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b3c      	ldr	r3, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <MX_GPIO_Init+0x188>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4832      	ldr	r0, [pc, #200]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007b4:	f002 fcf4 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4830      	ldr	r0, [pc, #192]	@ (8000880 <MX_GPIO_Init+0x190>)
 80007be:	f002 fcef 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007c8:	482e      	ldr	r0, [pc, #184]	@ (8000884 <MX_GPIO_Init+0x194>)
 80007ca:	f002 fce9 	bl	80031a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80007ce:	2304      	movs	r3, #4
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4826      	ldr	r0, [pc, #152]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007e2:	f002 fa45 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	481f      	ldr	r0, [pc, #124]	@ (800087c <MX_GPIO_Init+0x18c>)
 80007fe:	f002 fa37 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000802:	2332      	movs	r3, #50	@ 0x32
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000806:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_GPIO_Init+0x18c>)
 8000818:	f002 fa2a 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4813      	ldr	r0, [pc, #76]	@ (8000880 <MX_GPIO_Init+0x190>)
 8000834:	f002 fa1c 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000838:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800083c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0x194>)
 8000852:	f002 fa0d 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x194>)
 800086a:	f002 fa01 	bl	8002c70 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	@ 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40021000 	.word	0x40021000
 8000880:	40020800 	.word	0x40020800
 8000884:	40020c00 	.word	0x40020c00

08000888 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f004 fdd7 	bl	8005478 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 fb26 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000014c 	.word	0x2000014c
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <HAL_I2C_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12c      	bne.n	8000960 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000922:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000934:	2304      	movs	r3, #4
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	@ (8000970 <HAL_I2C_MspInit+0x8c>)
 8000940:	f002 f996 	bl	8002c70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000952:	6413      	str	r3, [r2, #64]	@ 0x40
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400

08000974 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_I2S2_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000984:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_I2S2_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_I2S2_Init+0x50>)
 800099a:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <MX_I2S2_Init+0x58>)
 800099c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_I2S2_Init+0x50>)
 80009b2:	f004 ff29 	bl	8005808 <HAL_I2S_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 fab0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001a0 	.word	0x200001a0
 80009c8:	40003800 	.word	0x40003800
 80009cc:	00017700 	.word	0x00017700

080009d0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009d6:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <MX_I2S3_Init+0x58>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009f8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <MX_I2S3_Init+0x5c>)
 80009fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2S3_Init+0x54>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_I2S3_Init+0x54>)
 8000a10:	f004 fefa 	bl	8005808 <HAL_I2S_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 fa81 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001e8 	.word	0x200001e8
 8000a28:	40003c00 	.word	0x40003c00
 8000a2c:	00017700 	.word	0x00017700

08000a30 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	@ 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a59      	ldr	r2, [pc, #356]	@ (8000bb4 <HAL_I2S_MspInit+0x184>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d15b      	bne.n	8000b0a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
 8000a56:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	4a57      	ldr	r2, [pc, #348]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a62:	4b55      	ldr	r3, [pc, #340]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	4b51      	ldr	r3, [pc, #324]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a50      	ldr	r2, [pc, #320]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a49      	ldr	r2, [pc, #292]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b47      	ldr	r3, [pc, #284]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	483e      	ldr	r0, [pc, #248]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ac2:	f002 f8d5 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4836      	ldr	r0, [pc, #216]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ae2:	f002 f8c5 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af8:	2305      	movs	r3, #5
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	482f      	ldr	r0, [pc, #188]	@ (8000bc0 <HAL_I2S_MspInit+0x190>)
 8000b04:	f002 f8b4 	bl	8002c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b08:	e04f      	b.n	8000baa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <HAL_I2S_MspInit+0x194>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d14a      	bne.n	8000baa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_I2S_MspInit+0x188>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <HAL_I2S_MspInit+0x198>)
 8000b84:	f002 f874 	bl	8002c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b88:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_I2S_MspInit+0x18c>)
 8000ba6:	f002 f863 	bl	8002c70 <HAL_GPIO_Init>
}
 8000baa:	bf00      	nop
 8000bac:	3738      	adds	r7, #56	@ 0x38
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40003800 	.word	0x40003800
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40003c00 	.word	0x40003c00
 8000bc8:	40020000 	.word	0x40020000

08000bcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000be4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000be8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000bec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf4:	e000      	b.n	8000bf8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bf6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c02:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fbcf 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f8d7 	bl	8000dd8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c2a:	f000 f93d 	bl	8000ea8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f7ff fd5f 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c32:	f7ff fd3d 	bl	80006b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c36:	f7ff fe27 	bl	8000888 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c3a:	f7ff fe9b 	bl	8000974 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000c3e:	f7ff fec7 	bl	80009d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c42:	f000 f97f 	bl	8000f44 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000c46:	f00a fa09 	bl	800b05c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000c4a:	f7ff fc3d 	bl	80004c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c4e:	f000 fafd 	bl	800124c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc1, adc_values, 4) != HAL_OK)
 8000c52:	2204      	movs	r2, #4
 8000c54:	495c      	ldr	r1, [pc, #368]	@ (8000dc8 <main+0x1ac>)
 8000c56:	485d      	ldr	r0, [pc, #372]	@ (8000dcc <main+0x1b0>)
 8000c58:	f000 fda8 	bl	80017ac <HAL_ADC_Start_DMA>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <main+0x50>
  {
      // Start Error
	  printf("ADC Start Error\n");
 8000c62:	485b      	ldr	r0, [pc, #364]	@ (8000dd0 <main+0x1b4>)
 8000c64:	f00a feda 	bl	800ba1c <puts>
      Error_Handler();
 8000c68:	f000 f95a 	bl	8000f20 <Error_Handler>
//	  count++;
//	  printf("HELLO WORLD count = %d \n", count);
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	  HAL_Delay(2000);
//
	  uint32_t max_value = adc_values[0];
 8000c6c:	4b56      	ldr	r3, [pc, #344]	@ (8000dc8 <main+0x1ac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
	  int max_index = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]

	  // find the maximum ADC value
	  for (int i = 1; i < 4; i++)
 8000c76:	2301      	movs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	e010      	b.n	8000c9e <main+0x82>
	  {
		  if (adc_values[i] > max_value)
 8000c7c:	4a52      	ldr	r2, [pc, #328]	@ (8000dc8 <main+0x1ac>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d206      	bcs.n	8000c98 <main+0x7c>
		  {
			  max_value = adc_values[i];
 8000c8a:	4a4f      	ldr	r2, [pc, #316]	@ (8000dc8 <main+0x1ac>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	60fb      	str	r3, [r7, #12]
			  max_index = i;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60bb      	str	r3, [r7, #8]
	  for (int i = 1; i < 4; i++)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	ddeb      	ble.n	8000c7c <main+0x60>
		  }
	  }

	  switch (max_index)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d86e      	bhi.n	8000d88 <main+0x16c>
 8000caa:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <main+0x94>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000cf3 	.word	0x08000cf3
 8000cb8:	08000d25 	.word	0x08000d25
 8000cbc:	08000d57 	.word	0x08000d57
	  {
		  case 0:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc6:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <main+0x1b8>)
 8000cc8:	f002 fa6a 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd2:	4840      	ldr	r0, [pc, #256]	@ (8000dd4 <main+0x1b8>)
 8000cd4:	f002 fa64 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cde:	483d      	ldr	r0, [pc, #244]	@ (8000dd4 <main+0x1b8>)
 8000ce0:	f002 fa5e 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cea:	483a      	ldr	r0, [pc, #232]	@ (8000dd4 <main+0x1b8>)
 8000cec:	f002 fa58 	bl	80031a0 <HAL_GPIO_WritePin>
			  break;
 8000cf0:	e063      	b.n	8000dba <main+0x19e>
		  case 1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf8:	4836      	ldr	r0, [pc, #216]	@ (8000dd4 <main+0x1b8>)
 8000cfa:	f002 fa51 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d04:	4833      	ldr	r0, [pc, #204]	@ (8000dd4 <main+0x1b8>)
 8000d06:	f002 fa4b 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d10:	4830      	ldr	r0, [pc, #192]	@ (8000dd4 <main+0x1b8>)
 8000d12:	f002 fa45 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d1c:	482d      	ldr	r0, [pc, #180]	@ (8000dd4 <main+0x1b8>)
 8000d1e:	f002 fa3f 	bl	80031a0 <HAL_GPIO_WritePin>
			  break;
 8000d22:	e04a      	b.n	8000dba <main+0x19e>
		  case 2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d2a:	482a      	ldr	r0, [pc, #168]	@ (8000dd4 <main+0x1b8>)
 8000d2c:	f002 fa38 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d36:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <main+0x1b8>)
 8000d38:	f002 fa32 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d42:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <main+0x1b8>)
 8000d44:	f002 fa2c 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d4e:	4821      	ldr	r0, [pc, #132]	@ (8000dd4 <main+0x1b8>)
 8000d50:	f002 fa26 	bl	80031a0 <HAL_GPIO_WritePin>
			  break;
 8000d54:	e031      	b.n	8000dba <main+0x19e>
		  case 3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5c:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <main+0x1b8>)
 8000d5e:	f002 fa1f 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d68:	481a      	ldr	r0, [pc, #104]	@ (8000dd4 <main+0x1b8>)
 8000d6a:	f002 fa19 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d74:	4817      	ldr	r0, [pc, #92]	@ (8000dd4 <main+0x1b8>)
 8000d76:	f002 fa13 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <main+0x1b8>)
 8000d82:	f002 fa0d 	bl	80031a0 <HAL_GPIO_WritePin>
			  break;
 8000d86:	e018      	b.n	8000dba <main+0x19e>
		  default:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <main+0x1b8>)
 8000d90:	f002 fa06 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <main+0x1b8>)
 8000d9c:	f002 fa00 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <main+0x1b8>)
 8000da8:	f002 f9fa 	bl	80031a0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db2:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <main+0x1b8>)
 8000db4:	f002 f9f4 	bl	80031a0 <HAL_GPIO_WritePin>
			  break;
 8000db8:	bf00      	nop
	  }

	  HAL_Delay(1000);
 8000dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dbe:	f000 fb73 	bl	80014a8 <HAL_Delay>


//
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dc2:	f00a f971 	bl	800b0a8 <MX_USB_HOST_Process>
  {
 8000dc6:	e751      	b.n	8000c6c <main+0x50>
 8000dc8:	20000230 	.word	0x20000230
 8000dcc:	200000a4 	.word	0x200000a4
 8000dd0:	0800c000 	.word	0x0800c000
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	@ 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	@ 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00a fef8 	bl	800bbdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e4c:	23c0      	movs	r3, #192	@ 0xc0
 8000e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e54:	2308      	movs	r3, #8
 8000e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 fa31 	bl	80062c4 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e68:	f000 f85a 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2103      	movs	r1, #3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fd47 	bl	800691c <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e94:	f000 f844 	bl	8000f20 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	@ 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000ec2:	23c8      	movs	r3, #200	@ 0xc8
 8000ec4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 ffeb 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000edc:	f000 f820 	bl	8000f20 <Error_Handler>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 for (int i = 0; i < len; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e009      	b.n	8000f0e <_write+0x26>
  ITM_SendChar((*ptr++));
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe62 	bl	8000bcc <ITM_SendChar>
 for (int i = 0; i < len; i++)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbf1      	blt.n	8000efa <_write+0x12>
 return len;
 8000f16:	687b      	ldr	r3, [r7, #4]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <MX_SPI1_Init+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f90:	220a      	movs	r2, #10
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_SPI1_Init+0x64>)
 8000f96:	f006 fa01 	bl	800739c <HAL_SPI_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f7ff ffbe 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000240 	.word	0x20000240
 8000fac:	40013000 	.word	0x40013000

08000fb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	@ (8001034 <HAL_SPI_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12b      	bne.n	800102a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_SPI_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800100a:	23e0      	movs	r3, #224	@ 0xe0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_SPI_MspInit+0x8c>)
 8001026:	f001 fe23 	bl	8002c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013000 	.word	0x40013000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800107e:	2007      	movs	r0, #7
 8001080:	f001 f89c 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f9bf 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <DMA2_Stream0_IRQHandler+0x10>)
 80010f6:	f001 fb51 	bl	800279c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000ec 	.word	0x200000ec

08001104 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <OTG_FS_IRQHandler+0x10>)
 800110a:	f002 fb61 	bl	80037d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200006c4 	.word	0x200006c4

08001118 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
  }

  return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800117a:	605a      	str	r2, [r3, #4]
  return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_isatty>:

int _isatty(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f00a fd54 	bl	800bc98 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	20000298 	.word	0x20000298
 8001224:	20000bf0 	.word	0x20000bf0

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART1_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001270:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001274:	220c      	movs	r2, #12
 8001276:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001286:	f006 fa25 	bl	80076d4 <HAL_UART_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001290:	f7ff fe46 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000029c 	.word	0x2000029c
 800129c:	40011000 	.word	0x40011000

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_UART_MspInit+0xc0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d14a      	bne.n	8001358 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a26      	ldr	r2, [pc, #152]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_UART_MspInit+0xc4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <HAL_UART_MspInit+0xc8>)
 8001334:	f001 fc9c 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001348:	2307      	movs	r3, #7
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <HAL_UART_MspInit+0xcc>)
 8001354:	f001 fc8c 	bl	8002c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40011000 	.word	0x40011000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001374:	f7ff ff58 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f00a fc81 	bl	800bca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fc3b 	bl	8000c1c <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80013b4:	0800c2bc 	.word	0x0800c2bc
  ldr r2, =_sbss
 80013b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80013bc:	20000bf0 	.word	0x20000bf0

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 fee5 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fe22 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 ff2c 	bl	8002284 <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 feda 	bl	80021fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	200002e4 	.word	0x200002e4

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200002e4 	.word	0x200002e4

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e14e      	b.n	80017a4 <HAL_ADC_Init+0x2b4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a90      	ldr	r2, [pc, #576]	@ (800174c <HAL_ADC_Init+0x25c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d004      	beq.n	800151a <HAL_ADC_Init+0x2a>
 8001510:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8001514:	488e      	ldr	r0, [pc, #568]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001516:	f7ff fd09 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d013      	beq.n	800154a <HAL_ADC_Init+0x5a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152a:	d00e      	beq.n	800154a <HAL_ADC_Init+0x5a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001534:	d009      	beq.n	800154a <HAL_ADC_Init+0x5a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800153e:	d004      	beq.n	800154a <HAL_ADC_Init+0x5a>
 8001540:	f240 1143 	movw	r1, #323	@ 0x143
 8001544:	4882      	ldr	r0, [pc, #520]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001546:	f7ff fcf1 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d013      	beq.n	800157a <HAL_ADC_Init+0x8a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800155a:	d00e      	beq.n	800157a <HAL_ADC_Init+0x8a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001564:	d009      	beq.n	800157a <HAL_ADC_Init+0x8a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800156e:	d004      	beq.n	800157a <HAL_ADC_Init+0x8a>
 8001570:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8001574:	4876      	ldr	r0, [pc, #472]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001576:	f7ff fcd9 	bl	8000f2c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_ADC_Init+0xa4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d004      	beq.n	8001594 <HAL_ADC_Init+0xa4>
 800158a:	f240 1145 	movw	r1, #325	@ 0x145
 800158e:	4870      	ldr	r0, [pc, #448]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001590:	f7ff fccc 	bl	8000f2c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_ADC_Init+0xbe>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_Init+0xbe>
 80015a4:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80015a8:	4869      	ldr	r0, [pc, #420]	@ (8001750 <HAL_ADC_Init+0x260>)
 80015aa:	f7ff fcbf 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d054      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015be:	d04f      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80015c8:	d04a      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80015d2:	d045      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80015dc:	d040      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80015e6:	d03b      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80015f0:	d036      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 80015fa:	d031      	beq.n	8001660 <HAL_ADC_Init+0x170>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001604:	d02c      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160a:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800160e:	d027      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8001618:	d022      	beq.n	8001660 <HAL_ADC_Init+0x170>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8001622:	d01d      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800162c:	d018      	beq.n	8001660 <HAL_ADC_Init+0x170>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8001636:	d013      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8001640:	d00e      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800164a:	d009      	beq.n	8001660 <HAL_ADC_Init+0x170>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	4a40      	ldr	r2, [pc, #256]	@ (8001754 <HAL_ADC_Init+0x264>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_ADC_Init+0x170>
 8001656:	f240 1147 	movw	r1, #327	@ 0x147
 800165a:	483d      	ldr	r0, [pc, #244]	@ (8001750 <HAL_ADC_Init+0x260>)
 800165c:	f7ff fc66 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <HAL_ADC_Init+0x18c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001670:	d004      	beq.n	800167c <HAL_ADC_Init+0x18c>
 8001672:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8001676:	4836      	ldr	r0, [pc, #216]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001678:	f7ff fc58 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_ADC_Init+0x19c>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d904      	bls.n	8001696 <HAL_ADC_Init+0x1a6>
 800168c:	f240 1149 	movw	r1, #329	@ 0x149
 8001690:	482f      	ldr	r0, [pc, #188]	@ (8001750 <HAL_ADC_Init+0x260>)
 8001692:	f7ff fc4b 	bl	8000f2c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_ADC_Init+0x1c4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d004      	beq.n	80016b4 <HAL_ADC_Init+0x1c4>
 80016aa:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80016ae:	4828      	ldr	r0, [pc, #160]	@ (8001750 <HAL_ADC_Init+0x260>)
 80016b0:	f7ff fc3c 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d00c      	beq.n	80016d6 <HAL_ADC_Init+0x1e6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_ADC_Init+0x1e6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d004      	beq.n	80016d6 <HAL_ADC_Init+0x1e6>
 80016cc:	f240 114b 	movw	r1, #331	@ 0x14b
 80016d0:	481f      	ldr	r0, [pc, #124]	@ (8001750 <HAL_ADC_Init+0x260>)
 80016d2:	f7ff fc2b 	bl	8000f2c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_Init+0x204>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Init+0x204>
 80016ea:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80016ee:	4818      	ldr	r0, [pc, #96]	@ (8001750 <HAL_ADC_Init+0x260>)
 80016f0:	f7ff fc1c 	bl	8000f2c <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <HAL_ADC_Init+0x264>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d017      	beq.n	800172e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d013      	beq.n	800172e <HAL_ADC_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800170e:	d00e      	beq.n	800172e <HAL_ADC_Init+0x23e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001718:	d009      	beq.n	800172e <HAL_ADC_Init+0x23e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001722:	d004      	beq.n	800172e <HAL_ADC_Init+0x23e>
 8001724:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001728:	4809      	ldr	r0, [pc, #36]	@ (8001750 <HAL_ADC_Init+0x260>)
 800172a:	f7ff fbff 	bl	8000f2c <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d110      	bne.n	8001758 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe ff42 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800174a:	e005      	b.n	8001758 <HAL_ADC_Init+0x268>
 800174c:	40012000 	.word	0x40012000
 8001750:	0800c010 	.word	0x0800c010
 8001754:	0f000001 	.word	0x0f000001
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d118      	bne.n	8001796 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	f043 0202 	orr.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fac3 	bl	8001d04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
 8001794:	e001      	b.n	800179a <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	7e1b      	ldrb	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_ADC_Start_DMA+0x2a>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	7e1b      	ldrb	r3, [r3, #24]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_Start_DMA+0x2a>
 80017cc:	f240 515a 	movw	r1, #1370	@ 0x55a
 80017d0:	487a      	ldr	r0, [pc, #488]	@ (80019bc <HAL_ADC_Start_DMA+0x210>)
 80017d2:	f7ff fbab 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d013      	beq.n	8001806 <HAL_ADC_Start_DMA+0x5a>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017e6:	d00e      	beq.n	8001806 <HAL_ADC_Start_DMA+0x5a>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017f0:	d009      	beq.n	8001806 <HAL_ADC_Start_DMA+0x5a>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80017fa:	d004      	beq.n	8001806 <HAL_ADC_Start_DMA+0x5a>
 80017fc:	f240 515b 	movw	r1, #1371	@ 0x55b
 8001800:	486e      	ldr	r0, [pc, #440]	@ (80019bc <HAL_ADC_Start_DMA+0x210>)
 8001802:	f7ff fb93 	bl	8000f2c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_ADC_Start_DMA+0x68>
 8001810:	2302      	movs	r3, #2
 8001812:	e0ce      	b.n	80019b2 <HAL_ADC_Start_DMA+0x206>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d018      	beq.n	800185c <HAL_ADC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800183a:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <HAL_ADC_Start_DMA+0x214>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a61      	ldr	r2, [pc, #388]	@ (80019c4 <HAL_ADC_Start_DMA+0x218>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9a      	lsrs	r2, r3, #18
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800184e:	e002      	b.n	8001856 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	3b01      	subs	r3, #1
 8001854:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <HAL_ADC_Start_DMA+0xa4>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800186a:	d107      	bne.n	800187c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800187a:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 8086 	bne.w	8001998 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_ADC_Start_DMA+0x21c>)
 80018ea:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f0:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <HAL_ADC_Start_DMA+0x220>)
 80018f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f8:	4a35      	ldr	r2, [pc, #212]	@ (80019d0 <HAL_ADC_Start_DMA+0x224>)
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001900:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <HAL_ADC_Start_DMA+0x228>)
 8001902:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800190c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800191c:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800192c:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	334c      	adds	r3, #76	@ 0x4c
 8001938:	4619      	mov	r1, r3
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f000 fec7 	bl	80026d0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_ADC_Start_DMA+0x1c2>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d129      	bne.n	80019b0 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e020      	b.n	80019b0 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <HAL_ADC_Start_DMA+0x22c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d11b      	bne.n	80019b0 <HAL_ADC_Start_DMA+0x204>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d114      	bne.n	80019b0 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e00b      	b.n	80019b0 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f043 0210 	orr.w	r2, r3, #16
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	0800c010 	.word	0x0800c010
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	40012300 	.word	0x40012300
 80019cc:	08001f19 	.word	0x08001f19
 80019d0:	08001fd3 	.word	0x08001fd3
 80019d4:	08001fef 	.word	0x08001fef
 80019d8:	40012000 	.word	0x40012000

080019dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d909      	bls.n	8001a42 <HAL_ADC_ConfigChannel+0x2a>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a72      	ldr	r2, [pc, #456]	@ (8001bfc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x2a>
 8001a38:	f240 618b 	movw	r1, #1675	@ 0x68b
 8001a3c:	4870      	ldr	r0, [pc, #448]	@ (8001c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a3e:	f7ff fa75 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x3a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d904      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x44>
 8001a52:	f240 618c 	movw	r1, #1676	@ 0x68c
 8001a56:	486a      	ldr	r0, [pc, #424]	@ (8001c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a58:	f7ff fa68 	bl	8000f2c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d01c      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d018      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d014      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d010      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d008      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d004      	beq.n	8001aa6 <HAL_ADC_ConfigChannel+0x8e>
 8001a9c:	f240 618d 	movw	r1, #1677	@ 0x68d
 8001aa0:	4857      	ldr	r0, [pc, #348]	@ (8001c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001aa2:	f7ff fa43 	bl	8000f2c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x9c>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e118      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x2ce>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	d925      	bls.n	8001b10 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68d9      	ldr	r1, [r3, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b1e      	subs	r3, #30
 8001ada:	2207      	movs	r2, #7
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68d9      	ldr	r1, [r3, #12]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4403      	add	r3, r0
 8001b02:	3b1e      	subs	r3, #30
 8001b04:	409a      	lsls	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	e022      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6919      	ldr	r1, [r3, #16]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	2207      	movs	r2, #7
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	400a      	ands	r2, r1
 8001b32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4403      	add	r3, r0
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d824      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b05      	subs	r3, #5
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b05      	subs	r3, #5
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba6:	e051      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d829      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b23      	subs	r3, #35	@ 0x23
 8001bc2:	221f      	movs	r2, #31
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	400a      	ands	r2, r1
 8001bd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3b23      	subs	r3, #35	@ 0x23
 8001bec:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bf8:	e028      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x234>
 8001bfa:	bf00      	nop
 8001bfc:	10000012 	.word	0x10000012
 8001c00:	0800c010 	.word	0x0800c010
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b41      	subs	r3, #65	@ 0x41
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b41      	subs	r3, #65	@ 0x41
 8001c40:	fa00 f203 	lsl.w	r2, r0, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x2d8>)
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x2dc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10f      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x262>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d10b      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x2dc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d12b      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x2c4>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x2e0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x27e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b11      	cmp	r3, #17
 8001c94:	d122      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x2e0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb8:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_ADC_ConfigChannel+0x2e4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <HAL_ADC_ConfigChannel+0x2e8>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40012300 	.word	0x40012300
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	10000012 	.word	0x10000012
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <ADC_Init+0x208>)
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	4a5e      	ldr	r2, [pc, #376]	@ (8001f10 <ADC_Init+0x20c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00f      	b.n	8001e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0202 	bic.w	r2, r2, #2
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d028      	beq.n	8001e82 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <ADC_Init+0x13c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d904      	bls.n	8001e4a <ADC_Init+0x146>
 8001e40:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8001e44:	4833      	ldr	r0, [pc, #204]	@ (8001f14 <ADC_Init+0x210>)
 8001e46:	f7ff f871 	bl	8000f2c <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e58:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e68:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	3b01      	subs	r3, #1
 8001e76:	035a      	lsls	r2, r3, #13
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e007      	b.n	8001e92 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e90:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	051a      	lsls	r2, r3, #20
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ed4:	025a      	lsls	r2, r3, #9
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	029a      	lsls	r2, r3, #10
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	0f000001 	.word	0x0f000001
 8001f14:	0800c010 	.word	0x0800c010

08001f18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13c      	bne.n	8001fac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d12b      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d127      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d119      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0220 	bic.w	r2, r2, #32
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff fd19 	bl	80019dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001faa:	e00e      	b.n	8001fca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fd23 	bl	8001a04 <HAL_ADC_ErrorCallback>
}
 8001fbe:	e004      	b.n	8001fca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fde:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff fd05 	bl	80019f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fcf8 	bl	8001a04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <__NVIC_SetPriorityGrouping>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	@ (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	@ (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SysTick_Config>:
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff8e 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	d00f      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d00c      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d009      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d006      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d003      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021e2:	2190      	movs	r1, #144	@ 0x90
 80021e4:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021e6:	f7fe fea1 	bl	8000f2c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff16 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0800c048 	.word	0x0800c048

080021fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d903      	bls.n	800221c <HAL_NVIC_SetPriority+0x20>
 8002214:	21a8      	movs	r1, #168	@ 0xa8
 8002216:	480e      	ldr	r0, [pc, #56]	@ (8002250 <HAL_NVIC_SetPriority+0x54>)
 8002218:	f7fe fe88 	bl	8000f2c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	d903      	bls.n	800222a <HAL_NVIC_SetPriority+0x2e>
 8002222:	21a9      	movs	r1, #169	@ 0xa9
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <HAL_NVIC_SetPriority+0x54>)
 8002226:	f7fe fe81 	bl	8000f2c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222a:	f7ff ff1b 	bl	8002064 <__NVIC_GetPriorityGrouping>
 800222e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	6978      	ldr	r0, [r7, #20]
 8002236:	f7ff ff6b 	bl	8002110 <NVIC_EncodePriority>
 800223a:	4602      	mov	r2, r0
 800223c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff3a 	bl	80020bc <__NVIC_SetPriority>
}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800c048 	.word	0x0800c048

08002254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da03      	bge.n	800226e <HAL_NVIC_EnableIRQ+0x1a>
 8002266:	21bc      	movs	r1, #188	@ 0xbc
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <HAL_NVIC_EnableIRQ+0x2c>)
 800226a:	f7fe fe5f 	bl	8000f2c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff04 	bl	8002080 <__NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0800c048 	.word	0x0800c048

08002284 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff73 	bl	8002178 <SysTick_Config>
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff f8f2 	bl	8001490 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e203      	b.n	80026c0 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a8b      	ldr	r2, [pc, #556]	@ (80024ec <HAL_DMA_Init+0x250>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04e      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a8a      	ldr	r2, [pc, #552]	@ (80024f0 <HAL_DMA_Init+0x254>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d049      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a88      	ldr	r2, [pc, #544]	@ (80024f4 <HAL_DMA_Init+0x258>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d044      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a87      	ldr	r2, [pc, #540]	@ (80024f8 <HAL_DMA_Init+0x25c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03f      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a85      	ldr	r2, [pc, #532]	@ (80024fc <HAL_DMA_Init+0x260>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d03a      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a84      	ldr	r2, [pc, #528]	@ (8002500 <HAL_DMA_Init+0x264>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d035      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a82      	ldr	r2, [pc, #520]	@ (8002504 <HAL_DMA_Init+0x268>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d030      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a81      	ldr	r2, [pc, #516]	@ (8002508 <HAL_DMA_Init+0x26c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d02b      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7f      	ldr	r2, [pc, #508]	@ (800250c <HAL_DMA_Init+0x270>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d026      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7e      	ldr	r2, [pc, #504]	@ (8002510 <HAL_DMA_Init+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d021      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7c      	ldr	r2, [pc, #496]	@ (8002514 <HAL_DMA_Init+0x278>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01c      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7b      	ldr	r2, [pc, #492]	@ (8002518 <HAL_DMA_Init+0x27c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d017      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a79      	ldr	r2, [pc, #484]	@ (800251c <HAL_DMA_Init+0x280>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d012      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a78      	ldr	r2, [pc, #480]	@ (8002520 <HAL_DMA_Init+0x284>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00d      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a76      	ldr	r2, [pc, #472]	@ (8002524 <HAL_DMA_Init+0x288>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d008      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	@ (8002528 <HAL_DMA_Init+0x28c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <HAL_DMA_Init+0xc4>
 8002358:	21b7      	movs	r1, #183	@ 0xb7
 800235a:	4874      	ldr	r0, [pc, #464]	@ (800252c <HAL_DMA_Init+0x290>)
 800235c:	f7fe fde6 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d026      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002370:	d021      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800237a:	d01c      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8002384:	d017      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800238e:	d012      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8002398:	d00d      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80023ac:	d003      	beq.n	80023b6 <HAL_DMA_Init+0x11a>
 80023ae:	21b8      	movs	r1, #184	@ 0xb8
 80023b0:	485e      	ldr	r0, [pc, #376]	@ (800252c <HAL_DMA_Init+0x290>)
 80023b2:	f7fe fdbb 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_DMA_Init+0x13a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b40      	cmp	r3, #64	@ 0x40
 80023c4:	d007      	beq.n	80023d6 <HAL_DMA_Init+0x13a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b80      	cmp	r3, #128	@ 0x80
 80023cc:	d003      	beq.n	80023d6 <HAL_DMA_Init+0x13a>
 80023ce:	21b9      	movs	r1, #185	@ 0xb9
 80023d0:	4856      	ldr	r0, [pc, #344]	@ (800252c <HAL_DMA_Init+0x290>)
 80023d2:	f7fe fdab 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023de:	d007      	beq.n	80023f0 <HAL_DMA_Init+0x154>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_Init+0x154>
 80023e8:	21ba      	movs	r1, #186	@ 0xba
 80023ea:	4850      	ldr	r0, [pc, #320]	@ (800252c <HAL_DMA_Init+0x290>)
 80023ec:	f7fe fd9e 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f8:	d007      	beq.n	800240a <HAL_DMA_Init+0x16e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_DMA_Init+0x16e>
 8002402:	21bb      	movs	r1, #187	@ 0xbb
 8002404:	4849      	ldr	r0, [pc, #292]	@ (800252c <HAL_DMA_Init+0x290>)
 8002406:	f7fe fd91 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <HAL_DMA_Init+0x192>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800241a:	d008      	beq.n	800242e <HAL_DMA_Init+0x192>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002424:	d003      	beq.n	800242e <HAL_DMA_Init+0x192>
 8002426:	21bc      	movs	r1, #188	@ 0xbc
 8002428:	4840      	ldr	r0, [pc, #256]	@ (800252c <HAL_DMA_Init+0x290>)
 800242a:	f7fe fd7f 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_DMA_Init+0x1b6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800243e:	d008      	beq.n	8002452 <HAL_DMA_Init+0x1b6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002448:	d003      	beq.n	8002452 <HAL_DMA_Init+0x1b6>
 800244a:	21bd      	movs	r1, #189	@ 0xbd
 800244c:	4837      	ldr	r0, [pc, #220]	@ (800252c <HAL_DMA_Init+0x290>)
 800244e:	f7fe fd6d 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_DMA_Init+0x1d8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002462:	d007      	beq.n	8002474 <HAL_DMA_Init+0x1d8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b20      	cmp	r3, #32
 800246a:	d003      	beq.n	8002474 <HAL_DMA_Init+0x1d8>
 800246c:	21be      	movs	r1, #190	@ 0xbe
 800246e:	482f      	ldr	r0, [pc, #188]	@ (800252c <HAL_DMA_Init+0x290>)
 8002470:	f7fe fd5c 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_Init+0x206>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d00d      	beq.n	80024a2 <HAL_DMA_Init+0x206>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800248e:	d008      	beq.n	80024a2 <HAL_DMA_Init+0x206>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002498:	d003      	beq.n	80024a2 <HAL_DMA_Init+0x206>
 800249a:	21bf      	movs	r1, #191	@ 0xbf
 800249c:	4823      	ldr	r0, [pc, #140]	@ (800252c <HAL_DMA_Init+0x290>)
 800249e:	f7fe fd45 	bl	8000f2c <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_DMA_Init+0x21e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <HAL_DMA_Init+0x21e>
 80024b2:	21c0      	movs	r1, #192	@ 0xc0
 80024b4:	481d      	ldr	r0, [pc, #116]	@ (800252c <HAL_DMA_Init+0x290>)
 80024b6:	f7fe fd39 	bl	8000f2c <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d064      	beq.n	800258c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d032      	beq.n	8002530 <HAL_DMA_Init+0x294>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d02e      	beq.n	8002530 <HAL_DMA_Init+0x294>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d02a      	beq.n	8002530 <HAL_DMA_Init+0x294>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d026      	beq.n	8002530 <HAL_DMA_Init+0x294>
 80024e2:	21c5      	movs	r1, #197	@ 0xc5
 80024e4:	4811      	ldr	r0, [pc, #68]	@ (800252c <HAL_DMA_Init+0x290>)
 80024e6:	f7fe fd21 	bl	8000f2c <assert_failed>
 80024ea:	e021      	b.n	8002530 <HAL_DMA_Init+0x294>
 80024ec:	40026010 	.word	0x40026010
 80024f0:	40026028 	.word	0x40026028
 80024f4:	40026040 	.word	0x40026040
 80024f8:	40026058 	.word	0x40026058
 80024fc:	40026070 	.word	0x40026070
 8002500:	40026088 	.word	0x40026088
 8002504:	400260a0 	.word	0x400260a0
 8002508:	400260b8 	.word	0x400260b8
 800250c:	40026410 	.word	0x40026410
 8002510:	40026428 	.word	0x40026428
 8002514:	40026440 	.word	0x40026440
 8002518:	40026458 	.word	0x40026458
 800251c:	40026470 	.word	0x40026470
 8002520:	40026488 	.word	0x40026488
 8002524:	400264a0 	.word	0x400264a0
 8002528:	400264b8 	.word	0x400264b8
 800252c:	0800c084 	.word	0x0800c084
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_DMA_Init+0x2c2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002540:	d00d      	beq.n	800255e <HAL_DMA_Init+0x2c2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254a:	d008      	beq.n	800255e <HAL_DMA_Init+0x2c2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002554:	d003      	beq.n	800255e <HAL_DMA_Init+0x2c2>
 8002556:	21c6      	movs	r1, #198	@ 0xc6
 8002558:	485b      	ldr	r0, [pc, #364]	@ (80026c8 <HAL_DMA_Init+0x42c>)
 800255a:	f7fe fce7 	bl	8000f2c <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	2b00      	cmp	r3, #0
 8002564:	d012      	beq.n	800258c <HAL_DMA_Init+0x2f0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800256e:	d00d      	beq.n	800258c <HAL_DMA_Init+0x2f0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002578:	d008      	beq.n	800258c <HAL_DMA_Init+0x2f0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002582:	d003      	beq.n	800258c <HAL_DMA_Init+0x2f0>
 8002584:	21c7      	movs	r1, #199	@ 0xc7
 8002586:	4850      	ldr	r0, [pc, #320]	@ (80026c8 <HAL_DMA_Init+0x42c>)
 8002588:	f7fe fcd0 	bl	8000f2c <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7fe ff6f 	bl	8001490 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <HAL_DMA_Init+0x430>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa7f 	bl	8002b78 <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa36 	bl	8002b0c <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	223f      	movs	r2, #63	@ 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	0800c084 	.word	0x0800c084
 80026cc:	f010803f 	.word	0xf010803f

080026d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_DMA_Start_IT+0x26>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d304      	bcc.n	8002700 <HAL_DMA_Start_IT+0x30>
 80026f6:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80026fa:	4827      	ldr	r0, [pc, #156]	@ (8002798 <HAL_DMA_Start_IT+0xc8>)
 80026fc:	f7fe fc16 	bl	8000f2c <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_DMA_Start_IT+0x3e>
 800270a:	2302      	movs	r3, #2
 800270c:	e040      	b.n	8002790 <HAL_DMA_Start_IT+0xc0>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d12f      	bne.n	8002782 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f9ba 	bl	8002ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	223f      	movs	r2, #63	@ 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0216 	orr.w	r2, r2, #22
 8002756:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0208 	orr.w	r2, r2, #8
 800276e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e005      	b.n	800278e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	0800c084 	.word	0x0800c084

0800279c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027a8:	4b8e      	ldr	r3, [pc, #568]	@ (80029e4 <HAL_DMA_IRQHandler+0x248>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a8e      	ldr	r2, [pc, #568]	@ (80029e8 <HAL_DMA_IRQHandler+0x24c>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	2208      	movs	r2, #8
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0204 	bic.w	r2, r2, #4
 80027ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	2208      	movs	r2, #8
 80027f6:	409a      	lsls	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	2201      	movs	r2, #1
 800282c:	409a      	lsls	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	2204      	movs	r2, #4
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d012      	beq.n	8002874 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2204      	movs	r2, #4
 8002862:	409a      	lsls	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	f043 0204 	orr.w	r2, r3, #4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	2210      	movs	r2, #16
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d043      	beq.n	800290c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03c      	beq.n	800290c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	2210      	movs	r2, #16
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d018      	beq.n	80028de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d024      	beq.n	800290c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
 80028ca:	e01f      	b.n	800290c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e016      	b.n	800290c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0208 	bic.w	r2, r2, #8
 80028fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	2220      	movs	r2, #32
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 808f 	beq.w	8002a3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8087 	beq.w	8002a3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	2220      	movs	r2, #32
 8002934:	409a      	lsls	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b05      	cmp	r3, #5
 8002944:	d136      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0216 	bic.w	r2, r2, #22
 8002954:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002964:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <HAL_DMA_IRQHandler+0x1da>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0208 	bic.w	r2, r2, #8
 8002984:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	223f      	movs	r2, #63	@ 0x3f
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d07e      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
        }
        return;
 80029b2:	e079      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01d      	beq.n	80029fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d031      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
 80029e0:	e02c      	b.n	8002a3c <HAL_DMA_IRQHandler+0x2a0>
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000
 80029e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d023      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e01e      	b.n	8002a3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10f      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0210 	bic.w	r2, r2, #16
 8002a1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d032      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2205      	movs	r2, #5
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d307      	bcc.n	8002a84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f2      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x2cc>
 8002a82:	e000      	b.n	8002a86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aa8:	bf00      	nop
    }
  }
}
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d108      	bne.n	8002af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aee:	e007      	b.n	8002b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3b10      	subs	r3, #16
 8002b1c:	4a14      	ldr	r2, [pc, #80]	@ (8002b70 <DMA_CalcBaseAndBitshift+0x64>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b26:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <DMA_CalcBaseAndBitshift+0x68>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d909      	bls.n	8002b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b4c:	e007      	b.n	8002b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	aaaaaaab 	.word	0xaaaaaaab
 8002b74:	0800c2a4 	.word	0x0800c2a4

08002b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11f      	bne.n	8002bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d856      	bhi.n	8002c46 <DMA_CheckFifoParam+0xce>
 8002b98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <DMA_CheckFifoParam+0x28>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002bc3 	.word	0x08002bc3
 8002ba8:	08002bb1 	.word	0x08002bb1
 8002bac:	08002c47 	.word	0x08002c47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d046      	beq.n	8002c4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e043      	b.n	8002c4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bca:	d140      	bne.n	8002c4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e03d      	b.n	8002c4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bda:	d121      	bne.n	8002c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d837      	bhi.n	8002c52 <DMA_CheckFifoParam+0xda>
 8002be2:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <DMA_CheckFifoParam+0x70>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002bff 	.word	0x08002bff
 8002bf0:	08002bf9 	.word	0x08002bf9
 8002bf4:	08002c11 	.word	0x08002c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e030      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d025      	beq.n	8002c56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e022      	b.n	8002c56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c18:	d11f      	bne.n	8002c5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c1e:	e01c      	b.n	8002c5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d903      	bls.n	8002c2e <DMA_CheckFifoParam+0xb6>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d003      	beq.n	8002c34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c2c:	e018      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      break;
 8002c32:	e015      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e00b      	b.n	8002c5e <DMA_CheckFifoParam+0xe6>
      break;
 8002c46:	bf00      	nop
 8002c48:	e00a      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e008      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e006      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a32      	ldr	r2, [pc, #200]	@ (8002d54 <HAL_GPIO_Init+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d017      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <HAL_GPIO_Init+0xe8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a30      	ldr	r2, [pc, #192]	@ (8002d5c <HAL_GPIO_Init+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00f      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <HAL_GPIO_Init+0xf0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_GPIO_Init+0xf4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_GPIO_Init+0xf8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x4e>
 8002cb6:	21ac      	movs	r1, #172	@ 0xac
 8002cb8:	482c      	ldr	r0, [pc, #176]	@ (8002d6c <HAL_GPIO_Init+0xfc>)
 8002cba:	f7fe f937 	bl	8000f2c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_GPIO_Init+0x62>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d303      	bcc.n	8002cda <HAL_GPIO_Init+0x6a>
 8002cd2:	21ad      	movs	r1, #173	@ 0xad
 8002cd4:	4825      	ldr	r0, [pc, #148]	@ (8002d6c <HAL_GPIO_Init+0xfc>)
 8002cd6:	f7fe f929 	bl	8000f2c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d035      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d02d      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d029      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002d0a:	d020      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002d14:	d01b      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002d1e:	d016      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002d28:	d011      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002d32:	d00c      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0xde>
 8002d46:	21ae      	movs	r1, #174	@ 0xae
 8002d48:	4808      	ldr	r0, [pc, #32]	@ (8002d6c <HAL_GPIO_Init+0xfc>)
 8002d4a:	f7fe f8ef 	bl	8000f2c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e20b      	b.n	800316c <HAL_GPIO_Init+0x4fc>
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40021c00 	.word	0x40021c00
 8002d6c:	0800c0bc 	.word	0x0800c0bc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f040 81ec 	bne.w	8003166 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d005      	beq.n	8002da6 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d144      	bne.n	8002e30 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <HAL_GPIO_Init+0x15e>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00b      	beq.n	8002dce <HAL_GPIO_Init+0x15e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x15e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x15e>
 8002dc6:	21c0      	movs	r1, #192	@ 0xc0
 8002dc8:	4884      	ldr	r0, [pc, #528]	@ (8002fdc <HAL_GPIO_Init+0x36c>)
 8002dca:	f7fe f8af 	bl	8000f2c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d027      	beq.n	8002e8c <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_GPIO_Init+0x1ec>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1ec>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x1ec>
 8002e54:	21d1      	movs	r1, #209	@ 0xd1
 8002e56:	4861      	ldr	r0, [pc, #388]	@ (8002fdc <HAL_GPIO_Init+0x36c>)
 8002e58:	f7fe f868 	bl	8000f2c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	f040 80a3 	bne.w	8002fe0 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d077      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	d073      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d067      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d063      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d05f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d05b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d057      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d053      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d04f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d04b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d047      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d043      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d03f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d03b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d037      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d033      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d02f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d02b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d027      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b07      	cmp	r3, #7
 8002f48:	d023      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b07      	cmp	r3, #7
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	d01b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d017      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b0a      	cmp	r3, #10
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	d00f      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d00b      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x322>
 8002f8a:	21de      	movs	r1, #222	@ 0xde
 8002f8c:	4813      	ldr	r0, [pc, #76]	@ (8002fdc <HAL_GPIO_Init+0x36c>)
 8002f8e:	f7fd ffcd 	bl	8000f2c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fda:	e001      	b.n	8002fe0 <HAL_GPIO_Init+0x370>
 8002fdc:	0800c0bc 	.word	0x0800c0bc
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a2 	beq.w	8003166 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b56      	ldr	r3, [pc, #344]	@ (8003180 <HAL_GPIO_Init+0x510>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a55      	ldr	r2, [pc, #340]	@ (8003180 <HAL_GPIO_Init+0x510>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_GPIO_Init+0x510>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a51      	ldr	r2, [pc, #324]	@ (8003184 <HAL_GPIO_Init+0x514>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a48      	ldr	r2, [pc, #288]	@ (8003188 <HAL_GPIO_Init+0x518>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_Init+0x42e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a47      	ldr	r2, [pc, #284]	@ (800318c <HAL_GPIO_Init+0x51c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0x42a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a46      	ldr	r2, [pc, #280]	@ (8003190 <HAL_GPIO_Init+0x520>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_Init+0x426>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a45      	ldr	r2, [pc, #276]	@ (8003194 <HAL_GPIO_Init+0x524>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_Init+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a44      	ldr	r2, [pc, #272]	@ (8003198 <HAL_GPIO_Init+0x528>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_Init+0x41e>
 800308a:	2304      	movs	r3, #4
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_Init+0x430>
 800308e:	2307      	movs	r3, #7
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x430>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x430>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x430>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x430>
 800309e:	2300      	movs	r3, #0
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b0:	4934      	ldr	r1, [pc, #208]	@ (8003184 <HAL_GPIO_Init+0x514>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b37      	ldr	r3, [pc, #220]	@ (800319c <HAL_GPIO_Init+0x52c>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_GPIO_Init+0x52c>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_GPIO_Init+0x52c>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a23      	ldr	r2, [pc, #140]	@ (800319c <HAL_GPIO_Init+0x52c>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003112:	4b22      	ldr	r3, [pc, #136]	@ (800319c <HAL_GPIO_Init+0x52c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003136:	4a19      	ldr	r2, [pc, #100]	@ (800319c <HAL_GPIO_Init+0x52c>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_GPIO_Init+0x52c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003160:	4a0e      	ldr	r2, [pc, #56]	@ (800319c <HAL_GPIO_Init+0x52c>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	f67f adfe 	bls.w	8002d70 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40013800 	.word	0x40013800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	40020800 	.word	0x40020800
 8003194:	40020c00 	.word	0x40020c00
 8003198:	40021000 	.word	0x40021000
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_GPIO_WritePin+0x20>
 80031b6:	f240 119d 	movw	r1, #413	@ 0x19d
 80031ba:	480e      	ldr	r0, [pc, #56]	@ (80031f4 <HAL_GPIO_WritePin+0x54>)
 80031bc:	f7fd feb6 	bl	8000f2c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_WritePin+0x36>
 80031c6:	787b      	ldrb	r3, [r7, #1]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d004      	beq.n	80031d6 <HAL_GPIO_WritePin+0x36>
 80031cc:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80031d0:	4808      	ldr	r0, [pc, #32]	@ (80031f4 <HAL_GPIO_WritePin+0x54>)
 80031d2:	f7fd feab 	bl	8000f2c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80031d6:	787b      	ldrb	r3, [r7, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031dc:	887a      	ldrh	r2, [r7, #2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e2:	e003      	b.n	80031ec <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0800c0bc 	.word	0x0800c0bc

080031f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e062      	b.n	80032d0 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003212:	d003      	beq.n	800321c <HAL_HCD_Init+0x24>
 8003214:	217b      	movs	r1, #123	@ 0x7b
 8003216:	4830      	ldr	r0, [pc, #192]	@ (80032d8 <HAL_HCD_Init+0xe0>)
 8003218:	f7fd fe88 	bl	8000f2c <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f007 ff6e 	bl	800b118 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324a:	d102      	bne.n	8003252 <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fe25 	bl	8007ea6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7c1a      	ldrb	r2, [r3, #16]
 8003264:	f88d 2000 	strb.w	r2, [sp]
 8003268:	3304      	adds	r3, #4
 800326a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800326c:	f004 fda6 	bl	8007dbc <USB_CoreInit>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e026      	b.n	80032d0 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f004 fe1d 	bl	8007ec8 <USB_SetCurrentMode>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e017      	b.n	80032d0 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7c1a      	ldrb	r2, [r3, #16]
 80032a8:	f88d 2000 	strb.w	r2, [sp]
 80032ac:	3304      	adds	r3, #4
 80032ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b0:	f004 ffc0 	bl	8008234 <USB_HostInit>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e004      	b.n	80032d0 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	0800c0f8 	.word	0x0800c0f8

080032dc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08b      	sub	sp, #44	@ 0x2c
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	70fb      	strb	r3, [r7, #3]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70bb      	strb	r3, [r7, #2]
 80032f2:	4613      	mov	r3, r2
 80032f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80032f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032f8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_HCD_HC_Init+0x2c>
 8003304:	2302      	movs	r3, #2
 8003306:	e09d      	b.n	8003444 <HAL_HCD_HC_Init+0x168>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3319      	adds	r3, #25
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3314      	adds	r3, #20
 8003334:	787a      	ldrb	r2, [r7, #1]
 8003336:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3315      	adds	r3, #21
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3326      	adds	r3, #38	@ 0x26
 800335c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	78bb      	ldrb	r3, [r7, #2]
 8003366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800336a:	b2d8      	uxtb	r0, r3
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3316      	adds	r3, #22
 800337a:	4602      	mov	r2, r0
 800337c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fbc8 	bl	8003b18 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da0a      	bge.n	80033a6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3317      	adds	r3, #23
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e009      	b.n	80033ba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3317      	adds	r3, #23
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 f886 	bl	80084d0 <USB_GetHostSpeed>
 80033c4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80033c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10b      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80033ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2bbc      	cmp	r3, #188	@ 0xbc
 80033e0:	d901      	bls.n	80033e6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80033e2:	23bc      	movs	r3, #188	@ 0xbc
 80033e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3318      	adds	r3, #24
 80033f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80033fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	b298      	uxth	r0, r3
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3328      	adds	r3, #40	@ 0x28
 8003410:	4602      	mov	r2, r0
 8003412:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	b29b      	uxth	r3, r3
 800341c:	787c      	ldrb	r4, [r7, #1]
 800341e:	78ba      	ldrb	r2, [r7, #2]
 8003420:	78f9      	ldrb	r1, [r7, #3]
 8003422:	9302      	str	r3, [sp, #8]
 8003424:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4623      	mov	r3, r4
 8003432:	f005 f875 	bl	8008520 <USB_HC_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_HCD_HC_Halt+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e00f      	b.n	800348a <HAL_HCD_HC_Halt+0x3e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f005 fbbb 	bl	8008bf6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	70fb      	strb	r3, [r7, #3]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70bb      	strb	r3, [r7, #2]
 80034aa:	4613      	mov	r3, r2
 80034ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3317      	adds	r3, #23
 80034be:	78ba      	ldrb	r2, [r7, #2]
 80034c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3326      	adds	r3, #38	@ 0x26
 80034d2:	787a      	ldrb	r2, [r7, #1]
 80034d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80034d6:	7c3b      	ldrb	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d114      	bne.n	8003506 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	332a      	adds	r3, #42	@ 0x2a
 80034ec:	2203      	movs	r2, #3
 80034ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3319      	adds	r3, #25
 8003500:	7f3a      	ldrb	r2, [r7, #28]
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e009      	b.n	800351a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332a      	adds	r3, #42	@ 0x2a
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800351a:	787b      	ldrb	r3, [r7, #1]
 800351c:	2b03      	cmp	r3, #3
 800351e:	f200 8102 	bhi.w	8003726 <HAL_HCD_HC_SubmitRequest+0x292>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	08003711 	.word	0x08003711
 8003530:	080035fd 	.word	0x080035fd
 8003534:	08003687 	.word	0x08003687
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003538:	7c3b      	ldrb	r3, [r7, #16]
 800353a:	2b01      	cmp	r3, #1
 800353c:	f040 80f5 	bne.w	800372a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003540:	78bb      	ldrb	r3, [r7, #2]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12d      	bne.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003546:	8b3b      	ldrh	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	333d      	adds	r3, #61	@ 0x3d
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333d      	adds	r3, #61	@ 0x3d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	332a      	adds	r3, #42	@ 0x2a
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800358a:	e0ce      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	332a      	adds	r3, #42	@ 0x2a
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
      break;
 80035a0:	e0c3      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	331a      	adds	r3, #26
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 80b8 	bne.w	800372a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	@ 0x3c
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	332a      	adds	r3, #42	@ 0x2a
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
      break;
 80035e4:	e0a1      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	332a      	adds	r3, #42	@ 0x2a
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
      break;
 80035fa:	e096      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80035fc:	78bb      	ldrb	r3, [r7, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d120      	bne.n	8003644 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333d      	adds	r3, #61	@ 0x3d
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	332a      	adds	r3, #42	@ 0x2a
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800362c:	e07e      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	332a      	adds	r3, #42	@ 0x2a
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e073      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	333c      	adds	r3, #60	@ 0x3c
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	332a      	adds	r3, #42	@ 0x2a
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
      break;
 800366e:	e05d      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	332a      	adds	r3, #42	@ 0x2a
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]
      break;
 8003684:	e052      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003686:	78bb      	ldrb	r3, [r7, #2]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	333d      	adds	r3, #61	@ 0x3d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	332a      	adds	r3, #42	@ 0x2a
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036b6:	e039      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	332a      	adds	r3, #42	@ 0x2a
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      break;
 80036cc:	e02e      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	333c      	adds	r3, #60	@ 0x3c
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	332a      	adds	r3, #42	@ 0x2a
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
      break;
 80036f8:	e018      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	332a      	adds	r3, #42	@ 0x2a
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	e00d      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	332a      	adds	r3, #42	@ 0x2a
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
      break;
 8003724:	e002      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800372a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	332c      	adds	r3, #44	@ 0x2c
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	8b39      	ldrh	r1, [r7, #24]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4403      	add	r3, r0
 8003750:	3334      	adds	r3, #52	@ 0x34
 8003752:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334c      	adds	r3, #76	@ 0x4c
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3338      	adds	r3, #56	@ 0x38
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3315      	adds	r3, #21
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	334d      	adds	r3, #77	@ 0x4d
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	1d19      	adds	r1, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	461a      	mov	r2, r3
 80037c0:	f004 ffc4 	bl	800874c <USB_HC_StartXfer>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fce4 	bl	80081b4 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 80fb 	bne.w	80039ea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fca7 	bl	800814c <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80f1 	beq.w	80039e8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 fc9e 	bl	800814c <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800381a:	d104      	bne.n	8003826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fc8e 	bl	800814c <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383a:	d104      	bne.n	8003846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f004 fc7e 	bl	800814c <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800385a:	d104      	bne.n	8003866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fc6e 	bl	800814c <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f004 fc60 	bl	800814c <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003896:	d120      	bne.n	80038da <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80038a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80038b2:	2110      	movs	r1, #16
 80038b4:	6938      	ldr	r0, [r7, #16]
 80038b6:	f004 fb53 	bl	8007f60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80038ba:	6938      	ldr	r0, [r7, #16]
 80038bc:	f004 fb82 	bl	8007fc4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7a5b      	ldrb	r3, [r3, #9]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d105      	bne.n	80038d4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fd5e 	bl	8008390 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f007 fc9d 	bl	800b214 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fc34 	bl	800814c <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ee:	d102      	bne.n	80038f6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 fd4d 	bl	8005390 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fc26 	bl	800814c <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d106      	bne.n	8003918 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f007 fc66 	bl	800b1dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fc15 	bl	800814c <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800392c:	d139      	bne.n	80039a2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f005 f94e 	bl	8008bd4 <USB_HC_ReadInterrupt>
 8003938:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e025      	b.n	800398c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396a:	d106      	bne.n	800397a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f905 	bl	8003b82 <HCD_HC_IN_IRQHandler>
 8003978:	e005      	b.n	8003986 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ff67 	bl	8004854 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	795b      	ldrb	r3, [r3, #5]
 8003990:	461a      	mov	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4293      	cmp	r3, r2
 8003996:	d3d3      	bcc.n	8003940 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fbd0 	bl	800814c <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d101      	bne.n	80039ba <HAL_HCD_IRQHandler+0x1ea>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_HCD_IRQHandler+0x1ec>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d014      	beq.n	80039ea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0210 	bic.w	r2, r2, #16
 80039ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 fbfe 	bl	80051d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0210 	orr.w	r2, r2, #16
 80039e4:	619a      	str	r2, [r3, #24]
 80039e6:	e000      	b.n	80039ea <HAL_HCD_IRQHandler+0x21a>
      return;
 80039e8:	bf00      	nop
    }
  }
}
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_HCD_Start+0x16>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e013      	b.n	8003a2e <HAL_HCD_Start+0x3e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fd22 	bl	800845e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fa30 	bl	8007e84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_HCD_Stop+0x16>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e00d      	b.n	8003a68 <HAL_HCD_Stop+0x32>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f005 f9ec 	bl	8008e36 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 fcc4 	bl	800840a <USB_ResetPort>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334c      	adds	r3, #76	@ 0x4c
 8003aa8:	781b      	ldrb	r3, [r3, #0]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3338      	adds	r3, #56	@ 0x38
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f004 fd06 	bl	80084fe <USB_GetCurrentFrame>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fce1 	bl	80084d0 <USB_GetHostSpeed>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	331a      	adds	r3, #26
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	331b      	adds	r3, #27
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3325      	adds	r3, #37	@ 0x25
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3324      	adds	r3, #36	@ 0x24
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 fae6 	bl	8008172 <USB_ReadChInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d11a      	bne.n	8003be6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334d      	adds	r3, #77	@ 0x4d
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f005 f809 	bl	8008bf6 <USB_HC_Halt>
 8003be4:	e09e      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fabf 	bl	8008172 <USB_ReadChInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfe:	d11b      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	@ 0x4d
 8003c24:	2208      	movs	r2, #8
 8003c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 ffe0 	bl	8008bf6 <USB_HC_Halt>
 8003c36:	e075      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 fa96 	bl	8008172 <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d11a      	bne.n	8003c86 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2308      	movs	r3, #8
 8003c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	@ 0x4d
 8003c72:	2206      	movs	r2, #6
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 ffb9 	bl	8008bf6 <USB_HC_Halt>
 8003c84:	e04e      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 fa6f 	bl	8008172 <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d11b      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2209      	movs	r2, #9
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 ff90 	bl	8008bf6 <USB_HC_Halt>
 8003cd6:	e025      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fa46 	bl	8008172 <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b80      	cmp	r3, #128	@ 0x80
 8003cee:	d119      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	@ 0x4d
 8003d12:	2207      	movs	r2, #7
 8003d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 ff69 	bl	8008bf6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 fa20 	bl	8008172 <USB_ReadChInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3c:	d112      	bne.n	8003d64 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 ff55 	bl	8008bf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	f000 bd75 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f004 fa00 	bl	8008172 <USB_ReadChInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 8128 	bne.w	8003fce <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	331b      	adds	r3, #27
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d119      	bne.n	8003dda <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	331b      	adds	r3, #27
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	799b      	ldrb	r3, [r3, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01b      	beq.n	8003e1a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3330      	adds	r3, #48	@ 0x30
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	1ac9      	subs	r1, r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4403      	add	r3, r0
 8003e16:	3338      	adds	r3, #56	@ 0x38
 8003e18:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334d      	adds	r3, #77	@ 0x4d
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3344      	adds	r3, #68	@ 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2301      	movs	r3, #1
 8003e52:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3326      	adds	r3, #38	@ 0x26
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3326      	adds	r3, #38	@ 0x26
 8003e7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d110      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 feb4 	bl	8008bf6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	6093      	str	r3, [r2, #8]
 8003ea0:	e03d      	b.n	8003f1e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3326      	adds	r3, #38	@ 0x26
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d00a      	beq.n	8003ece <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3326      	adds	r3, #38	@ 0x26
 8003ec8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d127      	bne.n	8003f1e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003eec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334c      	adds	r3, #76	@ 0x4c
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	@ 0x4c
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f007 f989 	bl	800b230 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	799b      	ldrb	r3, [r3, #6]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d13b      	bne.n	8003f9e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3338      	adds	r3, #56	@ 0x38
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4403      	add	r3, r0
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	440b      	add	r3, r1
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8470 	beq.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	333c      	adds	r3, #60	@ 0x3c
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2d8      	uxtb	r0, r3
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	333c      	adds	r3, #60	@ 0x3c
 8003f96:	4602      	mov	r2, r0
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	f000 bc58 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	333c      	adds	r3, #60	@ 0x3c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	f083 0301 	eor.w	r3, r3, #1
 8003fb6:	b2d8      	uxtb	r0, r3
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	333c      	adds	r3, #60	@ 0x3c
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	f000 bc40 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 f8cb 	bl	8008172 <USB_ReadChInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d131      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	331a      	adds	r3, #26
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 841f 	bne.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	331b      	adds	r3, #27
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	334d      	adds	r3, #77	@ 0x4d
 8004034:	2203      	movs	r2, #3
 8004036:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fdd8 	bl	8008bf6 <USB_HC_Halt>
 8004046:	f000 bc02 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f004 f88d 	bl	8008172 <USB_ReadChInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	f040 8305 	bne.w	800466e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2302      	movs	r3, #2
 8004074:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	334d      	adds	r3, #77	@ 0x4d
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d114      	bne.n	80040b6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334c      	adds	r3, #76	@ 0x4c
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e2cc      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	@ 0x4d
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d114      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2202      	movs	r2, #2
 80040de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	334c      	adds	r3, #76	@ 0x4c
 80040f0:	2205      	movs	r2, #5
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e2ac      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	334d      	adds	r3, #77	@ 0x4d
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d00b      	beq.n	8004124 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	334d      	adds	r3, #77	@ 0x4d
 800411c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800411e:	2b09      	cmp	r3, #9
 8004120:	f040 80a6 	bne.w	8004270 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334d      	adds	r3, #77	@ 0x4d
 8004134:	2202      	movs	r2, #2
 8004136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3344      	adds	r3, #68	@ 0x44
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4403      	add	r3, r0
 8004158:	3344      	adds	r3, #68	@ 0x44
 800415a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3344      	adds	r3, #68	@ 0x44
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d943      	bls.n	80041fa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3344      	adds	r3, #68	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	331a      	adds	r3, #26
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d123      	bne.n	80041e4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	331b      	adds	r3, #27
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	331c      	adds	r3, #28
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334c      	adds	r3, #76	@ 0x4c
 80041f4:	2204      	movs	r2, #4
 80041f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041f8:	e229      	b.n	800464e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	334c      	adds	r3, #76	@ 0x4c
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3326      	adds	r3, #38	@ 0x26
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3326      	adds	r3, #38	@ 0x26
 8004234:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004236:	2b02      	cmp	r3, #2
 8004238:	f040 8209 	bne.w	800464e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004252:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800426e:	e1ee      	b.n	800464e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334d      	adds	r3, #77	@ 0x4d
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b05      	cmp	r3, #5
 8004284:	f040 80c8 	bne.w	8004418 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334d      	adds	r3, #77	@ 0x4d
 8004298:	2202      	movs	r2, #2
 800429a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	331b      	adds	r3, #27
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 81ce 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3326      	adds	r3, #38	@ 0x26
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d16b      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3348      	adds	r3, #72	@ 0x48
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	1c59      	adds	r1, r3, #1
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	3348      	adds	r3, #72	@ 0x48
 80042ec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3348      	adds	r3, #72	@ 0x48
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d943      	bls.n	800438c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	3348      	adds	r3, #72	@ 0x48
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	331b      	adds	r3, #27
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3344      	adds	r3, #68	@ 0x44
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d809      	bhi.n	8004356 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	331c      	adds	r3, #28
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	440a      	add	r2, r1
 800436c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004374:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	334c      	adds	r3, #76	@ 0x4c
 8004386:	2204      	movs	r2, #4
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e014      	b.n	80043b6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334c      	adds	r3, #76	@ 0x4c
 800439c:	2202      	movs	r2, #2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e009      	b.n	80043b6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	334c      	adds	r3, #76	@ 0x4c
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3326      	adds	r3, #38	@ 0x26
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	3326      	adds	r3, #38	@ 0x26
 80043dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043de:	2b02      	cmp	r3, #2
 80043e0:	f040 8136 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004402:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e11b      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b03      	cmp	r3, #3
 800442c:	f040 8081 	bne.w	8004532 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	@ 0x4d
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	331b      	adds	r3, #27
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 80fa 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	334c      	adds	r3, #76	@ 0x4c
 800446c:	2202      	movs	r2, #2
 800446e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	440a      	add	r2, r1
 8004486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800448a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044ca:	f023 0320 	bic.w	r3, r3, #32
 80044ce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3326      	adds	r3, #38	@ 0x26
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3326      	adds	r3, #38	@ 0x26
 80044f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f040 80a9 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004514:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e08e      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334d      	adds	r3, #77	@ 0x4d
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d143      	bne.n	80045d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	@ 0x4d
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334c      	adds	r3, #76	@ 0x4c
 800456c:	2202      	movs	r2, #2
 800456e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3326      	adds	r3, #38	@ 0x26
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	3326      	adds	r3, #38	@ 0x26
 8004596:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004598:	2b02      	cmp	r3, #2
 800459a:	d159      	bne.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c8:	461a      	mov	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e03f      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	@ 0x4d
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d126      	bne.n	8004634 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	334d      	adds	r3, #77	@ 0x4d
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3344      	adds	r3, #68	@ 0x44
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	3344      	adds	r3, #68	@ 0x44
 800461c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	334c      	adds	r3, #76	@ 0x4c
 800462e:	2204      	movs	r2, #4
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e00d      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	f000 8100 	beq.w	800484c <HCD_HC_IN_IRQHandler+0xcca>
 800464c:	e000      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800464e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	@ 0x4c
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f006 fde2 	bl	800b230 <HAL_HCD_HC_NotifyURBChange_Callback>
 800466c:	e0ef      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f003 fd7b 	bl	8008172 <USB_ReadChInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d12f      	bne.n	80046e6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004692:	461a      	mov	r2, r3
 8004694:	2340      	movs	r3, #64	@ 0x40
 8004696:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334d      	adds	r3, #77	@ 0x4d
 80046a8:	2205      	movs	r2, #5
 80046aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	331a      	adds	r3, #26
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	@ 0x44
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 fa89 	bl	8008bf6 <USB_HC_Halt>
 80046e4:	e0b3      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 fd3f 	bl	8008172 <USB_ReadChInterrupts>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	f040 80a7 	bne.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3326      	adds	r3, #38	@ 0x26
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d11b      	bne.n	800474e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3344      	adds	r3, #68	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	334d      	adds	r3, #77	@ 0x4d
 800473a:	2204      	movs	r2, #4
 800473c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f004 fa55 	bl	8008bf6 <USB_HC_Halt>
 800474c:	e03f      	b.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3326      	adds	r3, #38	@ 0x26
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3326      	adds	r3, #38	@ 0x26
 8004774:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004776:	2b02      	cmp	r3, #2
 8004778:	d129      	bne.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	@ 0x44
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	799b      	ldrb	r3, [r3, #6]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HCD_HC_IN_IRQHandler+0xc2a>
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	331b      	adds	r3, #27
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d110      	bne.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	334d      	adds	r3, #77	@ 0x4d
 80047bc:	2204      	movs	r2, #4
 80047be:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f004 fa14 	bl	8008bf6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	331b      	adds	r3, #27
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d129      	bne.n	8004838 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	331b      	adds	r3, #27
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004816:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	2310      	movs	r3, #16
 8004848:	6093      	str	r3, [r2, #8]
 800484a:	e000      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800484c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f003 fc7d 	bl	8008172 <USB_ReadChInterrupts>
 8004878:	4603      	mov	r3, r0
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d11b      	bne.n	80048ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800488e:	461a      	mov	r2, r3
 8004890:	2304      	movs	r3, #4
 8004892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334d      	adds	r3, #77	@ 0x4d
 80048a4:	2207      	movs	r2, #7
 80048a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f004 f9a0 	bl	8008bf6 <USB_HC_Halt>
 80048b6:	f000 bc89 	b.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f003 fc55 	bl	8008172 <USB_ReadChInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 8082 	bne.w	80049d8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e0:	461a      	mov	r2, r3
 80048e2:	2320      	movs	r3, #32
 80048e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3319      	adds	r3, #25
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d124      	bne.n	8004946 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3319      	adds	r3, #25
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	334c      	adds	r3, #76	@ 0x4c
 8004920:	2202      	movs	r2, #2
 8004922:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	334d      	adds	r3, #77	@ 0x4d
 8004934:	2203      	movs	r2, #3
 8004936:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f004 f958 	bl	8008bf6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	331a      	adds	r3, #26
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 8437 	bne.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	331b      	adds	r3, #27
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 842b 	bne.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3326      	adds	r3, #38	@ 0x26
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d009      	beq.n	80049a0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	331b      	adds	r3, #27
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	334d      	adds	r3, #77	@ 0x4d
 80049b0:	2203      	movs	r2, #3
 80049b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 f91a 	bl	8008bf6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3344      	adds	r3, #68	@ 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e3f9      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f003 fbc6 	bl	8008172 <USB_ReadChInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d111      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f004 f8f1 	bl	8008bf6 <USB_HC_Halt>
 8004a14:	e3da      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f003 fba7 	bl	8008172 <USB_ReadChInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d168      	bne.n	8004b00 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3344      	adds	r3, #68	@ 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fb91 	bl	8008172 <USB_ReadChInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d112      	bne.n	8004a80 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3319      	adds	r3, #25
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2340      	movs	r3, #64	@ 0x40
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	331b      	adds	r3, #27
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	331b      	adds	r3, #27
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2301      	movs	r3, #1
 8004ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	334d      	adds	r3, #77	@ 0x4d
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 f87c 	bl	8008bf6 <USB_HC_Halt>
 8004afe:	e365      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 fb32 	bl	8008172 <USB_ReadChInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d139      	bne.n	8004b8c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334d      	adds	r3, #77	@ 0x4d
 8004b28:	2205      	movs	r2, #5
 8004b2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	331a      	adds	r3, #26
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3319      	adds	r3, #25
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3344      	adds	r3, #68	@ 0x44
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 f83f 	bl	8008bf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b84:	461a      	mov	r2, r3
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	e31f      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f003 faec 	bl	8008172 <USB_ReadChInterrupts>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d11a      	bne.n	8004bda <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	334d      	adds	r3, #77	@ 0x4d
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f004 f80f 	bl	8008bf6 <USB_HC_Halt>
 8004bd8:	e2f8      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f003 fac5 	bl	8008172 <USB_ReadChInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d144      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3344      	adds	r3, #68	@ 0x44
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	334d      	adds	r3, #77	@ 0x4d
 8004c16:	2204      	movs	r2, #4
 8004c18:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3319      	adds	r3, #25
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d114      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3318      	adds	r3, #24
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3319      	adds	r3, #25
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 ffc7 	bl	8008bf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c74:	461a      	mov	r2, r3
 8004c76:	2310      	movs	r3, #16
 8004c78:	6093      	str	r3, [r2, #8]
 8004c7a:	e2a7      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f003 fa74 	bl	8008172 <USB_ReadChInterrupts>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c90:	2b80      	cmp	r3, #128	@ 0x80
 8004c92:	f040 8083 	bne.w	8004d9c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334d      	adds	r3, #77	@ 0x4d
 8004cae:	2207      	movs	r2, #7
 8004cb0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 ff9b 	bl	8008bf6 <USB_HC_Halt>
 8004cc0:	e062      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3344      	adds	r3, #68	@ 0x44
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4403      	add	r3, r0
 8004ce2:	3344      	adds	r3, #68	@ 0x44
 8004ce4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3344      	adds	r3, #68	@ 0x44
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d922      	bls.n	8004d42 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3344      	adds	r3, #68	@ 0x44
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334c      	adds	r3, #76	@ 0x4c
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	334c      	adds	r3, #76	@ 0x4c
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f006 fa78 	bl	800b230 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d40:	e022      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	334c      	adds	r3, #76	@ 0x4c
 8004d52:	2202      	movs	r2, #2
 8004d54:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d94:	461a      	mov	r2, r3
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	e217      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f003 f9e4 	bl	8008172 <USB_ReadChInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db4:	d11b      	bne.n	8004dee <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	334d      	adds	r3, #77	@ 0x4d
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 ff0f 	bl	8008bf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de4:	461a      	mov	r2, r3
 8004de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dea:	6093      	str	r3, [r2, #8]
 8004dec:	e1ee      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 f9bb 	bl	8008172 <USB_ReadChInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	f040 81df 	bne.w	80051c6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e14:	461a      	mov	r2, r3
 8004e16:	2302      	movs	r3, #2
 8004e18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	334d      	adds	r3, #77	@ 0x4d
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 8093 	bne.w	8004f58 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	334d      	adds	r3, #77	@ 0x4d
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	334c      	adds	r3, #76	@ 0x4c
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3326      	adds	r3, #38	@ 0x26
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d00b      	beq.n	8004e88 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3326      	adds	r3, #38	@ 0x26
 8004e80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	f040 8190 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	799b      	ldrb	r3, [r3, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d115      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	333d      	adds	r3, #61	@ 0x3d
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2d8      	uxtb	r0, r3
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	333d      	adds	r3, #61	@ 0x3d
 8004eb8:	4602      	mov	r2, r0
 8004eba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	799b      	ldrb	r3, [r3, #6]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 8171 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3334      	adds	r3, #52	@ 0x34
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8165 	beq.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3334      	adds	r3, #52	@ 0x34
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4403      	add	r3, r0
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	440b      	add	r3, r1
 8004f04:	1e59      	subs	r1, r3, #1
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4403      	add	r3, r0
 8004f14:	3328      	adds	r3, #40	@ 0x28
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 813f 	beq.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	333d      	adds	r3, #61	@ 0x3d
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	f083 0301 	eor.w	r3, r3, #1
 8004f42:	b2d8      	uxtb	r0, r3
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	333d      	adds	r3, #61	@ 0x3d
 8004f52:	4602      	mov	r2, r0
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e127      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	334d      	adds	r3, #77	@ 0x4d
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d120      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	334d      	adds	r3, #77	@ 0x4d
 8004f7e:	2202      	movs	r2, #2
 8004f80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	331b      	adds	r3, #27
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 8107 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	334c      	adds	r3, #76	@ 0x4c
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e0fb      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334d      	adds	r3, #77	@ 0x4d
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d13a      	bne.n	800503c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	334d      	adds	r3, #77	@ 0x4d
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334c      	adds	r3, #76	@ 0x4c
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	331b      	adds	r3, #27
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	f040 80d1 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	331b      	adds	r3, #27
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005038:	6053      	str	r3, [r2, #4]
 800503a:	e0b5      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	334d      	adds	r3, #77	@ 0x4d
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d114      	bne.n	800507c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334d      	adds	r3, #77	@ 0x4d
 8005062:	2202      	movs	r2, #2
 8005064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	334c      	adds	r3, #76	@ 0x4c
 8005076:	2202      	movs	r2, #2
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e095      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	334d      	adds	r3, #77	@ 0x4d
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d114      	bne.n	80050bc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	334d      	adds	r3, #77	@ 0x4d
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	334c      	adds	r3, #76	@ 0x4c
 80050b6:	2205      	movs	r2, #5
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e075      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	334d      	adds	r3, #77	@ 0x4d
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d00a      	beq.n	80050e8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	334d      	adds	r3, #77	@ 0x4d
 80050e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d170      	bne.n	80051ca <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334d      	adds	r3, #77	@ 0x4d
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3344      	adds	r3, #68	@ 0x44
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4403      	add	r3, r0
 800511c:	3344      	adds	r3, #68	@ 0x44
 800511e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	3344      	adds	r3, #68	@ 0x44
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d914      	bls.n	8005160 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3344      	adds	r3, #68	@ 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	334c      	adds	r3, #76	@ 0x4c
 800515a:	2204      	movs	r2, #4
 800515c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800515e:	e022      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	334c      	adds	r3, #76	@ 0x4c
 8005170:	2202      	movs	r2, #2
 8005172:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800518a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005192:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a0:	461a      	mov	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	334c      	adds	r3, #76	@ 0x4c
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f006 f836 	bl	800b230 <HAL_HCD_HC_NotifyURBChange_Callback>
 80051c4:	e002      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80051ca:	bf00      	nop
  }
}
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b08a      	sub	sp, #40	@ 0x28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	0c5b      	lsrs	r3, r3, #17
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005206:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d004      	beq.n	8005218 <HCD_RXQLVL_IRQHandler+0x46>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b05      	cmp	r3, #5
 8005212:	f000 80b6 	beq.w	8005382 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005216:	e0b7      	b.n	8005388 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80b3 	beq.w	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	332c      	adds	r3, #44	@ 0x2c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a7 	beq.w	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3338      	adds	r3, #56	@ 0x38
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	18d1      	adds	r1, r2, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4403      	add	r3, r0
 800525c:	3334      	adds	r3, #52	@ 0x34
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4299      	cmp	r1, r3
 8005262:	f200 8083 	bhi.w	800536c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	332c      	adds	r3, #44	@ 0x2c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	b292      	uxth	r2, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f002 ff0b 	bl	800809c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	332c      	adds	r3, #44	@ 0x2c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	18d1      	adds	r1, r2, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4403      	add	r3, r0
 80052aa:	332c      	adds	r3, #44	@ 0x2c
 80052ac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3338      	adds	r3, #56	@ 0x38
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	18d1      	adds	r1, r2, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4403      	add	r3, r0
 80052d2:	3338      	adds	r3, #56	@ 0x38
 80052d4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	0cdb      	lsrs	r3, r3, #19
 80052e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3328      	adds	r3, #40	@ 0x28
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4293      	cmp	r3, r2
 8005304:	d13f      	bne.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03c      	beq.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005322:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800532a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	333c      	adds	r3, #60	@ 0x3c
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f083 0301 	eor.w	r3, r3, #1
 8005354:	b2d8      	uxtb	r0, r3
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	333c      	adds	r3, #60	@ 0x3c
 8005366:	4602      	mov	r2, r0
 8005368:	701a      	strb	r2, [r3, #0]
      break;
 800536a:	e00c      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4613      	mov	r3, r2
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	334c      	adds	r3, #76	@ 0x4c
 800537c:	2204      	movs	r2, #4
 800537e:	701a      	strb	r2, [r3, #0]
      break;
 8005380:	e001      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005386:	bf00      	nop
  }
}
 8005388:	bf00      	nop
 800538a:	3728      	adds	r7, #40	@ 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80053bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d10b      	bne.n	80053e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f005 ff10 	bl	800b1f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d132      	bne.n	8005450 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f043 0308 	orr.w	r3, r3, #8
 80053f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d126      	bne.n	800544a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7a5b      	ldrb	r3, [r3, #9]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d113      	bne.n	800542c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800540a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800540e:	d106      	bne.n	800541e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2102      	movs	r1, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f002 ffba 	bl	8008390 <USB_InitFSLSPClkSel>
 800541c:	e011      	b.n	8005442 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f002 ffb3 	bl	8008390 <USB_InitFSLSPClkSel>
 800542a:	e00a      	b.n	8005442 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	79db      	ldrb	r3, [r3, #7]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d106      	bne.n	8005442 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543a:	461a      	mov	r2, r3
 800543c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005440:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f005 ff02 	bl	800b24c <HAL_HCD_PortEnabled_Callback>
 8005448:	e002      	b.n	8005450 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f005 ff0c 	bl	800b268 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d103      	bne.n	8005462 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1ba      	b.n	8005800 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a9d      	ldr	r2, [pc, #628]	@ (8005704 <HAL_I2C_Init+0x28c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_I2C_Init+0x3a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a9b      	ldr	r2, [pc, #620]	@ (8005708 <HAL_I2C_Init+0x290>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_I2C_Init+0x3a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a9a      	ldr	r2, [pc, #616]	@ (800570c <HAL_I2C_Init+0x294>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_I2C_Init+0x3a>
 80054a8:	f240 11c9 	movw	r1, #457	@ 0x1c9
 80054ac:	4898      	ldr	r0, [pc, #608]	@ (8005710 <HAL_I2C_Init+0x298>)
 80054ae:	f7fb fd3d 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <HAL_I2C_Init+0x4c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4a95      	ldr	r2, [pc, #596]	@ (8005714 <HAL_I2C_Init+0x29c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d904      	bls.n	80054ce <HAL_I2C_Init+0x56>
 80054c4:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 80054c8:	4891      	ldr	r0, [pc, #580]	@ (8005710 <HAL_I2C_Init+0x298>)
 80054ca:	f7fb fd2f 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_I2C_Init+0x72>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054de:	d004      	beq.n	80054ea <HAL_I2C_Init+0x72>
 80054e0:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80054e4:	488a      	ldr	r0, [pc, #552]	@ (8005710 <HAL_I2C_Init+0x298>)
 80054e6:	f7fb fd21 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f2:	d304      	bcc.n	80054fe <HAL_I2C_Init+0x86>
 80054f4:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80054f8:	4885      	ldr	r0, [pc, #532]	@ (8005710 <HAL_I2C_Init+0x298>)
 80054fa:	f7fb fd17 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005506:	d009      	beq.n	800551c <HAL_I2C_Init+0xa4>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005510:	d004      	beq.n	800551c <HAL_I2C_Init+0xa4>
 8005512:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8005516:	487e      	ldr	r0, [pc, #504]	@ (8005710 <HAL_I2C_Init+0x298>)
 8005518:	f7fb fd08 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_I2C_Init+0xbe>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d004      	beq.n	8005536 <HAL_I2C_Init+0xbe>
 800552c:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8005530:	4877      	ldr	r0, [pc, #476]	@ (8005710 <HAL_I2C_Init+0x298>)
 8005532:	f7fb fcfb 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <HAL_I2C_Init+0xd4>
 8005542:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8005546:	4872      	ldr	r0, [pc, #456]	@ (8005710 <HAL_I2C_Init+0x298>)
 8005548:	f7fb fcf0 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_I2C_Init+0xee>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	2b40      	cmp	r3, #64	@ 0x40
 800555a:	d004      	beq.n	8005566 <HAL_I2C_Init+0xee>
 800555c:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8005560:	486b      	ldr	r0, [pc, #428]	@ (8005710 <HAL_I2C_Init+0x298>)
 8005562:	f7fb fce3 	bl	8000f2c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <HAL_I2C_Init+0x108>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	2b80      	cmp	r3, #128	@ 0x80
 8005574:	d004      	beq.n	8005580 <HAL_I2C_Init+0x108>
 8005576:	f240 11d1 	movw	r1, #465	@ 0x1d1
 800557a:	4865      	ldr	r0, [pc, #404]	@ (8005710 <HAL_I2C_Init+0x298>)
 800557c:	f7fb fcd6 	bl	8000f2c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fb f9a5 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	@ 0x24
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055c0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055d0:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055d2:	f001 fc43 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 80055d6:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a4e      	ldr	r2, [pc, #312]	@ (8005718 <HAL_I2C_Init+0x2a0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d807      	bhi.n	80055f2 <HAL_I2C_Init+0x17a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a4d      	ldr	r2, [pc, #308]	@ (800571c <HAL_I2C_Init+0x2a4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	bf94      	ite	ls
 80055ea:	2301      	movls	r3, #1
 80055ec:	2300      	movhi	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e006      	b.n	8005600 <HAL_I2C_Init+0x188>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005720 <HAL_I2C_Init+0x2a8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bf94      	ite	ls
 80055fa:	2301      	movls	r3, #1
 80055fc:	2300      	movhi	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0fb      	b.n	8005800 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <HAL_I2C_Init+0x2ac>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a38      	ldr	r2, [pc, #224]	@ (8005718 <HAL_I2C_Init+0x2a0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d802      	bhi.n	8005642 <HAL_I2C_Init+0x1ca>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	3301      	adds	r3, #1
 8005640:	e009      	b.n	8005656 <HAL_I2C_Init+0x1de>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	4a36      	ldr	r2, [pc, #216]	@ (8005728 <HAL_I2C_Init+0x2b0>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	099b      	lsrs	r3, r3, #6
 8005654:	3301      	adds	r3, #1
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	430b      	orrs	r3, r1
 800565c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005668:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4929      	ldr	r1, [pc, #164]	@ (8005718 <HAL_I2C_Init+0x2a0>)
 8005672:	428b      	cmp	r3, r1
 8005674:	d819      	bhi.n	80056aa <HAL_I2C_Init+0x232>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e59      	subs	r1, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fbb1 f3f3 	udiv	r3, r1, r3
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800568a:	400b      	ands	r3, r1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_I2C_Init+0x22e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1e59      	subs	r1, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	fbb1 f3f3 	udiv	r3, r1, r3
 800569e:	3301      	adds	r3, #1
 80056a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a4:	e065      	b.n	8005772 <HAL_I2C_Init+0x2fa>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e063      	b.n	8005772 <HAL_I2C_Init+0x2fa>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d111      	bne.n	80056d6 <HAL_I2C_Init+0x25e>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1e58      	subs	r0, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	440b      	add	r3, r1
 80056c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c4:	3301      	adds	r3, #1
 80056c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e012      	b.n	80056fc <HAL_I2C_Init+0x284>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1e58      	subs	r0, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	0099      	lsls	r1, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ec:	3301      	adds	r3, #1
 80056ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_I2C_Init+0x2b4>
 8005700:	2301      	movs	r3, #1
 8005702:	e036      	b.n	8005772 <HAL_I2C_Init+0x2fa>
 8005704:	40005400 	.word	0x40005400
 8005708:	40005800 	.word	0x40005800
 800570c:	40005c00 	.word	0x40005c00
 8005710:	0800c130 	.word	0x0800c130
 8005714:	00061a80 	.word	0x00061a80
 8005718:	000186a0 	.word	0x000186a0
 800571c:	001e847f 	.word	0x001e847f
 8005720:	003d08ff 	.word	0x003d08ff
 8005724:	431bde83 	.word	0x431bde83
 8005728:	10624dd3 	.word	0x10624dd3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10e      	bne.n	8005752 <HAL_I2C_Init+0x2da>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1e58      	subs	r0, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	440b      	add	r3, r1
 8005742:	fbb0 f3f3 	udiv	r3, r0, r3
 8005746:	3301      	adds	r3, #1
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005750:	e00f      	b.n	8005772 <HAL_I2C_Init+0x2fa>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1e58      	subs	r0, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	0099      	lsls	r1, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	fbb0 f3f3 	udiv	r3, r0, r3
 8005768:	3301      	adds	r3, #1
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	6809      	ldr	r1, [r1, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80057a0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6911      	ldr	r1, [r2, #16]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68d2      	ldr	r2, [r2, #12]
 80057ac:	4311      	orrs	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	430b      	orrs	r3, r1
 80057b4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e1e7      	b.n	8005bea <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a92      	ldr	r2, [pc, #584]	@ (8005a68 <HAL_I2S_Init+0x260>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_I2S_Init+0x4e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a90      	ldr	r2, [pc, #576]	@ (8005a6c <HAL_I2S_Init+0x264>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_I2S_Init+0x4e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a8f      	ldr	r2, [pc, #572]	@ (8005a70 <HAL_I2S_Init+0x268>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_I2S_Init+0x4e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a8d      	ldr	r2, [pc, #564]	@ (8005a74 <HAL_I2S_Init+0x26c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_I2S_Init+0x4e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a8c      	ldr	r2, [pc, #560]	@ (8005a78 <HAL_I2S_Init+0x270>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_I2S_Init+0x4e>
 800584c:	f240 111b 	movw	r1, #283	@ 0x11b
 8005850:	488a      	ldr	r0, [pc, #552]	@ (8005a7c <HAL_I2S_Init+0x274>)
 8005852:	f7fb fb6b 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <HAL_I2S_Init+0x7e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	d00e      	beq.n	8005886 <HAL_I2S_Init+0x7e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005870:	d009      	beq.n	8005886 <HAL_I2S_Init+0x7e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587a:	d004      	beq.n	8005886 <HAL_I2S_Init+0x7e>
 800587c:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8005880:	487e      	ldr	r0, [pc, #504]	@ (8005a7c <HAL_I2S_Init+0x274>)
 8005882:	f7fb fb53 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <HAL_I2S_Init+0xb0>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b10      	cmp	r3, #16
 8005894:	d010      	beq.n	80058b8 <HAL_I2S_Init+0xb0>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b20      	cmp	r3, #32
 800589c:	d00c      	beq.n	80058b8 <HAL_I2S_Init+0xb0>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b30      	cmp	r3, #48	@ 0x30
 80058a4:	d008      	beq.n	80058b8 <HAL_I2S_Init+0xb0>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2bb0      	cmp	r3, #176	@ 0xb0
 80058ac:	d004      	beq.n	80058b8 <HAL_I2S_Init+0xb0>
 80058ae:	f240 111d 	movw	r1, #285	@ 0x11d
 80058b2:	4872      	ldr	r0, [pc, #456]	@ (8005a7c <HAL_I2S_Init+0x274>)
 80058b4:	f7fb fb3a 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <HAL_I2S_Init+0xda>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d00c      	beq.n	80058e2 <HAL_I2S_Init+0xda>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d008      	beq.n	80058e2 <HAL_I2S_Init+0xda>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d004      	beq.n	80058e2 <HAL_I2S_Init+0xda>
 80058d8:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80058dc:	4867      	ldr	r0, [pc, #412]	@ (8005a7c <HAL_I2S_Init+0x274>)
 80058de:	f7fb fb25 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ea:	d008      	beq.n	80058fe <HAL_I2S_Init+0xf6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_I2S_Init+0xf6>
 80058f4:	f240 111f 	movw	r1, #287	@ 0x11f
 80058f8:	4860      	ldr	r0, [pc, #384]	@ (8005a7c <HAL_I2S_Init+0x274>)
 80058fa:	f7fb fb17 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8005906:	d304      	bcc.n	8005912 <HAL_I2S_Init+0x10a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	4a5c      	ldr	r2, [pc, #368]	@ (8005a80 <HAL_I2S_Init+0x278>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d908      	bls.n	8005924 <HAL_I2S_Init+0x11c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d004      	beq.n	8005924 <HAL_I2S_Init+0x11c>
 800591a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800591e:	4857      	ldr	r0, [pc, #348]	@ (8005a7c <HAL_I2S_Init+0x274>)
 8005920:	f7fb fb04 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_I2S_Init+0x136>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d004      	beq.n	800593e <HAL_I2S_Init+0x136>
 8005934:	f240 1121 	movw	r1, #289	@ 0x121
 8005938:	4850      	ldr	r0, [pc, #320]	@ (8005a7c <HAL_I2S_Init+0x274>)
 800593a:	f7fb faf7 	bl	8000f2c <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d008      	beq.n	8005958 <HAL_I2S_Init+0x150>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <HAL_I2S_Init+0x150>
 800594e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8005952:	484a      	ldr	r0, [pc, #296]	@ (8005a7c <HAL_I2S_Init+0x274>)
 8005954:	f7fb faea 	bl	8000f2c <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a45      	ldr	r2, [pc, #276]	@ (8005a84 <HAL_I2S_Init+0x27c>)
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb f85c 	bl	8000a30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800598e:	f023 030f 	bic.w	r3, r3, #15
 8005992:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2202      	movs	r2, #2
 800599a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d073      	beq.n	8005a8c <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059ac:	2310      	movs	r3, #16
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e001      	b.n	80059b6 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80059b2:	2320      	movs	r3, #32
 80059b4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d802      	bhi.n	80059c4 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059c4:	2001      	movs	r0, #1
 80059c6:	f001 fc87 	bl	80072d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80059ca:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d4:	d125      	bne.n	8005a22 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	3305      	adds	r3, #5
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e01f      	b.n	8005a40 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	3305      	adds	r3, #5
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e00e      	b.n	8005a40 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	3305      	adds	r3, #5
 8005a3e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4a11      	ldr	r2, [pc, #68]	@ (8005a88 <HAL_I2S_Init+0x280>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	08db      	lsrs	r3, r3, #3
 8005a4a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e016      	b.n	8005a94 <HAL_I2S_Init+0x28c>
 8005a66:	bf00      	nop
 8005a68:	40013000 	.word	0x40013000
 8005a6c:	40003800 	.word	0x40003800
 8005a70:	40003c00 	.word	0x40003c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40015000 	.word	0x40015000
 8005a7c:	0800c168 	.word	0x0800c168
 8005a80:	0002ee00 	.word	0x0002ee00
 8005a84:	08005cfb 	.word	0x08005cfb
 8005a88:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d902      	bls.n	8005aa0 <HAL_I2S_Init+0x298>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2bff      	cmp	r3, #255	@ 0xff
 8005a9e:	d907      	bls.n	8005ab0 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	f043 0210 	orr.w	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e09c      	b.n	8005bea <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	ea42 0103 	orr.w	r1, r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ace:	f023 030f 	bic.w	r3, r3, #15
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6851      	ldr	r1, [r2, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	4311      	orrs	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68d2      	ldr	r2, [r2, #12]
 8005ae0:	4311      	orrs	r1, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6992      	ldr	r2, [r2, #24]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_I2S_Init+0x306>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d004      	beq.n	8005b0e <HAL_I2S_Init+0x306>
 8005b04:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005b08:	483a      	ldr	r0, [pc, #232]	@ (8005bf4 <HAL_I2S_Init+0x3ec>)
 8005b0a:	f7fb fa0f 	bl	8000f2c <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d161      	bne.n	8005bda <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a37      	ldr	r2, [pc, #220]	@ (8005bf8 <HAL_I2S_Init+0x3f0>)
 8005b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a36      	ldr	r2, [pc, #216]	@ (8005bfc <HAL_I2S_Init+0x3f4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_I2S_Init+0x322>
 8005b26:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <HAL_I2S_Init+0x3f8>)
 8005b28:	e001      	b.n	8005b2e <HAL_I2S_Init+0x326>
 8005b2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	4931      	ldr	r1, [pc, #196]	@ (8005bfc <HAL_I2S_Init+0x3f4>)
 8005b36:	428a      	cmp	r2, r1
 8005b38:	d101      	bne.n	8005b3e <HAL_I2S_Init+0x336>
 8005b3a:	4a31      	ldr	r2, [pc, #196]	@ (8005c00 <HAL_I2S_Init+0x3f8>)
 8005b3c:	e001      	b.n	8005b42 <HAL_I2S_Init+0x33a>
 8005b3e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005b42:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b46:	f023 030f 	bic.w	r3, r3, #15
 8005b4a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	@ (8005bfc <HAL_I2S_Init+0x3f4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <HAL_I2S_Init+0x352>
 8005b56:	4b2a      	ldr	r3, [pc, #168]	@ (8005c00 <HAL_I2S_Init+0x3f8>)
 8005b58:	e001      	b.n	8005b5e <HAL_I2S_Init+0x356>
 8005b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b5e:	2202      	movs	r2, #2
 8005b60:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a25      	ldr	r2, [pc, #148]	@ (8005bfc <HAL_I2S_Init+0x3f4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2S_Init+0x368>
 8005b6c:	4b24      	ldr	r3, [pc, #144]	@ (8005c00 <HAL_I2S_Init+0x3f8>)
 8005b6e:	e001      	b.n	8005b74 <HAL_I2S_Init+0x36c>
 8005b70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b80:	d003      	beq.n	8005b8a <HAL_I2S_Init+0x382>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	e001      	b.n	8005b96 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	897b      	ldrh	r3, [r7, #10]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005bc2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005bfc <HAL_I2S_Init+0x3f4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2S_Init+0x3ca>
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <HAL_I2S_Init+0x3f8>)
 8005bd0:	e001      	b.n	8005bd6 <HAL_I2S_Init+0x3ce>
 8005bd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bd6:	897a      	ldrh	r2, [r7, #10]
 8005bd8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	0800c168 	.word	0x0800c168
 8005bf8:	08005e11 	.word	0x08005e11
 8005bfc:	40003800 	.word	0x40003800
 8005c00:	40003400 	.word	0x40003400

08005c04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	881a      	ldrh	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10e      	bne.n	8005c94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ffb8 	bl	8005c04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10e      	bne.n	8005cf2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ce2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff93 	bl	8005c18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d13a      	bne.n	8005d8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d109      	bne.n	8005d34 <I2S_IRQHandler+0x3a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2a:	2b40      	cmp	r3, #64	@ 0x40
 8005d2c:	d102      	bne.n	8005d34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ffb4 	bl	8005c9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3a:	2b40      	cmp	r3, #64	@ 0x40
 8005d3c:	d126      	bne.n	8005d8c <I2S_IRQHandler+0x92>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d11f      	bne.n	8005d8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff50 	bl	8005c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d136      	bne.n	8005e06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d109      	bne.n	8005db6 <I2S_IRQHandler+0xbc>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dac:	2b80      	cmp	r3, #128	@ 0x80
 8005dae:	d102      	bne.n	8005db6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff45 	bl	8005c40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d122      	bne.n	8005e06 <I2S_IRQHandler+0x10c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d11b      	bne.n	8005e06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ddc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	f043 0204 	orr.w	r2, r3, #4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff13 	bl	8005c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a92      	ldr	r2, [pc, #584]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e2a:	4b92      	ldr	r3, [pc, #584]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e2c:	e001      	b.n	8005e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a8b      	ldr	r2, [pc, #556]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e48:	4b8a      	ldr	r3, [pc, #552]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e4a:	e001      	b.n	8005e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e5c:	d004      	beq.n	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 8099 	bne.w	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f925 	bl	80060cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9c8 	bl	800622c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d13a      	bne.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d035      	beq.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6e      	ldr	r2, [pc, #440]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005eba:	4b6e      	ldr	r3, [pc, #440]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ebc:	e001      	b.n	8005ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4969      	ldr	r1, [pc, #420]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eca:	428b      	cmp	r3, r1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005ece:	4b69      	ldr	r3, [pc, #420]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ed0:	e001      	b.n	8005ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ed2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005eda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0202 	orr.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe88 	bl	8005c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	f040 80c3 	bne.w	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80bd 	beq.w	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a49      	ldr	r2, [pc, #292]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f4e:	4b49      	ldr	r3, [pc, #292]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f50:	e001      	b.n	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4944      	ldr	r1, [pc, #272]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5e:	428b      	cmp	r3, r1
 8005f60:	d101      	bne.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f62:	4b44      	ldr	r3, [pc, #272]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f64:	e001      	b.n	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f70:	2300      	movs	r3, #0
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	f043 0204 	orr.w	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fe4a 	bl	8005c2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f98:	e089      	b.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d107      	bne.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8be 	bl	8006130 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d107      	bne.n	8005fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8fd 	bl	80061c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d12f      	bne.n	8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02a      	beq.n	8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d101      	bne.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ffe:	e001      	b.n	8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4919      	ldr	r1, [pc, #100]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800600c:	428b      	cmp	r3, r1
 800600e:	d101      	bne.n	8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006010:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006012:	e001      	b.n	8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006014:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006018:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800601c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	f043 0202 	orr.w	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fdfa 	bl	8005c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d136      	bne.n	80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d031      	beq.n	80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a07      	ldr	r2, [pc, #28]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006056:	4b07      	ldr	r3, [pc, #28]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006058:	e001      	b.n	800605e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800605a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4902      	ldr	r1, [pc, #8]	@ (8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006066:	428b      	cmp	r3, r1
 8006068:	d106      	bne.n	8006078 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800606a:	4b02      	ldr	r3, [pc, #8]	@ (8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800606c:	e006      	b.n	800607c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800606e:	bf00      	nop
 8006070:	40003800 	.word	0x40003800
 8006074:	40003400 	.word	0x40003400
 8006078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800607c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006080:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fdc0 	bl	8005c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ac:	e000      	b.n	80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060ae:	bf00      	nop
}
 80060b0:	bf00      	nop
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	1c99      	adds	r1, r3, #2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6251      	str	r1, [r2, #36]	@ 0x24
 80060de:	881a      	ldrh	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800610c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ffc9 	bl	80060b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	1c99      	adds	r1, r3, #2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6251      	str	r1, [r2, #36]	@ 0x24
 8006142:	8819      	ldrh	r1, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <I2SEx_TxISR_I2SExt+0x90>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d101      	bne.n	8006152 <I2SEx_TxISR_I2SExt+0x22>
 800614e:	4b1d      	ldr	r3, [pc, #116]	@ (80061c4 <I2SEx_TxISR_I2SExt+0x94>)
 8006150:	e001      	b.n	8006156 <I2SEx_TxISR_I2SExt+0x26>
 8006152:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006156:	460a      	mov	r2, r1
 8006158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d121      	bne.n	80061b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a12      	ldr	r2, [pc, #72]	@ (80061c0 <I2SEx_TxISR_I2SExt+0x90>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <I2SEx_TxISR_I2SExt+0x50>
 800617c:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <I2SEx_TxISR_I2SExt+0x94>)
 800617e:	e001      	b.n	8006184 <I2SEx_TxISR_I2SExt+0x54>
 8006180:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	490d      	ldr	r1, [pc, #52]	@ (80061c0 <I2SEx_TxISR_I2SExt+0x90>)
 800618c:	428b      	cmp	r3, r1
 800618e:	d101      	bne.n	8006194 <I2SEx_TxISR_I2SExt+0x64>
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <I2SEx_TxISR_I2SExt+0x94>)
 8006192:	e001      	b.n	8006198 <I2SEx_TxISR_I2SExt+0x68>
 8006194:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006198:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800619c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff81 	bl	80060b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40003800 	.word	0x40003800
 80061c4:	40003400 	.word	0x40003400

080061c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68d8      	ldr	r0, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	1c99      	adds	r1, r3, #2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80061e0:	b282      	uxth	r2, r0
 80061e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d113      	bne.n	8006224 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800620a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff4a 	bl	80060b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a20      	ldr	r2, [pc, #128]	@ (80062bc <I2SEx_RxISR_I2SExt+0x90>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <I2SEx_RxISR_I2SExt+0x16>
 800623e:	4b20      	ldr	r3, [pc, #128]	@ (80062c0 <I2SEx_RxISR_I2SExt+0x94>)
 8006240:	e001      	b.n	8006246 <I2SEx_RxISR_I2SExt+0x1a>
 8006242:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006246:	68d8      	ldr	r0, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	1c99      	adds	r1, r3, #2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006252:	b282      	uxth	r2, r0
 8006254:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d121      	bne.n	80062b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <I2SEx_RxISR_I2SExt+0x90>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d101      	bne.n	800627c <I2SEx_RxISR_I2SExt+0x50>
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <I2SEx_RxISR_I2SExt+0x94>)
 800627a:	e001      	b.n	8006280 <I2SEx_RxISR_I2SExt+0x54>
 800627c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	490d      	ldr	r1, [pc, #52]	@ (80062bc <I2SEx_RxISR_I2SExt+0x90>)
 8006288:	428b      	cmp	r3, r1
 800628a:	d101      	bne.n	8006290 <I2SEx_RxISR_I2SExt+0x64>
 800628c:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <I2SEx_RxISR_I2SExt+0x94>)
 800628e:	e001      	b.n	8006294 <I2SEx_RxISR_I2SExt+0x68>
 8006290:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006294:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006298:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff03 	bl	80060b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40003800 	.word	0x40003800
 80062c0:	40003400 	.word	0x40003400

080062c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e318      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d903      	bls.n	80062e6 <HAL_RCC_OscConfig+0x22>
 80062de:	21e6      	movs	r1, #230	@ 0xe6
 80062e0:	4897      	ldr	r0, [pc, #604]	@ (8006540 <HAL_RCC_OscConfig+0x27c>)
 80062e2:	f7fa fe23 	bl	8000f2c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8088 	beq.w	8006404 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00d      	beq.n	8006318 <HAL_RCC_OscConfig+0x54>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006304:	d008      	beq.n	8006318 <HAL_RCC_OscConfig+0x54>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800630e:	d003      	beq.n	8006318 <HAL_RCC_OscConfig+0x54>
 8006310:	21eb      	movs	r1, #235	@ 0xeb
 8006312:	488b      	ldr	r0, [pc, #556]	@ (8006540 <HAL_RCC_OscConfig+0x27c>)
 8006314:	f7fa fe0a 	bl	8000f2c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006318:	4b8a      	ldr	r3, [pc, #552]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b04      	cmp	r3, #4
 8006322:	d00c      	beq.n	800633e <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006324:	4b87      	ldr	r3, [pc, #540]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800632c:	2b08      	cmp	r3, #8
 800632e:	d112      	bne.n	8006356 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006330:	4b84      	ldr	r3, [pc, #528]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800633c:	d10b      	bne.n	8006356 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633e:	4b81      	ldr	r3, [pc, #516]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d05b      	beq.n	8006402 <HAL_RCC_OscConfig+0x13e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d157      	bne.n	8006402 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e2d8      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0xaa>
 8006360:	4b78      	ldr	r3, [pc, #480]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a77      	ldr	r2, [pc, #476]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e01d      	b.n	80063aa <HAL_RCC_OscConfig+0xe6>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_OscConfig+0xce>
 8006378:	4b72      	ldr	r3, [pc, #456]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a71      	ldr	r2, [pc, #452]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800637e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b6f      	ldr	r3, [pc, #444]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a6e      	ldr	r2, [pc, #440]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800638a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e00b      	b.n	80063aa <HAL_RCC_OscConfig+0xe6>
 8006392:	4b6c      	ldr	r3, [pc, #432]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6b      	ldr	r2, [pc, #428]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b69      	ldr	r3, [pc, #420]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a68      	ldr	r2, [pc, #416]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80063a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7fb f86d 	bl	8001490 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063ba:	f7fb f869 	bl	8001490 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b64      	cmp	r3, #100	@ 0x64
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e29d      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063cc:	4b5d      	ldr	r3, [pc, #372]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0xf6>
 80063d8:	e014      	b.n	8006404 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fb f859 	bl	8001490 <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e2:	f7fb f855 	bl	8001490 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b64      	cmp	r3, #100	@ 0x64
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e289      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f4:	4b53      	ldr	r3, [pc, #332]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f0      	bne.n	80063e2 <HAL_RCC_OscConfig+0x11e>
 8006400:	e000      	b.n	8006404 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006402:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d079      	beq.n	8006504 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_RCC_OscConfig+0x166>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d004      	beq.n	800642a <HAL_RCC_OscConfig+0x166>
 8006420:	f240 111d 	movw	r1, #285	@ 0x11d
 8006424:	4846      	ldr	r0, [pc, #280]	@ (8006540 <HAL_RCC_OscConfig+0x27c>)
 8006426:	f7fa fd81 	bl	8000f2c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b1f      	cmp	r3, #31
 8006430:	d904      	bls.n	800643c <HAL_RCC_OscConfig+0x178>
 8006432:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8006436:	4842      	ldr	r0, [pc, #264]	@ (8006540 <HAL_RCC_OscConfig+0x27c>)
 8006438:	f7fa fd78 	bl	8000f2c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800643c:	4b41      	ldr	r3, [pc, #260]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006448:	4b3e      	ldr	r3, [pc, #248]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006450:	2b08      	cmp	r3, #8
 8006452:	d11c      	bne.n	800648e <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006454:	4b3b      	ldr	r3, [pc, #236]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d116      	bne.n	800648e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006460:	4b38      	ldr	r3, [pc, #224]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_OscConfig+0x1b4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e247      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b32      	ldr	r3, [pc, #200]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	492f      	ldr	r1, [pc, #188]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648c:	e03a      	b.n	8006504 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d020      	beq.n	80064d8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006496:	4b2c      	ldr	r3, [pc, #176]	@ (8006548 <HAL_RCC_OscConfig+0x284>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fa fff8 	bl	8001490 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a4:	f7fa fff4 	bl	8001490 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e228      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b6:	4b23      	ldr	r3, [pc, #140]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c2:	4b20      	ldr	r3, [pc, #128]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	491c      	ldr	r1, [pc, #112]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]
 80064d6:	e015      	b.n	8006504 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006548 <HAL_RCC_OscConfig+0x284>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fa ffd7 	bl	8001490 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e6:	f7fa ffd3 	bl	8001490 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e207      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <HAL_RCC_OscConfig+0x280>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d045      	beq.n	800659c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <HAL_RCC_OscConfig+0x266>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d004      	beq.n	800652a <HAL_RCC_OscConfig+0x266>
 8006520:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8006524:	4806      	ldr	r0, [pc, #24]	@ (8006540 <HAL_RCC_OscConfig+0x27c>)
 8006526:	f7fa fd01 	bl	8000f2c <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01e      	beq.n	8006570 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006532:	4b06      	ldr	r3, [pc, #24]	@ (800654c <HAL_RCC_OscConfig+0x288>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fa ffaa 	bl	8001490 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653e:	e010      	b.n	8006562 <HAL_RCC_OscConfig+0x29e>
 8006540:	0800c1a0 	.word	0x0800c1a0
 8006544:	40023800 	.word	0x40023800
 8006548:	42470000 	.word	0x42470000
 800654c:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006550:	f7fa ff9e 	bl	8001490 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e1d2      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006562:	4b5e      	ldr	r3, [pc, #376]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x28c>
 800656e:	e015      	b.n	800659c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006570:	4b5b      	ldr	r3, [pc, #364]	@ (80066e0 <HAL_RCC_OscConfig+0x41c>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006576:	f7fa ff8b 	bl	8001490 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657e:	f7fa ff87 	bl	8001490 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1bb      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006590:	4b52      	ldr	r3, [pc, #328]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f0      	bne.n	800657e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80b0 	beq.w	800670a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <HAL_RCC_OscConfig+0x30c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d008      	beq.n	80065d0 <HAL_RCC_OscConfig+0x30c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d004      	beq.n	80065d0 <HAL_RCC_OscConfig+0x30c>
 80065c6:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80065ca:	4846      	ldr	r0, [pc, #280]	@ (80066e4 <HAL_RCC_OscConfig+0x420>)
 80065cc:	f7fa fcae 	bl	8000f2c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d0:	4b42      	ldr	r3, [pc, #264]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10f      	bne.n	80065fc <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065dc:	2300      	movs	r3, #0
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	4b3e      	ldr	r3, [pc, #248]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	4a3d      	ldr	r2, [pc, #244]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 80065e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ec:	4b3b      	ldr	r3, [pc, #236]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f8:	2301      	movs	r3, #1
 80065fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b3a      	ldr	r3, [pc, #232]	@ (80066e8 <HAL_RCC_OscConfig+0x424>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d118      	bne.n	800663a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006608:	4b37      	ldr	r3, [pc, #220]	@ (80066e8 <HAL_RCC_OscConfig+0x424>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a36      	ldr	r2, [pc, #216]	@ (80066e8 <HAL_RCC_OscConfig+0x424>)
 800660e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006614:	f7fa ff3c 	bl	8001490 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661c:	f7fa ff38 	bl	8001490 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e16c      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662e:	4b2e      	ldr	r3, [pc, #184]	@ (80066e8 <HAL_RCC_OscConfig+0x424>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d106      	bne.n	8006650 <HAL_RCC_OscConfig+0x38c>
 8006642:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006646:	4a25      	ldr	r2, [pc, #148]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	@ 0x70
 800664e:	e01c      	b.n	800668a <HAL_RCC_OscConfig+0x3c6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b05      	cmp	r3, #5
 8006656:	d10c      	bne.n	8006672 <HAL_RCC_OscConfig+0x3ae>
 8006658:	4b20      	ldr	r3, [pc, #128]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665c:	4a1f      	ldr	r2, [pc, #124]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 800665e:	f043 0304 	orr.w	r3, r3, #4
 8006662:	6713      	str	r3, [r2, #112]	@ 0x70
 8006664:	4b1d      	ldr	r3, [pc, #116]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006668:	4a1c      	ldr	r2, [pc, #112]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006670:	e00b      	b.n	800668a <HAL_RCC_OscConfig+0x3c6>
 8006672:	4b1a      	ldr	r3, [pc, #104]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006676:	4a19      	ldr	r2, [pc, #100]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	6713      	str	r3, [r2, #112]	@ 0x70
 800667e:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006692:	f7fa fefd 	bl	8001490 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006698:	e00a      	b.n	80066b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fa fef9 	bl	8001490 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e12b      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b0:	4b0a      	ldr	r3, [pc, #40]	@ (80066dc <HAL_RCC_OscConfig+0x418>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ee      	beq.n	800669a <HAL_RCC_OscConfig+0x3d6>
 80066bc:	e01c      	b.n	80066f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fa fee7 	bl	8001490 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c4:	e012      	b.n	80066ec <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c6:	f7fa fee3 	bl	8001490 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d909      	bls.n	80066ec <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e115      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
 80066dc:	40023800 	.word	0x40023800
 80066e0:	42470e80 	.word	0x42470e80
 80066e4:	0800c1a0 	.word	0x0800c1a0
 80066e8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ec:	4b88      	ldr	r3, [pc, #544]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fe:	4b84      	ldr	r3, [pc, #528]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	4a83      	ldr	r2, [pc, #524]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 8006704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_RCC_OscConfig+0x468>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d008      	beq.n	800672c <HAL_RCC_OscConfig+0x468>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d004      	beq.n	800672c <HAL_RCC_OscConfig+0x468>
 8006722:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8006726:	487b      	ldr	r0, [pc, #492]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 8006728:	f7fa fc00 	bl	8000f2c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80e8 	beq.w	8006906 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006736:	4b76      	ldr	r3, [pc, #472]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b08      	cmp	r3, #8
 8006740:	f000 80a9 	beq.w	8006896 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b02      	cmp	r3, #2
 800674a:	f040 808d 	bne.w	8006868 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_RCC_OscConfig+0x4a6>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800675e:	d004      	beq.n	800676a <HAL_RCC_OscConfig+0x4a6>
 8006760:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8006764:	486b      	ldr	r0, [pc, #428]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 8006766:	f7fa fbe1 	bl	8000f2c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d903      	bls.n	800677a <HAL_RCC_OscConfig+0x4b6>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2b3f      	cmp	r3, #63	@ 0x3f
 8006778:	d904      	bls.n	8006784 <HAL_RCC_OscConfig+0x4c0>
 800677a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800677e:	4865      	ldr	r0, [pc, #404]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 8006780:	f7fa fbd4 	bl	8000f2c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	2b31      	cmp	r3, #49	@ 0x31
 800678a:	d904      	bls.n	8006796 <HAL_RCC_OscConfig+0x4d2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006794:	d904      	bls.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
 8006796:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800679a:	485e      	ldr	r0, [pc, #376]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 800679c:	f7fa fbc6 	bl	8000f2c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d010      	beq.n	80067ca <HAL_RCC_OscConfig+0x506>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d00c      	beq.n	80067ca <HAL_RCC_OscConfig+0x506>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	2b06      	cmp	r3, #6
 80067b6:	d008      	beq.n	80067ca <HAL_RCC_OscConfig+0x506>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d004      	beq.n	80067ca <HAL_RCC_OscConfig+0x506>
 80067c0:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80067c4:	4853      	ldr	r0, [pc, #332]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 80067c6:	f7fa fbb1 	bl	8000f2c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d903      	bls.n	80067da <HAL_RCC_OscConfig+0x516>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d904      	bls.n	80067e4 <HAL_RCC_OscConfig+0x520>
 80067da:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80067de:	484d      	ldr	r0, [pc, #308]	@ (8006914 <HAL_RCC_OscConfig+0x650>)
 80067e0:	f7fa fba4 	bl	8000f2c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006918 <HAL_RCC_OscConfig+0x654>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fa fe51 	bl	8001490 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fa fe4d 	bl	8001490 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e081      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006804:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	019b      	lsls	r3, r3, #6
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	3b01      	subs	r3, #1
 800682a:	041b      	lsls	r3, r3, #16
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	061b      	lsls	r3, r3, #24
 8006834:	4936      	ldr	r1, [pc, #216]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 8006836:	4313      	orrs	r3, r2
 8006838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCC_OscConfig+0x654>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006840:	f7fa fe26 	bl	8001490 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006848:	f7fa fe22 	bl	8001490 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e056      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685a:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x584>
 8006866:	e04e      	b.n	8006906 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006868:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <HAL_RCC_OscConfig+0x654>)
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686e:	f7fa fe0f 	bl	8001490 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006876:	f7fa fe0b 	bl	8001490 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e03f      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006888:	4b21      	ldr	r3, [pc, #132]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f0      	bne.n	8006876 <HAL_RCC_OscConfig+0x5b2>
 8006894:	e037      	b.n	8006906 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e032      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006910 <HAL_RCC_OscConfig+0x64c>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d028      	beq.n	8006902 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d121      	bne.n	8006902 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d11a      	bne.n	8006902 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068d2:	4013      	ands	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068da:	4293      	cmp	r3, r2
 80068dc:	d111      	bne.n	8006902 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	3b01      	subs	r3, #1
 80068ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068fe:	429a      	cmp	r2, r3
 8006900:	d001      	beq.n	8006906 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	0800c1a0 	.word	0x0800c1a0
 8006918:	42470060 	.word	0x42470060

0800691c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e174      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_RCC_ClockConfig+0x24>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d904      	bls.n	800694a <HAL_RCC_ClockConfig+0x2e>
 8006940:	f240 215a 	movw	r1, #602	@ 0x25a
 8006944:	487b      	ldr	r0, [pc, #492]	@ (8006b34 <HAL_RCC_ClockConfig+0x218>)
 8006946:	f7fa faf1 	bl	8000f2c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d019      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d016      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d013      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d010      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b04      	cmp	r3, #4
 8006966:	d00d      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b05      	cmp	r3, #5
 800696c:	d00a      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d007      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b07      	cmp	r3, #7
 8006978:	d004      	beq.n	8006984 <HAL_RCC_ClockConfig+0x68>
 800697a:	f240 215b 	movw	r1, #603	@ 0x25b
 800697e:	486d      	ldr	r0, [pc, #436]	@ (8006b34 <HAL_RCC_ClockConfig+0x218>)
 8006980:	f7fa fad4 	bl	8000f2c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b6c      	ldr	r3, [pc, #432]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d90c      	bls.n	80069ac <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b69      	ldr	r3, [pc, #420]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b67      	ldr	r3, [pc, #412]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e136      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d049      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b5d      	ldr	r3, [pc, #372]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a5c      	ldr	r2, [pc, #368]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 80069ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b57      	ldr	r3, [pc, #348]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a56      	ldr	r2, [pc, #344]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 80069e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d024      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b80      	cmp	r3, #128	@ 0x80
 80069f6:	d020      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b90      	cmp	r3, #144	@ 0x90
 80069fe:	d01c      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a06:	d018      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8006a0e:	d014      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a16:	d010      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2bd0      	cmp	r3, #208	@ 0xd0
 8006a1e:	d00c      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2be0      	cmp	r3, #224	@ 0xe0
 8006a26:	d008      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8006a2e:	d004      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
 8006a30:	f240 217e 	movw	r1, #638	@ 0x27e
 8006a34:	483f      	ldr	r0, [pc, #252]	@ (8006b34 <HAL_RCC_ClockConfig+0x218>)
 8006a36:	f7fa fa79 	bl	8000f2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a3a:	4b40      	ldr	r3, [pc, #256]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	493d      	ldr	r1, [pc, #244]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d059      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x166>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d00c      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x166>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d008      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x166>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d004      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x166>
 8006a78:	f240 2185 	movw	r1, #645	@ 0x285
 8006a7c:	482d      	ldr	r0, [pc, #180]	@ (8006b34 <HAL_RCC_ClockConfig+0x218>)
 8006a7e:	f7fa fa55 	bl	8000f2c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d119      	bne.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e0bf      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aaa:	4b24      	ldr	r3, [pc, #144]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e0af      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aba:	4b20      	ldr	r3, [pc, #128]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e0a7      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aca:	4b1c      	ldr	r3, [pc, #112]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f023 0203 	bic.w	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4919      	ldr	r1, [pc, #100]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006adc:	f7fa fcd8 	bl	8001490 <HAL_GetTick>
 8006ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae2:	e00a      	b.n	8006afa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae4:	f7fa fcd4 	bl	8001490 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e08f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afa:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <HAL_RCC_ClockConfig+0x220>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 020c 	and.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d1eb      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d212      	bcs.n	8006b40 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b07      	ldr	r3, [pc, #28]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <HAL_RCC_ClockConfig+0x21c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d007      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e072      	b.n	8006c1a <HAL_RCC_ClockConfig+0x2fe>
 8006b34:	0800c1a0 	.word	0x0800c1a0
 8006b38:	40023c00 	.word	0x40023c00
 8006b3c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d025      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d018      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x26a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5c:	d013      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x26a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b66:	d00e      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x26a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006b70:	d009      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x26a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006b7a:	d004      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x26a>
 8006b7c:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8006b80:	4828      	ldr	r0, [pc, #160]	@ (8006c24 <HAL_RCC_ClockConfig+0x308>)
 8006b82:	f7fa f9d3 	bl	8000f2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b86:	4b28      	ldr	r3, [pc, #160]	@ (8006c28 <HAL_RCC_ClockConfig+0x30c>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	4925      	ldr	r1, [pc, #148]	@ (8006c28 <HAL_RCC_ClockConfig+0x30c>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d026      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d018      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2c2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb4:	d013      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2c2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006bbe:	d00e      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2c2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006bc8:	d009      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2c2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006bd2:	d004      	beq.n	8006bde <HAL_RCC_ClockConfig+0x2c2>
 8006bd4:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8006bd8:	4812      	ldr	r0, [pc, #72]	@ (8006c24 <HAL_RCC_ClockConfig+0x308>)
 8006bda:	f7fa f9a7 	bl	8000f2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCC_ClockConfig+0x30c>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	490e      	ldr	r1, [pc, #56]	@ (8006c28 <HAL_RCC_ClockConfig+0x30c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bf2:	f000 f821 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RCC_ClockConfig+0x30c>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	490a      	ldr	r1, [pc, #40]	@ (8006c2c <HAL_RCC_ClockConfig+0x310>)
 8006c04:	5ccb      	ldrb	r3, [r1, r3]
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	4a09      	ldr	r2, [pc, #36]	@ (8006c30 <HAL_RCC_ClockConfig+0x314>)
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c0e:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_ClockConfig+0x318>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fa fbf8 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	0800c1a0 	.word	0x0800c1a0
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	0800c28c 	.word	0x0800c28c
 8006c30:	20000000 	.word	0x20000000
 8006c34:	20000004 	.word	0x20000004

08006c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b094      	sub	sp, #80	@ 0x50
 8006c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c50:	4b79      	ldr	r3, [pc, #484]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 030c 	and.w	r3, r3, #12
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d00d      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x40>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	f200 80e1 	bhi.w	8006e24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x34>
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d003      	beq.n	8006c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c6a:	e0db      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4b73      	ldr	r3, [pc, #460]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c70:	e0db      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c72:	4b73      	ldr	r3, [pc, #460]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c76:	e0d8      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c78:	4b6f      	ldr	r3, [pc, #444]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c82:	4b6d      	ldr	r3, [pc, #436]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d063      	beq.n	8006d56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	2200      	movs	r2, #0
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	f04f 0000 	mov.w	r0, #0
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	0159      	lsls	r1, r3, #5
 8006cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cbc:	0150      	lsls	r0, r2, #5
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	1a51      	subs	r1, r2, r1
 8006cc6:	6139      	str	r1, [r7, #16]
 8006cc8:	4629      	mov	r1, r5
 8006cca:	eb63 0301 	sbc.w	r3, r3, r1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cdc:	4659      	mov	r1, fp
 8006cde:	018b      	lsls	r3, r1, #6
 8006ce0:	4651      	mov	r1, sl
 8006ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	018a      	lsls	r2, r1, #6
 8006cea:	4651      	mov	r1, sl
 8006cec:	ebb2 0801 	subs.w	r8, r2, r1
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d0a:	4690      	mov	r8, r2
 8006d0c:	4699      	mov	r9, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	eb18 0303 	adds.w	r3, r8, r3
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	462b      	mov	r3, r5
 8006d18:	eb49 0303 	adc.w	r3, r9, r3
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	024b      	lsls	r3, r1, #9
 8006d2e:	4621      	mov	r1, r4
 8006d30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d34:	4621      	mov	r1, r4
 8006d36:	024a      	lsls	r2, r1, #9
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3e:	2200      	movs	r2, #0
 8006d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d48:	f7f9 fa46 	bl	80001d8 <__aeabi_uldivmod>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4613      	mov	r3, r2
 8006d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d54:	e058      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d56:	4b38      	ldr	r3, [pc, #224]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	099b      	lsrs	r3, r3, #6
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	4611      	mov	r1, r2
 8006d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	f04f 0000 	mov.w	r0, #0
 8006d78:	f04f 0100 	mov.w	r1, #0
 8006d7c:	0159      	lsls	r1, r3, #5
 8006d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d82:	0150      	lsls	r0, r2, #5
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4641      	mov	r1, r8
 8006d8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d8e:	4649      	mov	r1, r9
 8006d90:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006da0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006da4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006da8:	ebb2 040a 	subs.w	r4, r2, sl
 8006dac:	eb63 050b 	sbc.w	r5, r3, fp
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	00eb      	lsls	r3, r5, #3
 8006dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dbe:	00e2      	lsls	r2, r4, #3
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	4643      	mov	r3, r8
 8006dc6:	18e3      	adds	r3, r4, r3
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	464b      	mov	r3, r9
 8006dcc:	eb45 0303 	adc.w	r3, r5, r3
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dde:	4629      	mov	r1, r5
 8006de0:	028b      	lsls	r3, r1, #10
 8006de2:	4621      	mov	r1, r4
 8006de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006de8:	4621      	mov	r1, r4
 8006dea:	028a      	lsls	r2, r1, #10
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df2:	2200      	movs	r2, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	61fa      	str	r2, [r7, #28]
 8006df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dfc:	f7f9 f9ec 	bl	80001d8 <__aeabi_uldivmod>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4613      	mov	r3, r2
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e08:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	3301      	adds	r3, #1
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3750      	adds	r7, #80	@ 0x50
 8006e30:	46bd      	mov	sp, r7
 8006e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	00f42400 	.word	0x00f42400
 8006e40:	007a1200 	.word	0x007a1200

08006e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e48:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000000 	.word	0x20000000

08006e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e60:	f7ff fff0 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	0a9b      	lsrs	r3, r3, #10
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	4903      	ldr	r1, [pc, #12]	@ (8006e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	0800c29c 	.word	0x0800c29c

08006e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e88:	f7ff ffdc 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	0b5b      	lsrs	r3, r3, #13
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4903      	ldr	r1, [pc, #12]	@ (8006ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	0800c29c 	.word	0x0800c29c

08006eac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b0f      	cmp	r3, #15
 8006eca:	d904      	bls.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006ecc:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 8006ed0:	4834      	ldr	r0, [pc, #208]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006ed2:	f7fa f82b 	bl	8000f2c <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d066      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d903      	bls.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b07      	cmp	r3, #7
 8006efc:	d904      	bls.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006efe:	f640 2104 	movw	r1, #2564	@ 0xa04
 8006f02:	4828      	ldr	r0, [pc, #160]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006f04:	f7fa f812 	bl	8000f2c <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b31      	cmp	r3, #49	@ 0x31
 8006f0e:	d904      	bls.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006f18:	d904      	bls.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006f1a:	f640 2105 	movw	r1, #2565	@ 0xa05
 8006f1e:	4821      	ldr	r0, [pc, #132]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006f20:	f7fa f804 	bl	8000f2c <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d903      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f32:	d904      	bls.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006f34:	f640 2107 	movw	r1, #2567	@ 0xa07
 8006f38:	481a      	ldr	r0, [pc, #104]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006f3a:	f7f9 fff7 	bl	8000f2c <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f44:	f7fa faa4 	bl	8001490 <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f4c:	f7fa faa0 	bl	8001490 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e1b3      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f5e:	4b13      	ldr	r3, [pc, #76]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	019b      	lsls	r3, r3, #6
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	071b      	lsls	r3, r3, #28
 8006f7c:	490b      	ldr	r1, [pc, #44]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f84:	4b08      	ldr	r3, [pc, #32]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f8a:	f7fa fa81 	bl	8001490 <HAL_GetTick>
 8006f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f90:	e00e      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f92:	f7fa fa7d 	bl	8001490 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d907      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e190      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006fa4:	0800c1d8 	.word	0x0800c1d8
 8006fa8:	42470068 	.word	0x42470068
 8006fac:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fb0:	4b88      	ldr	r3, [pc, #544]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0ea      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8173 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd2:	f000 80a6 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fde:	f000 80a0 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	f000 809a 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	f000 8094 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	4a78      	ldr	r2, [pc, #480]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007000:	4293      	cmp	r3, r2
 8007002:	f000 808e 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	4a76      	ldr	r2, [pc, #472]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800700c:	4293      	cmp	r3, r2
 800700e:	f000 8088 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	4a74      	ldr	r2, [pc, #464]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	f000 8082 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4a72      	ldr	r2, [pc, #456]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d07c      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	4a70      	ldr	r2, [pc, #448]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d077      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	4a6f      	ldr	r2, [pc, #444]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d072      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	4a6d      	ldr	r2, [pc, #436]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d06d      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4a6c      	ldr	r2, [pc, #432]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d068      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4a6a      	ldr	r2, [pc, #424]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d063      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	4a69      	ldr	r2, [pc, #420]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d05e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4a67      	ldr	r2, [pc, #412]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d059      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	4a66      	ldr	r2, [pc, #408]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d054      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	4a64      	ldr	r2, [pc, #400]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d04f      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	4a63      	ldr	r2, [pc, #396]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d04a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	4a61      	ldr	r2, [pc, #388]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d045      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	4a60      	ldr	r2, [pc, #384]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d040      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d03b      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4a5d      	ldr	r2, [pc, #372]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d036      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d031      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	4a5a      	ldr	r2, [pc, #360]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d02c      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	4a58      	ldr	r2, [pc, #352]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d027      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	4a57      	ldr	r2, [pc, #348]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d022      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	4a55      	ldr	r2, [pc, #340]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01d      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	4a54      	ldr	r2, [pc, #336]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d018      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	4a52      	ldr	r2, [pc, #328]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	4a51      	ldr	r2, [pc, #324]	@ (8007244 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	4a4f      	ldr	r2, [pc, #316]	@ (8007248 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4a4e      	ldr	r2, [pc, #312]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d004      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007118:	f640 2137 	movw	r1, #2615	@ 0xa37
 800711c:	484c      	ldr	r0, [pc, #304]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800711e:	f7f9 ff05 	bl	8000f2c <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	4b2b      	ldr	r3, [pc, #172]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	4a2a      	ldr	r2, [pc, #168]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800712c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007130:	6413      	str	r3, [r2, #64]	@ 0x40
 8007132:	4b28      	ldr	r3, [pc, #160]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800713e:	4b45      	ldr	r3, [pc, #276]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a44      	ldr	r2, [pc, #272]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007148:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800714a:	f7fa f9a1 	bl	8001490 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fa f99d 	bl	8001490 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e0b0      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007164:	4b3b      	ldr	r3, [pc, #236]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007170:	4b18      	ldr	r3, [pc, #96]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007178:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d073      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	429a      	cmp	r2, r3
 800718c:	d06c      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800718e:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007196:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007198:	4b2f      	ldr	r3, [pc, #188]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800719e:	4b2e      	ldr	r3, [pc, #184]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071a4:	4a0b      	ldr	r2, [pc, #44]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071aa:	4b0a      	ldr	r3, [pc, #40]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d158      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071b6:	f7fa f96b 	bl	8001490 <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071bc:	e04e      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fa f967 	bl	8001490 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d945      	bls.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e078      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071d4:	40023800 	.word	0x40023800
 80071d8:	00020300 	.word	0x00020300
 80071dc:	00030300 	.word	0x00030300
 80071e0:	00040300 	.word	0x00040300
 80071e4:	00050300 	.word	0x00050300
 80071e8:	00060300 	.word	0x00060300
 80071ec:	00070300 	.word	0x00070300
 80071f0:	00080300 	.word	0x00080300
 80071f4:	00090300 	.word	0x00090300
 80071f8:	000a0300 	.word	0x000a0300
 80071fc:	000b0300 	.word	0x000b0300
 8007200:	000c0300 	.word	0x000c0300
 8007204:	000d0300 	.word	0x000d0300
 8007208:	000e0300 	.word	0x000e0300
 800720c:	000f0300 	.word	0x000f0300
 8007210:	00100300 	.word	0x00100300
 8007214:	00110300 	.word	0x00110300
 8007218:	00120300 	.word	0x00120300
 800721c:	00130300 	.word	0x00130300
 8007220:	00140300 	.word	0x00140300
 8007224:	00150300 	.word	0x00150300
 8007228:	00160300 	.word	0x00160300
 800722c:	00170300 	.word	0x00170300
 8007230:	00180300 	.word	0x00180300
 8007234:	00190300 	.word	0x00190300
 8007238:	001a0300 	.word	0x001a0300
 800723c:	001b0300 	.word	0x001b0300
 8007240:	001c0300 	.word	0x001c0300
 8007244:	001d0300 	.word	0x001d0300
 8007248:	001e0300 	.word	0x001e0300
 800724c:	001f0300 	.word	0x001f0300
 8007250:	0800c1d8 	.word	0x0800c1d8
 8007254:	40007000 	.word	0x40007000
 8007258:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725c:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0aa      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007274:	d10d      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007276:	4b16      	ldr	r3, [pc, #88]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800728a:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]
 8007290:	e005      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007292:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	4a0e      	ldr	r2, [pc, #56]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007298:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800729c:	6093      	str	r3, [r2, #8]
 800729e:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80072a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072aa:	4909      	ldr	r1, [pc, #36]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	7d1a      	ldrb	r2, [r3, #20]
 80072c0:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80072c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40023800 	.word	0x40023800
 80072d4:	424711e0 	.word	0x424711e0

080072d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d141      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072f6:	4b25      	ldr	r3, [pc, #148]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d006      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800730c:	d131      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800730e:	4b20      	ldr	r3, [pc, #128]	@ (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007310:	617b      	str	r3, [r7, #20]
          break;
 8007312:	e031      	b.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800731c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007320:	d109      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007322:	4b1a      	ldr	r3, [pc, #104]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800732c:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800732e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007340:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007348:	4b10      	ldr	r3, [pc, #64]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800735c:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800735e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007362:	0f1b      	lsrs	r3, r3, #28
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	fbb2 f3f3 	udiv	r3, r2, r3
 800736e:	617b      	str	r3, [r7, #20]
          break;
 8007370:	e002      	b.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
          break;
 8007376:	bf00      	nop
        }
      }
      break;
 8007378:	e000      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800737a:	bf00      	nop
    }
  }
  return frequency;
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40023800 	.word	0x40023800
 8007390:	00bb8000 	.word	0x00bb8000
 8007394:	007a1200 	.word	0x007a1200
 8007398:	00f42400 	.word	0x00f42400

0800739c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e18c      	b.n	80076c8 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a75      	ldr	r2, [pc, #468]	@ (8007588 <HAL_SPI_Init+0x1ec>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_SPI_Init+0x4e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a73      	ldr	r2, [pc, #460]	@ (800758c <HAL_SPI_Init+0x1f0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_SPI_Init+0x4e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a72      	ldr	r2, [pc, #456]	@ (8007590 <HAL_SPI_Init+0x1f4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_SPI_Init+0x4e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a70      	ldr	r2, [pc, #448]	@ (8007594 <HAL_SPI_Init+0x1f8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_SPI_Init+0x4e>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a6f      	ldr	r2, [pc, #444]	@ (8007598 <HAL_SPI_Init+0x1fc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_SPI_Init+0x4e>
 80073e0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80073e4:	486d      	ldr	r0, [pc, #436]	@ (800759c <HAL_SPI_Init+0x200>)
 80073e6:	f7f9 fda1 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_SPI_Init+0x6a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fa:	d004      	beq.n	8007406 <HAL_SPI_Init+0x6a>
 80073fc:	f240 1141 	movw	r1, #321	@ 0x141
 8007400:	4866      	ldr	r0, [pc, #408]	@ (800759c <HAL_SPI_Init+0x200>)
 8007402:	f7f9 fd93 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <HAL_SPI_Init+0x90>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007416:	d009      	beq.n	800742c <HAL_SPI_Init+0x90>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007420:	d004      	beq.n	800742c <HAL_SPI_Init+0x90>
 8007422:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8007426:	485d      	ldr	r0, [pc, #372]	@ (800759c <HAL_SPI_Init+0x200>)
 8007428:	f7f9 fd80 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007434:	d008      	beq.n	8007448 <HAL_SPI_Init+0xac>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <HAL_SPI_Init+0xac>
 800743e:	f240 1143 	movw	r1, #323	@ 0x143
 8007442:	4856      	ldr	r0, [pc, #344]	@ (800759c <HAL_SPI_Init+0x200>)
 8007444:	f7f9 fd72 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007450:	d00d      	beq.n	800746e <HAL_SPI_Init+0xd2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d009      	beq.n	800746e <HAL_SPI_Init+0xd2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007462:	d004      	beq.n	800746e <HAL_SPI_Init+0xd2>
 8007464:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8007468:	484c      	ldr	r0, [pc, #304]	@ (800759c <HAL_SPI_Init+0x200>)
 800746a:	f7f9 fd5f 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d020      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	2b08      	cmp	r3, #8
 800747c:	d01c      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	2b10      	cmp	r3, #16
 8007484:	d018      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b18      	cmp	r3, #24
 800748c:	d014      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	2b20      	cmp	r3, #32
 8007494:	d010      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	2b28      	cmp	r3, #40	@ 0x28
 800749c:	d00c      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d008      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b38      	cmp	r3, #56	@ 0x38
 80074ac:	d004      	beq.n	80074b8 <HAL_SPI_Init+0x11c>
 80074ae:	f240 1145 	movw	r1, #325	@ 0x145
 80074b2:	483a      	ldr	r0, [pc, #232]	@ (800759c <HAL_SPI_Init+0x200>)
 80074b4:	f7f9 fd3a 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_SPI_Init+0x136>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	2b80      	cmp	r3, #128	@ 0x80
 80074c6:	d004      	beq.n	80074d2 <HAL_SPI_Init+0x136>
 80074c8:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80074cc:	4833      	ldr	r0, [pc, #204]	@ (800759c <HAL_SPI_Init+0x200>)
 80074ce:	f7f9 fd2d 	bl	8000f2c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_SPI_Init+0x150>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d004      	beq.n	80074ec <HAL_SPI_Init+0x150>
 80074e2:	f240 1147 	movw	r1, #327	@ 0x147
 80074e6:	482d      	ldr	r0, [pc, #180]	@ (800759c <HAL_SPI_Init+0x200>)
 80074e8:	f7f9 fd20 	bl	8000f2c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d155      	bne.n	80075a0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_SPI_Init+0x172>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <HAL_SPI_Init+0x172>
 8007504:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8007508:	4824      	ldr	r0, [pc, #144]	@ (800759c <HAL_SPI_Init+0x200>)
 800750a:	f7f9 fd0f 	bl	8000f2c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <HAL_SPI_Init+0x18c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d004      	beq.n	8007528 <HAL_SPI_Init+0x18c>
 800751e:	f240 114b 	movw	r1, #331	@ 0x14b
 8007522:	481e      	ldr	r0, [pc, #120]	@ (800759c <HAL_SPI_Init+0x200>)
 8007524:	f7f9 fd02 	bl	8000f2c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007530:	d125      	bne.n	800757e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d05d      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d059      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b10      	cmp	r3, #16
 8007548:	d055      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	2b18      	cmp	r3, #24
 8007550:	d051      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b20      	cmp	r3, #32
 8007558:	d04d      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b28      	cmp	r3, #40	@ 0x28
 8007560:	d049      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	2b30      	cmp	r3, #48	@ 0x30
 8007568:	d045      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	2b38      	cmp	r3, #56	@ 0x38
 8007570:	d041      	beq.n	80075f6 <HAL_SPI_Init+0x25a>
 8007572:	f240 114f 	movw	r1, #335	@ 0x14f
 8007576:	4809      	ldr	r0, [pc, #36]	@ (800759c <HAL_SPI_Init+0x200>)
 8007578:	f7f9 fcd8 	bl	8000f2c <assert_failed>
 800757c:	e03b      	b.n	80075f6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	61da      	str	r2, [r3, #28]
 8007584:	e037      	b.n	80075f6 <HAL_SPI_Init+0x25a>
 8007586:	bf00      	nop
 8007588:	40013000 	.word	0x40013000
 800758c:	40003800 	.word	0x40003800
 8007590:	40003c00 	.word	0x40003c00
 8007594:	40013400 	.word	0x40013400
 8007598:	40015000 	.word	0x40015000
 800759c:	0800c214 	.word	0x0800c214
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d020      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d01c      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d018      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	2b18      	cmp	r3, #24
 80075be:	d014      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d010      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	2b28      	cmp	r3, #40	@ 0x28
 80075ce:	d00c      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b30      	cmp	r3, #48	@ 0x30
 80075d6:	d008      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2b38      	cmp	r3, #56	@ 0x38
 80075de:	d004      	beq.n	80075ea <HAL_SPI_Init+0x24e>
 80075e0:	f240 1159 	movw	r1, #345	@ 0x159
 80075e4:	483a      	ldr	r0, [pc, #232]	@ (80076d0 <HAL_SPI_Init+0x334>)
 80075e6:	f7f9 fca1 	bl	8000f2c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7f9 fccd 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800762c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767a:	ea42 0103 	orr.w	r1, r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	f003 0104 	and.w	r1, r3, #4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	f003 0210 	and.w	r2, r3, #16
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	0800c214 	.word	0x0800c214

080076d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0a3      	b.n	800782e <HAL_UART_Init+0x15a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d02c      	beq.n	8007748 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a51      	ldr	r2, [pc, #324]	@ (8007838 <HAL_UART_Init+0x164>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_UART_Init+0x42>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a4f      	ldr	r2, [pc, #316]	@ (800783c <HAL_UART_Init+0x168>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <HAL_UART_Init+0x42>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a4e      	ldr	r2, [pc, #312]	@ (8007840 <HAL_UART_Init+0x16c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d004      	beq.n	8007716 <HAL_UART_Init+0x42>
 800770c:	f240 1173 	movw	r1, #371	@ 0x173
 8007710:	484c      	ldr	r0, [pc, #304]	@ (8007844 <HAL_UART_Init+0x170>)
 8007712:	f7f9 fc0b 	bl	8000f2c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d028      	beq.n	8007770 <HAL_UART_Init+0x9c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007726:	d023      	beq.n	8007770 <HAL_UART_Init+0x9c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007730:	d01e      	beq.n	8007770 <HAL_UART_Init+0x9c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800773a:	d019      	beq.n	8007770 <HAL_UART_Init+0x9c>
 800773c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007740:	4840      	ldr	r0, [pc, #256]	@ (8007844 <HAL_UART_Init+0x170>)
 8007742:	f7f9 fbf3 	bl	8000f2c <assert_failed>
 8007746:	e013      	b.n	8007770 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a3a      	ldr	r2, [pc, #232]	@ (8007838 <HAL_UART_Init+0x164>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <HAL_UART_Init+0x9c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a39      	ldr	r2, [pc, #228]	@ (800783c <HAL_UART_Init+0x168>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_UART_Init+0x9c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a37      	ldr	r2, [pc, #220]	@ (8007840 <HAL_UART_Init+0x16c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_UART_Init+0x9c>
 8007766:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 800776a:	4836      	ldr	r0, [pc, #216]	@ (8007844 <HAL_UART_Init+0x170>)
 800776c:	f7f9 fbde 	bl	8000f2c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <HAL_UART_Init+0xb8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007780:	d004      	beq.n	800778c <HAL_UART_Init+0xb8>
 8007782:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8007786:	482f      	ldr	r0, [pc, #188]	@ (8007844 <HAL_UART_Init+0x170>)
 8007788:	f7f9 fbd0 	bl	8000f2c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <HAL_UART_Init+0xd4>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779c:	d004      	beq.n	80077a8 <HAL_UART_Init+0xd4>
 800779e:	f240 117b 	movw	r1, #379	@ 0x17b
 80077a2:	4828      	ldr	r0, [pc, #160]	@ (8007844 <HAL_UART_Init+0x170>)
 80077a4:	f7f9 fbc2 	bl	8000f2c <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7f9 fd6f 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2224      	movs	r2, #36	@ 0x24
 80077c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f834 	bl	8007848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800780e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40011000 	.word	0x40011000
 800783c:	40004400 	.word	0x40004400
 8007840:	40011400 	.word	0x40011400
 8007844:	0800c24c 	.word	0x0800c24c

08007848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800784c:	b0c0      	sub	sp, #256	@ 0x100
 800784e:	af00      	add	r7, sp, #0
 8007850:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	4bcf      	ldr	r3, [pc, #828]	@ (8007b98 <UART_SetConfig+0x350>)
 800785c:	429a      	cmp	r2, r3
 800785e:	d904      	bls.n	800786a <UART_SetConfig+0x22>
 8007860:	f640 6175 	movw	r1, #3701	@ 0xe75
 8007864:	48cd      	ldr	r0, [pc, #820]	@ (8007b9c <UART_SetConfig+0x354>)
 8007866:	f7f9 fb61 	bl	8000f2c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800786a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_SetConfig+0x42>
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800787e:	d004      	beq.n	800788a <UART_SetConfig+0x42>
 8007880:	f640 6176 	movw	r1, #3702	@ 0xe76
 8007884:	48c5      	ldr	r0, [pc, #788]	@ (8007b9c <UART_SetConfig+0x354>)
 8007886:	f7f9 fb51 	bl	8000f2c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d010      	beq.n	80078b6 <UART_SetConfig+0x6e>
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789e:	d00a      	beq.n	80078b6 <UART_SetConfig+0x6e>
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80078aa:	d004      	beq.n	80078b6 <UART_SetConfig+0x6e>
 80078ac:	f640 6177 	movw	r1, #3703	@ 0xe77
 80078b0:	48ba      	ldr	r0, [pc, #744]	@ (8007b9c <UART_SetConfig+0x354>)
 80078b2:	f7f9 fb3b 	bl	8000f2c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80078b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 80078c0:	4013      	ands	r3, r2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <UART_SetConfig+0x88>
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <UART_SetConfig+0x92>
 80078d0:	f640 6178 	movw	r1, #3704	@ 0xe78
 80078d4:	48b1      	ldr	r0, [pc, #708]	@ (8007b9c <UART_SetConfig+0x354>)
 80078d6:	f7f9 fb29 	bl	8000f2c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ea:	68d9      	ldr	r1, [r3, #12]
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	ea40 0301 	orr.w	r3, r0, r1
 80078f6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	431a      	orrs	r2, r3
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	431a      	orrs	r2, r3
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007926:	f021 010c 	bic.w	r1, r1, #12
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007934:	430b      	orrs	r3, r1
 8007936:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	6999      	ldr	r1, [r3, #24]
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	ea40 0301 	orr.w	r3, r0, r1
 8007954:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b90      	ldr	r3, [pc, #576]	@ (8007ba0 <UART_SetConfig+0x358>)
 800795e:	429a      	cmp	r2, r3
 8007960:	d005      	beq.n	800796e <UART_SetConfig+0x126>
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4b8e      	ldr	r3, [pc, #568]	@ (8007ba4 <UART_SetConfig+0x35c>)
 800796a:	429a      	cmp	r2, r3
 800796c:	d104      	bne.n	8007978 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800796e:	f7ff fa89 	bl	8006e84 <HAL_RCC_GetPCLK2Freq>
 8007972:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007976:	e003      	b.n	8007980 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007978:	f7ff fa70 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 800797c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800798a:	f040 810f 	bne.w	8007bac <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800798e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007992:	2200      	movs	r2, #0
 8007994:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007998:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800799c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079a0:	4622      	mov	r2, r4
 80079a2:	462b      	mov	r3, r5
 80079a4:	1891      	adds	r1, r2, r2
 80079a6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079a8:	415b      	adcs	r3, r3
 80079aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079b0:	4621      	mov	r1, r4
 80079b2:	eb12 0801 	adds.w	r8, r2, r1
 80079b6:	4629      	mov	r1, r5
 80079b8:	eb43 0901 	adc.w	r9, r3, r1
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079d0:	4690      	mov	r8, r2
 80079d2:	4699      	mov	r9, r3
 80079d4:	4623      	mov	r3, r4
 80079d6:	eb18 0303 	adds.w	r3, r8, r3
 80079da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079de:	462b      	mov	r3, r5
 80079e0:	eb49 0303 	adc.w	r3, r9, r3
 80079e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079f4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079fc:	460b      	mov	r3, r1
 80079fe:	18db      	adds	r3, r3, r3
 8007a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a02:	4613      	mov	r3, r2
 8007a04:	eb42 0303 	adc.w	r3, r2, r3
 8007a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a0e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a12:	f7f8 fbe1 	bl	80001d8 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4b63      	ldr	r3, [pc, #396]	@ (8007ba8 <UART_SetConfig+0x360>)
 8007a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	011c      	lsls	r4, r3, #4
 8007a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a2e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a32:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a36:	4642      	mov	r2, r8
 8007a38:	464b      	mov	r3, r9
 8007a3a:	1891      	adds	r1, r2, r2
 8007a3c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a3e:	415b      	adcs	r3, r3
 8007a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a46:	4641      	mov	r1, r8
 8007a48:	eb12 0a01 	adds.w	sl, r2, r1
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	eb43 0b01 	adc.w	fp, r3, r1
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a66:	4692      	mov	sl, r2
 8007a68:	469b      	mov	fp, r3
 8007a6a:	4643      	mov	r3, r8
 8007a6c:	eb1a 0303 	adds.w	r3, sl, r3
 8007a70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a74:	464b      	mov	r3, r9
 8007a76:	eb4b 0303 	adc.w	r3, fp, r3
 8007a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a8a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a92:	460b      	mov	r3, r1
 8007a94:	18db      	adds	r3, r3, r3
 8007a96:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a98:	4613      	mov	r3, r2
 8007a9a:	eb42 0303 	adc.w	r3, r2, r3
 8007a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007aa4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007aa8:	f7f8 fb96 	bl	80001d8 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8007ba8 <UART_SetConfig+0x360>)
 8007ab4:	fba3 2301 	umull	r2, r3, r3, r1
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2264      	movs	r2, #100	@ 0x64
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	1acb      	subs	r3, r1, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ac8:	4b37      	ldr	r3, [pc, #220]	@ (8007ba8 <UART_SetConfig+0x360>)
 8007aca:	fba3 2302 	umull	r2, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ad6:	441c      	add	r4, r3
 8007ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ae2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ae6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	1891      	adds	r1, r2, r2
 8007af0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007af2:	415b      	adcs	r3, r3
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007afa:	4641      	mov	r1, r8
 8007afc:	1851      	adds	r1, r2, r1
 8007afe:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b00:	4649      	mov	r1, r9
 8007b02:	414b      	adcs	r3, r1
 8007b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b06:	f04f 0200 	mov.w	r2, #0
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b12:	4659      	mov	r1, fp
 8007b14:	00cb      	lsls	r3, r1, #3
 8007b16:	4651      	mov	r1, sl
 8007b18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b1c:	4651      	mov	r1, sl
 8007b1e:	00ca      	lsls	r2, r1, #3
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	4642      	mov	r2, r8
 8007b28:	189b      	adds	r3, r3, r2
 8007b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b2e:	464b      	mov	r3, r9
 8007b30:	460a      	mov	r2, r1
 8007b32:	eb42 0303 	adc.w	r3, r2, r3
 8007b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b4e:	460b      	mov	r3, r1
 8007b50:	18db      	adds	r3, r3, r3
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b54:	4613      	mov	r3, r2
 8007b56:	eb42 0303 	adc.w	r3, r2, r3
 8007b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b60:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b64:	f7f8 fb38 	bl	80001d8 <__aeabi_uldivmod>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <UART_SetConfig+0x360>)
 8007b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	2164      	movs	r1, #100	@ 0x64
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	3332      	adds	r3, #50	@ 0x32
 8007b80:	4a09      	ldr	r2, [pc, #36]	@ (8007ba8 <UART_SetConfig+0x360>)
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	f003 0207 	and.w	r2, r3, #7
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4422      	add	r2, r4
 8007b94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b96:	e109      	b.n	8007dac <UART_SetConfig+0x564>
 8007b98:	00a037a0 	.word	0x00a037a0
 8007b9c:	0800c24c 	.word	0x0800c24c
 8007ba0:	40011000 	.word	0x40011000
 8007ba4:	40011400 	.word	0x40011400
 8007ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	1891      	adds	r1, r2, r2
 8007bc4:	6239      	str	r1, [r7, #32]
 8007bc6:	415b      	adcs	r3, r3
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bce:	4641      	mov	r1, r8
 8007bd0:	1854      	adds	r4, r2, r1
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	eb43 0501 	adc.w	r5, r3, r1
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	00eb      	lsls	r3, r5, #3
 8007be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007be6:	00e2      	lsls	r2, r4, #3
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	4643      	mov	r3, r8
 8007bee:	18e3      	adds	r3, r4, r3
 8007bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	eb45 0303 	adc.w	r3, r5, r3
 8007bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	008b      	lsls	r3, r1, #2
 8007c1e:	4621      	mov	r1, r4
 8007c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c24:	4621      	mov	r1, r4
 8007c26:	008a      	lsls	r2, r1, #2
 8007c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c2c:	f7f8 fad4 	bl	80001d8 <__aeabi_uldivmod>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4b60      	ldr	r3, [pc, #384]	@ (8007db8 <UART_SetConfig+0x570>)
 8007c36:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	011c      	lsls	r4, r3, #4
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	61b9      	str	r1, [r7, #24]
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c60:	4641      	mov	r1, r8
 8007c62:	1851      	adds	r1, r2, r1
 8007c64:	6139      	str	r1, [r7, #16]
 8007c66:	4649      	mov	r1, r9
 8007c68:	414b      	adcs	r3, r1
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c78:	4659      	mov	r1, fp
 8007c7a:	00cb      	lsls	r3, r1, #3
 8007c7c:	4651      	mov	r1, sl
 8007c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c82:	4651      	mov	r1, sl
 8007c84:	00ca      	lsls	r2, r1, #3
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	189b      	adds	r3, r3, r2
 8007c90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c94:	464b      	mov	r3, r9
 8007c96:	460a      	mov	r2, r1
 8007c98:	eb42 0303 	adc.w	r3, r2, r3
 8007c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007caa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cb8:	4649      	mov	r1, r9
 8007cba:	008b      	lsls	r3, r1, #2
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	008a      	lsls	r2, r1, #2
 8007cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cca:	f7f8 fa85 	bl	80001d8 <__aeabi_uldivmod>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4b38      	ldr	r3, [pc, #224]	@ (8007db8 <UART_SetConfig+0x570>)
 8007cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	2264      	movs	r2, #100	@ 0x64
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	1acb      	subs	r3, r1, r3
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	3332      	adds	r3, #50	@ 0x32
 8007ce8:	4a33      	ldr	r2, [pc, #204]	@ (8007db8 <UART_SetConfig+0x570>)
 8007cea:	fba2 2303 	umull	r2, r3, r2, r3
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cf4:	441c      	add	r4, r3
 8007cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d04:	4642      	mov	r2, r8
 8007d06:	464b      	mov	r3, r9
 8007d08:	1891      	adds	r1, r2, r2
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	415b      	adcs	r3, r3
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d14:	4641      	mov	r1, r8
 8007d16:	1851      	adds	r1, r2, r1
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	414b      	adcs	r3, r1
 8007d1e:	607b      	str	r3, [r7, #4]
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	00cb      	lsls	r3, r1, #3
 8007d30:	4651      	mov	r1, sl
 8007d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d36:	4651      	mov	r1, sl
 8007d38:	00ca      	lsls	r2, r1, #3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4642      	mov	r2, r8
 8007d42:	189b      	adds	r3, r3, r2
 8007d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d46:	464b      	mov	r3, r9
 8007d48:	460a      	mov	r2, r1
 8007d4a:	eb42 0303 	adc.w	r3, r2, r3
 8007d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d68:	4649      	mov	r1, r9
 8007d6a:	008b      	lsls	r3, r1, #2
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d72:	4641      	mov	r1, r8
 8007d74:	008a      	lsls	r2, r1, #2
 8007d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d7a:	f7f8 fa2d 	bl	80001d8 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <UART_SetConfig+0x570>)
 8007d84:	fba3 1302 	umull	r1, r3, r3, r2
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	2164      	movs	r1, #100	@ 0x64
 8007d8c:	fb01 f303 	mul.w	r3, r1, r3
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	3332      	adds	r3, #50	@ 0x32
 8007d96:	4a08      	ldr	r2, [pc, #32]	@ (8007db8 <UART_SetConfig+0x570>)
 8007d98:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	f003 020f 	and.w	r2, r3, #15
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4422      	add	r2, r4
 8007daa:	609a      	str	r2, [r3, #8]
}
 8007dac:	bf00      	nop
 8007dae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007db2:	46bd      	mov	sp, r7
 8007db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db8:	51eb851f 	.word	0x51eb851f

08007dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	f107 001c 	add.w	r0, r7, #28
 8007dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d123      	bne.n	8007e1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d105      	bne.n	8007e12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9dc 	bl	80081d0 <USB_CoreReset>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
 8007e1c:	e01b      	b.n	8007e56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9d0 	bl	80081d0 <USB_CoreReset>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e48:	e005      	b.n	8007e56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e56:	7fbb      	ldrb	r3, [r7, #30]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d10b      	bne.n	8007e74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f043 0206 	orr.w	r2, r3, #6
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e80:	b004      	add	sp, #16
 8007e82:	4770      	bx	lr

08007e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f043 0201 	orr.w	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d115      	bne.n	8007f16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ef6:	200a      	movs	r0, #10
 8007ef8:	f7f9 fad6 	bl	80014a8 <HAL_Delay>
      ms += 10U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	330a      	adds	r3, #10
 8007f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f956 	bl	80081b4 <USB_GetMode>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d01e      	beq.n	8007f4c <USB_SetCurrentMode+0x84>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f12:	d9f0      	bls.n	8007ef6 <USB_SetCurrentMode+0x2e>
 8007f14:	e01a      	b.n	8007f4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d115      	bne.n	8007f48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f28:	200a      	movs	r0, #10
 8007f2a:	f7f9 fabd 	bl	80014a8 <HAL_Delay>
      ms += 10U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	330a      	adds	r3, #10
 8007f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f93d 	bl	80081b4 <USB_GetMode>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <USB_SetCurrentMode+0x84>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f44:	d9f0      	bls.n	8007f28 <USB_SetCurrentMode+0x60>
 8007f46:	e001      	b.n	8007f4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e005      	b.n	8007f58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f50:	d101      	bne.n	8007f56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f7a:	d901      	bls.n	8007f80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e01b      	b.n	8007fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	daf2      	bge.n	8007f6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	019b      	lsls	r3, r3, #6
 8007f90:	f043 0220 	orr.w	r2, r3, #32
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fa4:	d901      	bls.n	8007faa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e006      	b.n	8007fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d0f0      	beq.n	8007f98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fdc:	d901      	bls.n	8007fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e018      	b.n	8008014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	daf2      	bge.n	8007fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2210      	movs	r2, #16
 8007ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008000:	d901      	bls.n	8008006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e006      	b.n	8008014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b10      	cmp	r3, #16
 8008010:	d0f0      	beq.n	8007ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	@ 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4611      	mov	r1, r2
 800802c:	461a      	mov	r2, r3
 800802e:	460b      	mov	r3, r1
 8008030:	71fb      	strb	r3, [r7, #7]
 8008032:	4613      	mov	r3, r2
 8008034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800803e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d123      	bne.n	800808e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008046:	88bb      	ldrh	r3, [r7, #4]
 8008048:	3303      	adds	r3, #3
 800804a:	089b      	lsrs	r3, r3, #2
 800804c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	e018      	b.n	8008086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	031a      	lsls	r2, r3, #12
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4413      	add	r3, r2
 800805c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008060:	461a      	mov	r2, r3
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3301      	adds	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	3301      	adds	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3301      	adds	r3, #1
 8008078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	3301      	adds	r3, #1
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	429a      	cmp	r2, r3
 800808c:	d3e2      	bcc.n	8008054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3724      	adds	r7, #36	@ 0x24
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800809c:	b480      	push	{r7}
 800809e:	b08b      	sub	sp, #44	@ 0x2c
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	089b      	lsrs	r3, r3, #2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	e014      	b.n	80080f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	3301      	adds	r3, #1
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	3301      	adds	r3, #1
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	3301      	adds	r3, #1
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	3301      	adds	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	3301      	adds	r3, #1
 80080f0:	623b      	str	r3, [r7, #32]
 80080f2:	6a3a      	ldr	r2, [r7, #32]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3e6      	bcc.n	80080c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080fa:	8bfb      	ldrh	r3, [r7, #30]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800810a:	461a      	mov	r2, r3
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	b2da      	uxtb	r2, r3
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	701a      	strb	r2, [r3, #0]
      i++;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	3301      	adds	r3, #1
 800812a:	623b      	str	r3, [r7, #32]
      pDest++;
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	3301      	adds	r3, #1
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008132:	8bfb      	ldrh	r3, [r7, #30]
 8008134:	3b01      	subs	r3, #1
 8008136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008138:	8bfb      	ldrh	r3, [r7, #30]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1ea      	bne.n	8008114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008140:	4618      	mov	r0, r3
 8008142:	372c      	adds	r7, #44	@ 0x2c
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4013      	ands	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	4013      	ands	r3, r2
 80081a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081a6:	68bb      	ldr	r3, [r7, #8]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0301 	and.w	r3, r3, #1
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081e8:	d901      	bls.n	80081ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e01b      	b.n	8008226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	daf2      	bge.n	80081dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f043 0201 	orr.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008212:	d901      	bls.n	8008218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e006      	b.n	8008226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d0f0      	beq.n	8008206 <USB_CoreReset+0x36>

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008234:	b084      	sub	sp, #16
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008254:	461a      	mov	r2, r3
 8008256:	2300      	movs	r3, #0
 8008258:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d119      	bne.n	80082be <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800828a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800828e:	2b01      	cmp	r3, #1
 8008290:	d10a      	bne.n	80082a8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e014      	b.n	80082d2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082b6:	f023 0304 	bic.w	r3, r3, #4
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	e009      	b.n	80082d2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082cc:	f023 0304 	bic.w	r3, r3, #4
 80082d0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082d2:	2110      	movs	r1, #16
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fe43 	bl	8007f60 <USB_FlushTxFifo>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fe6d 	bl	8007fc4 <USB_FlushRxFifo>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	e015      	b.n	8008326 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008306:	461a      	mov	r2, r3
 8008308:	f04f 33ff 	mov.w	r3, #4294967295
 800830c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3301      	adds	r3, #1
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800832a:	461a      	mov	r2, r3
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	4293      	cmp	r3, r2
 8008330:	d3e3      	bcc.n	80082fa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2280      	movs	r2, #128	@ 0x80
 8008344:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <USB_HostInit+0x150>)
 800834a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a0e      	ldr	r2, [pc, #56]	@ (8008388 <USB_HostInit+0x154>)
 8008350:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008358:	2b00      	cmp	r3, #0
 800835a:	d105      	bne.n	8008368 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	f043 0210 	orr.w	r2, r3, #16
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	4b07      	ldr	r3, [pc, #28]	@ (800838c <USB_HostInit+0x158>)
 800836e:	4313      	orrs	r3, r2
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008380:	b004      	add	sp, #16
 8008382:	4770      	bx	lr
 8008384:	00600080 	.word	0x00600080
 8008388:	004000e0 	.word	0x004000e0
 800838c:	a3200008 	.word	0xa3200008

08008390 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80083c8:	4313      	orrs	r3, r2
 80083ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d107      	bne.n	80083e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083d8:	461a      	mov	r2, r3
 80083da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80083de:	6053      	str	r3, [r2, #4]
 80083e0:	e00c      	b.n	80083fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d107      	bne.n	80083f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ee:	461a      	mov	r2, r3
 80083f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80083f4:	6053      	str	r3, [r2, #4]
 80083f6:	e001      	b.n	80083fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800842a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008438:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800843a:	2064      	movs	r0, #100	@ 0x64
 800843c:	f7f9 f834 	bl	80014a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800844c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800844e:	200a      	movs	r0, #10
 8008450:	f7f9 f82a 	bl	80014a8 <HAL_Delay>

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008482:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <USB_DriveVbus+0x44>
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d106      	bne.n	80084a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800849c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ac:	d109      	bne.n	80084c2 <USB_DriveVbus+0x64>
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	0c5b      	lsrs	r3, r3, #17
 80084ee:	f003 0303 	and.w	r3, r3, #3
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	b29b      	uxth	r3, r3
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	461a      	mov	r2, r3
 800852e:	4603      	mov	r3, r0
 8008530:	70fb      	strb	r3, [r7, #3]
 8008532:	460b      	mov	r3, r1
 8008534:	70bb      	strb	r3, [r7, #2]
 8008536:	4613      	mov	r3, r2
 8008538:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854e:	461a      	mov	r2, r3
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008556:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800855a:	2b03      	cmp	r3, #3
 800855c:	d867      	bhi.n	800862e <USB_HC_Init+0x10e>
 800855e:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <USB_HC_Init+0x44>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	08008575 	.word	0x08008575
 8008568:	080085f1 	.word	0x080085f1
 800856c:	08008575 	.word	0x08008575
 8008570:	080085b3 	.word	0x080085b3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008580:	461a      	mov	r2, r3
 8008582:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008586:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008588:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da51      	bge.n	8008634 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80085b0:	e040      	b.n	8008634 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085be:	461a      	mov	r2, r3
 80085c0:	f240 639d 	movw	r3, #1693	@ 0x69d
 80085c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da34      	bge.n	8008638 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ec:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085ee:	e023      	b.n	8008638 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fc:	461a      	mov	r2, r3
 80085fe:	f240 2325 	movw	r3, #549	@ 0x225
 8008602:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008604:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	da17      	bge.n	800863c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	440a      	add	r2, r1
 8008622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008626:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800862a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800862c:	e006      	b.n	800863c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	77fb      	strb	r3, [r7, #31]
      break;
 8008632:	e004      	b.n	800863e <USB_HC_Init+0x11e>
      break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <USB_HC_Init+0x11e>
      break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <USB_HC_Init+0x11e>
      break;
 800863c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800864a:	461a      	mov	r2, r3
 800864c:	2300      	movs	r3, #0
 800864e:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4413      	add	r3, r2
 8008658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	440a      	add	r2, r1
 8008666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800866a:	f043 0302 	orr.w	r3, r3, #2
 800866e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	2101      	movs	r1, #1
 8008680:	fa01 f303 	lsl.w	r3, r1, r3
 8008684:	6939      	ldr	r1, [r7, #16]
 8008686:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800868a:	4313      	orrs	r3, r2
 800868c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800869a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da03      	bge.n	80086aa <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80086a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086a6:	61bb      	str	r3, [r7, #24]
 80086a8:	e001      	b.n	80086ae <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ff0e 	bl	80084d0 <USB_GetHostSpeed>
 80086b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80086b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d106      	bne.n	80086cc <USB_HC_Init+0x1ac>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d003      	beq.n	80086cc <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e001      	b.n	80086d0 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086d0:	787b      	ldrb	r3, [r7, #1]
 80086d2:	059b      	lsls	r3, r3, #22
 80086d4:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086d8:	78bb      	ldrb	r3, [r7, #2]
 80086da:	02db      	lsls	r3, r3, #11
 80086dc:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086e6:	049b      	lsls	r3, r3, #18
 80086e8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80086ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80086f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086f4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	440a      	add	r2, r1
 8008706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800870a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800870e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008710:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008714:	2b03      	cmp	r3, #3
 8008716:	d003      	beq.n	8008720 <USB_HC_Init+0x200>
 8008718:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	78fa      	ldrb	r2, [r7, #3]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	440a      	add	r2, r1
 8008736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800873a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800873e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008740:	7ffb      	ldrb	r3, [r7, #31]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3720      	adds	r7, #32
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	@ 0x30
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008768:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	799b      	ldrb	r3, [r3, #6]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d158      	bne.n	8008824 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008772:	2301      	movs	r3, #1
 8008774:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	78db      	ldrb	r3, [r3, #3]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800877e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	8a92      	ldrh	r2, [r2, #20]
 8008784:	fb03 f202 	mul.w	r2, r3, r2
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	61da      	str	r2, [r3, #28]
 800878c:	e079      	b.n	8008882 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	7c9b      	ldrb	r3, [r3, #18]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d130      	bne.n	80087f8 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	2bbc      	cmp	r3, #188	@ 0xbc
 800879c:	d918      	bls.n	80087d0 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	8a9b      	ldrh	r3, [r3, #20]
 80087a2:	461a      	mov	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d003      	beq.n	80087c0 <USB_HC_StartXfer+0x74>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d103      	bne.n	80087c8 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2202      	movs	r2, #2
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	e05c      	b.n	8008882 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2201      	movs	r2, #1
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	e058      	b.n	8008882 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6a1a      	ldr	r2, [r3, #32]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d007      	beq.n	80087f0 <USB_HC_StartXfer+0xa4>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d003      	beq.n	80087f0 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2204      	movs	r2, #4
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e048      	b.n	8008882 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2203      	movs	r2, #3
 80087f4:	60da      	str	r2, [r3, #12]
 80087f6:	e044      	b.n	8008882 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d10d      	bne.n	800881a <USB_HC_StartXfer+0xce>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	8a92      	ldrh	r2, [r2, #20]
 8008806:	4293      	cmp	r3, r2
 8008808:	d907      	bls.n	800881a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800880a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	8a92      	ldrh	r2, [r2, #20]
 8008810:	fb03 f202 	mul.w	r2, r3, r2
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	61da      	str	r2, [r3, #28]
 8008818:	e033      	b.n	8008882 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	61da      	str	r2, [r3, #28]
 8008822:	e02e      	b.n	8008882 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d018      	beq.n	800885e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	8a92      	ldrh	r2, [r2, #20]
 8008834:	4413      	add	r3, r2
 8008836:	3b01      	subs	r3, #1
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	8a92      	ldrh	r2, [r2, #20]
 800883c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008840:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008842:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008844:	8b7b      	ldrh	r3, [r7, #26]
 8008846:	429a      	cmp	r2, r3
 8008848:	d90b      	bls.n	8008862 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800884a:	8b7b      	ldrh	r3, [r7, #26]
 800884c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800884e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	8a92      	ldrh	r2, [r2, #20]
 8008854:	fb03 f202 	mul.w	r2, r3, r2
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	61da      	str	r2, [r3, #28]
 800885c:	e001      	b.n	8008862 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800885e:	2301      	movs	r3, #1
 8008860:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	78db      	ldrb	r3, [r3, #3]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800886a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	8a92      	ldrh	r2, [r2, #20]
 8008870:	fb03 f202 	mul.w	r2, r3, r2
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	61da      	str	r2, [r3, #28]
 8008878:	e003      	b.n	8008882 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6a1a      	ldr	r2, [r3, #32]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800888a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800888c:	04d9      	lsls	r1, r3, #19
 800888e:	4ba4      	ldr	r3, [pc, #656]	@ (8008b20 <USB_HC_StartXfer+0x3d4>)
 8008890:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008892:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	7d9b      	ldrb	r3, [r3, #22]
 8008898:	075b      	lsls	r3, r3, #29
 800889a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800889e:	69f9      	ldr	r1, [r7, #28]
 80088a0:	0148      	lsls	r0, r1, #5
 80088a2:	6a39      	ldr	r1, [r7, #32]
 80088a4:	4401      	add	r1, r0
 80088a6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088aa:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088ac:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6999      	ldr	r1, [r3, #24]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	460a      	mov	r2, r1
 80088c6:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bf0c      	ite	eq
 80088d8:	2301      	moveq	r3, #1
 80088da:	2300      	movne	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088fe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	4413      	add	r3, r2
 8008908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	7e7b      	ldrb	r3, [r7, #25]
 8008910:	075b      	lsls	r3, r3, #29
 8008912:	69f9      	ldr	r1, [r7, #28]
 8008914:	0148      	lsls	r0, r1, #5
 8008916:	6a39      	ldr	r1, [r7, #32]
 8008918:	4401      	add	r1, r0
 800891a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800891e:	4313      	orrs	r3, r2
 8008920:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	799b      	ldrb	r3, [r3, #6]
 8008926:	2b01      	cmp	r3, #1
 8008928:	f040 80c4 	bne.w	8008ab4 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	7c5b      	ldrb	r3, [r3, #17]
 8008930:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008936:	4313      	orrs	r3, r2
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	6a3a      	ldr	r2, [r7, #32]
 800893e:	440a      	add	r2, r1
 8008940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008948:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008964:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008968:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	79db      	ldrb	r3, [r3, #7]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d123      	bne.n	80089ba <USB_HC_StartXfer+0x26e>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	78db      	ldrb	r3, [r3, #3]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d11f      	bne.n	80089ba <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	6a3a      	ldr	r2, [r7, #32]
 800898e:	440a      	add	r2, r1
 8008990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089b8:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	7c9b      	ldrb	r3, [r3, #18]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d003      	beq.n	80089ca <USB_HC_StartXfer+0x27e>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	7c9b      	ldrb	r3, [r3, #18]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d117      	bne.n	80089fa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d113      	bne.n	80089fa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d10f      	bne.n	80089fa <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	6a3a      	ldr	r2, [r7, #32]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f8:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	7c9b      	ldrb	r3, [r3, #18]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d163      	bne.n	8008aca <USB_HC_StartXfer+0x37e>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	78db      	ldrb	r3, [r3, #3]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d15f      	bne.n	8008aca <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d859      	bhi.n	8008ac8 <USB_HC_StartXfer+0x37c>
 8008a14:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USB_HC_StartXfer+0x2d0>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a4f 	.word	0x08008a4f
 8008a24:	08008a71 	.word	0x08008a71
 8008a28:	08008a93 	.word	0x08008a93
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a4a:	6053      	str	r3, [r2, #4]
          break;
 8008a4c:	e03d      	b.n	8008aca <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a68:	f043 030e 	orr.w	r3, r3, #14
 8008a6c:	6053      	str	r3, [r2, #4]
          break;
 8008a6e:	e02c      	b.n	8008aca <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a8e:	6053      	str	r3, [r2, #4]
          break;
 8008a90:	e01b      	b.n	8008aca <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	6a3a      	ldr	r2, [r7, #32]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ab0:	6053      	str	r3, [r2, #4]
          break;
 8008ab2:	e00a      	b.n	8008aca <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6053      	str	r3, [r2, #4]
 8008ac6:	e000      	b.n	8008aca <USB_HC_StartXfer+0x37e>
          break;
 8008ac8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ae0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	78db      	ldrb	r3, [r3, #3]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	e003      	b.n	8008afc <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008afa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b02:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b10:	461a      	mov	r2, r3
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e055      	b.n	8008bcc <USB_HC_StartXfer+0x480>
 8008b20:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	78db      	ldrb	r3, [r3, #3]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d14e      	bne.n	8008bca <USB_HC_StartXfer+0x47e>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d04a      	beq.n	8008bca <USB_HC_StartXfer+0x47e>
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	79db      	ldrb	r3, [r3, #7]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d146      	bne.n	8008bca <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	7c9b      	ldrb	r3, [r3, #18]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d831      	bhi.n	8008ba8 <USB_HC_StartXfer+0x45c>
 8008b44:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <USB_HC_StartXfer+0x400>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008b81 	.word	0x08008b81
 8008b54:	08008b5d 	.word	0x08008b5d
 8008b58:	08008b81 	.word	0x08008b81
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	3303      	adds	r3, #3
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b66:	8afa      	ldrh	r2, [r7, #22]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d91c      	bls.n	8008bac <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	f043 0220 	orr.w	r2, r3, #32
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b7e:	e015      	b.n	8008bac <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	3303      	adds	r3, #3
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008b8a:	8afa      	ldrh	r2, [r7, #22]
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d90a      	bls.n	8008bb0 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ba6:	e003      	b.n	8008bb0 <USB_HC_StartXfer+0x464>

      default:
        break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <USB_HC_StartXfer+0x466>
        break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <USB_HC_StartXfer+0x466>
        break;
 8008bb0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6999      	ldr	r1, [r3, #24]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	785a      	ldrb	r2, [r3, #1]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	9000      	str	r0, [sp, #0]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fa2b 	bl	8008020 <USB_WritePacket>
  }

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3728      	adds	r7, #40	@ 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	b29b      	uxth	r3, r3
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b089      	sub	sp, #36	@ 0x24
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	0c9b      	lsrs	r3, r3, #18
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	0fdb      	lsrs	r3, r3, #31
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	0fdb      	lsrs	r3, r3, #31
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d10d      	bne.n	8008c78 <USB_HC_Halt+0x82>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <USB_HC_Halt+0x82>
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d002      	beq.n	8008c74 <USB_HC_Halt+0x7e>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d101      	bne.n	8008c78 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e0d8      	b.n	8008e2a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <USB_HC_Halt+0x8e>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d173      	bne.n	8008d6c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ca2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d14a      	bne.n	8008d46 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d133      	bne.n	8008d24 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cda:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cfa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d08:	d82e      	bhi.n	8008d68 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d20:	d0ec      	beq.n	8008cfc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d22:	e081      	b.n	8008e28 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d42:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d44:	e070      	b.n	8008e28 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d66:	e05f      	b.n	8008e28 <USB_HC_Halt+0x232>
            break;
 8008d68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d6a:	e05d      	b.n	8008e28 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d133      	bne.n	8008e04 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dda:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de8:	d81d      	bhi.n	8008e26 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e00:	d0ec      	beq.n	8008ddc <USB_HC_Halt+0x1e6>
 8008e02:	e011      	b.n	8008e28 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	e000      	b.n	8008e28 <USB_HC_Halt+0x232>
          break;
 8008e26:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3724      	adds	r7, #36	@ 0x24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b088      	sub	sp, #32
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff f82b 	bl	8007ea6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e50:	2110      	movs	r1, #16
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff f884 	bl	8007f60 <USB_FlushTxFifo>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff f8ae 	bl	8007fc4 <USB_FlushRxFifo>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e72:	2300      	movs	r3, #0
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	e01f      	b.n	8008eb8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e8e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e96:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e9e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eac:	461a      	mov	r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2b0f      	cmp	r3, #15
 8008ebc:	d9dc      	bls.n	8008e78 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e034      	b.n	8008f2e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eda:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ee2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008eea:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef8:	461a      	mov	r2, r3
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f0a:	d80c      	bhi.n	8008f26 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f22:	d0ec      	beq.n	8008efe <USB_StopHost+0xc8>
 8008f24:	e000      	b.n	8008f28 <USB_StopHost+0xf2>
        break;
 8008f26:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b0f      	cmp	r3, #15
 8008f32:	d9c7      	bls.n	8008ec4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f40:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295
 8008f48:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fe ff9a 	bl	8007e84 <USB_EnableGlobalInt>

  return ret;
 8008f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f5a:	b590      	push	{r4, r7, lr}
 8008f5c:	b089      	sub	sp, #36	@ 0x24
 8008f5e:	af04      	add	r7, sp, #16
 8008f60:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008f62:	2301      	movs	r3, #1
 8008f64:	2202      	movs	r2, #2
 8008f66:	2102      	movs	r1, #2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc86 	bl	800987a <USBH_FindInterface>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2bff      	cmp	r3, #255	@ 0xff
 8008f76:	d002      	beq.n	8008f7e <USBH_CDC_InterfaceInit+0x24>
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d901      	bls.n	8008f82 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	e13d      	b.n	80091fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fc5b 	bl	8009842 <USBH_SelectInterface>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f96:	2302      	movs	r3, #2
 8008f98:	e131      	b.n	80091fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008fa0:	2050      	movs	r0, #80	@ 0x50
 8008fa2:	f002 fb65 	bl	800b670 <malloc>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e11f      	b.n	80091fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008fbe:	2250      	movs	r2, #80	@ 0x50
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68b8      	ldr	r0, [r7, #8]
 8008fc4:	f002 fe0a 	bl	800bbdc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	211a      	movs	r1, #26
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b25b      	sxtb	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da15      	bge.n	800900c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	211a      	movs	r1, #26
 8008fe6:	fb01 f303 	mul.w	r3, r1, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ff0:	781a      	ldrb	r2, [r3, #0]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	211a      	movs	r1, #26
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	4413      	add	r3, r2
 8009002:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009006:	881a      	ldrh	r2, [r3, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 ffbf 	bl	800af96 <USBH_AllocPipe>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	7819      	ldrb	r1, [r3, #0]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	7858      	ldrb	r0, [r3, #1]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	8952      	ldrh	r2, [r2, #10]
 8009038:	9202      	str	r2, [sp, #8]
 800903a:	2203      	movs	r2, #3
 800903c:	9201      	str	r2, [sp, #4]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4623      	mov	r3, r4
 8009042:	4602      	mov	r2, r0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 ff77 	bl	800af38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f002 fa86 	bl	800b564 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009058:	2300      	movs	r3, #0
 800905a:	2200      	movs	r2, #0
 800905c:	210a      	movs	r1, #10
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fc0b 	bl	800987a <USBH_FindInterface>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	2bff      	cmp	r3, #255	@ 0xff
 800906c:	d002      	beq.n	8009074 <USBH_CDC_InterfaceInit+0x11a>
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d901      	bls.n	8009078 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009074:	2302      	movs	r3, #2
 8009076:	e0c2      	b.n	80091fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	211a      	movs	r1, #26
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b25b      	sxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	da16      	bge.n	80090be <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	211a      	movs	r1, #26
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	4413      	add	r3, r2
 800909c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	211a      	movs	r1, #26
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80090b6:	881a      	ldrh	r2, [r3, #0]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	835a      	strh	r2, [r3, #26]
 80090bc:	e015      	b.n	80090ea <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	211a      	movs	r1, #26
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	211a      	movs	r1, #26
 80090da:	fb01 f303 	mul.w	r3, r1, r3
 80090de:	4413      	add	r3, r2
 80090e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80090e4:	881a      	ldrh	r2, [r3, #0]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	211a      	movs	r1, #26
 80090f0:	fb01 f303 	mul.w	r3, r1, r3
 80090f4:	4413      	add	r3, r2
 80090f6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	b25b      	sxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da16      	bge.n	8009130 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	211a      	movs	r1, #26
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	4413      	add	r3, r2
 800910e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	211a      	movs	r1, #26
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	835a      	strh	r2, [r3, #26]
 800912e:	e015      	b.n	800915c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	211a      	movs	r1, #26
 8009136:	fb01 f303 	mul.w	r3, r1, r3
 800913a:	4413      	add	r3, r2
 800913c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009140:	781a      	ldrb	r2, [r3, #0]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	211a      	movs	r1, #26
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	4413      	add	r3, r2
 8009152:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	7b9b      	ldrb	r3, [r3, #14]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 ff17 	bl	800af96 <USBH_AllocPipe>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	7bdb      	ldrb	r3, [r3, #15]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 ff0d 	bl	800af96 <USBH_AllocPipe>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	7b59      	ldrb	r1, [r3, #13]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	7b98      	ldrb	r0, [r3, #14]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	8b12      	ldrh	r2, [r2, #24]
 800919c:	9202      	str	r2, [sp, #8]
 800919e:	2202      	movs	r2, #2
 80091a0:	9201      	str	r2, [sp, #4]
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	4623      	mov	r3, r4
 80091a6:	4602      	mov	r2, r0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fec5 	bl	800af38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	7b19      	ldrb	r1, [r3, #12]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	7bd8      	ldrb	r0, [r3, #15]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	8b52      	ldrh	r2, [r2, #26]
 80091c6:	9202      	str	r2, [sp, #8]
 80091c8:	2202      	movs	r2, #2
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4623      	mov	r3, r4
 80091d0:	4602      	mov	r2, r0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 feb0 	bl	800af38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	7b5b      	ldrb	r3, [r3, #13]
 80091e4:	2200      	movs	r2, #0
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 f9bb 	bl	800b564 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	7b1b      	ldrb	r3, [r3, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f002 f9b4 	bl	800b564 <USBH_LL_SetToggle>

  return USBH_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	bd90      	pop	{r4, r7, pc}

08009206 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fea5 	bl	800af76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fed0 	bl	800afd8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	7b1b      	ldrb	r3, [r3, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	7b1b      	ldrb	r3, [r3, #12]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 fe92 	bl	800af76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	7b1b      	ldrb	r3, [r3, #12]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 febd 	bl	800afd8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	7b5b      	ldrb	r3, [r3, #13]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	7b5b      	ldrb	r3, [r3, #13]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fe7f 	bl	800af76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	7b5b      	ldrb	r3, [r3, #13]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 feaa 	bl	800afd8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	4618      	mov	r0, r3
 80092a0:	f002 f9ee 	bl	800b680 <free>
    phost->pActiveClass->pData = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092aa:	2200      	movs	r2, #0
 80092ac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3340      	adds	r3, #64	@ 0x40
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8b2 	bl	800943a <GetLineCoding>
 80092d6:	4603      	mov	r3, r0
 80092d8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092e6:	2102      	movs	r1, #2
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009300:	2301      	movs	r3, #1
 8009302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009318:	2b04      	cmp	r3, #4
 800931a:	d877      	bhi.n	800940c <USBH_CDC_Process+0x114>
 800931c:	a201      	add	r2, pc, #4	@ (adr r2, 8009324 <USBH_CDC_Process+0x2c>)
 800931e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009322:	bf00      	nop
 8009324:	08009339 	.word	0x08009339
 8009328:	0800933f 	.word	0x0800933f
 800932c:	0800936f 	.word	0x0800936f
 8009330:	080093e3 	.word	0x080093e3
 8009334:	080093f1 	.word	0x080093f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e06d      	b.n	800941a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f897 	bl	8009478 <SetLineCoding>
 800934a:	4603      	mov	r3, r0
 800934c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800935c:	e058      	b.n	8009410 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d055      	beq.n	8009410 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2204      	movs	r2, #4
 8009368:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800936c:	e050      	b.n	8009410 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	3340      	adds	r3, #64	@ 0x40
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f860 	bl	800943a <GetLineCoding>
 800937a:	4603      	mov	r3, r0
 800937c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d126      	bne.n	80093d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009396:	791b      	ldrb	r3, [r3, #4]
 8009398:	429a      	cmp	r2, r3
 800939a:	d13b      	bne.n	8009414 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d133      	bne.n	8009414 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d12b      	bne.n	8009414 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d124      	bne.n	8009414 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f958 	bl	8009680 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80093d0:	e020      	b.n	8009414 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d01d      	beq.n	8009414 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2204      	movs	r2, #4
 80093dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80093e0:	e018      	b.n	8009414 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f867 	bl	80094b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8da 	bl	80095a2 <CDC_ProcessReception>
      break;
 80093ee:	e014      	b.n	800941a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80093f0:	2100      	movs	r1, #0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 f81a 	bl	800a42c <USBH_ClrFeature>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800940a:	e005      	b.n	8009418 <USBH_CDC_Process+0x120>

    default:
      break;
 800940c:	bf00      	nop
 800940e:	e004      	b.n	800941a <USBH_CDC_Process+0x122>
      break;
 8009410:	bf00      	nop
 8009412:	e002      	b.n	800941a <USBH_CDC_Process+0x122>
      break;
 8009414:	bf00      	nop
 8009416:	e000      	b.n	800941a <USBH_CDC_Process+0x122>
      break;
 8009418:	bf00      	nop

  }

  return status;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	22a1      	movs	r2, #161	@ 0xa1
 8009448:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2221      	movs	r2, #33	@ 0x21
 800944e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2207      	movs	r2, #7
 8009460:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2207      	movs	r2, #7
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fb14 	bl	800aa96 <USBH_CtlReq>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2221      	movs	r2, #33	@ 0x21
 8009486:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2207      	movs	r2, #7
 800949e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2207      	movs	r2, #7
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 faf5 	bl	800aa96 <USBH_CtlReq>
 80094ac:	4603      	mov	r3, r0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af02      	add	r7, sp, #8
 80094bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d002      	beq.n	80094dc <CDC_ProcessTransmission+0x26>
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d023      	beq.n	8009522 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80094da:	e05e      	b.n	800959a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	8b12      	ldrh	r2, [r2, #24]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d90b      	bls.n	8009500 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	69d9      	ldr	r1, [r3, #28]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8b1a      	ldrh	r2, [r3, #24]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	7b5b      	ldrb	r3, [r3, #13]
 80094f4:	2001      	movs	r0, #1
 80094f6:	9000      	str	r0, [sp, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 fcda 	bl	800aeb2 <USBH_BulkSendData>
 80094fe:	e00b      	b.n	8009518 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	7b5b      	ldrb	r3, [r3, #13]
 800950e:	2001      	movs	r0, #1
 8009510:	9000      	str	r0, [sp, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fccd 	bl	800aeb2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009520:	e03b      	b.n	800959a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	7b5b      	ldrb	r3, [r3, #13]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 fff1 	bl	800b510 <USBH_LL_GetURBState>
 800952e:	4603      	mov	r3, r0
 8009530:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009532:	7afb      	ldrb	r3, [r7, #11]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d128      	bne.n	800958a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	8b12      	ldrh	r2, [r2, #24]
 8009540:	4293      	cmp	r3, r2
 8009542:	d90e      	bls.n	8009562 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	8b12      	ldrh	r2, [r2, #24]
 800954c:	1a9a      	subs	r2, r3, r2
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	8b12      	ldrh	r2, [r2, #24]
 800955a:	441a      	add	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	61da      	str	r2, [r3, #28]
 8009560:	e002      	b.n	8009568 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009578:	e00e      	b.n	8009598 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f868 	bl	8009658 <USBH_CDC_TransmitCallback>
      break;
 8009588:	e006      	b.n	8009598 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d103      	bne.n	8009598 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009598:	bf00      	nop
  }
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b086      	sub	sp, #24
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d002      	beq.n	80095c8 <CDC_ProcessReception+0x26>
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d00e      	beq.n	80095e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80095c6:	e043      	b.n	8009650 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	6a19      	ldr	r1, [r3, #32]
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	8b5a      	ldrh	r2, [r3, #26]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	7b1b      	ldrb	r3, [r3, #12]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fc91 	bl	800aefc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2204      	movs	r2, #4
 80095de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095e2:	e035      	b.n	8009650 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	7b1b      	ldrb	r3, [r3, #12]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 ff90 	bl	800b510 <USBH_LL_GetURBState>
 80095f0:	4603      	mov	r3, r0
 80095f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80095f4:	7cfb      	ldrb	r3, [r7, #19]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d129      	bne.n	800964e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	7b1b      	ldrb	r3, [r3, #12]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fef3 	bl	800b3ec <USBH_LL_GetLastXferSize>
 8009606:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	429a      	cmp	r2, r3
 8009610:	d016      	beq.n	8009640 <CDC_ProcessReception+0x9e>
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	8b5b      	ldrh	r3, [r3, #26]
 8009616:	461a      	mov	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4293      	cmp	r3, r2
 800961c:	d110      	bne.n	8009640 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1ad2      	subs	r2, r2, r3
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	6a1a      	ldr	r2, [r3, #32]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	441a      	add	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2203      	movs	r2, #3
 800963a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800963e:	e006      	b.n	800964e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f80f 	bl	800966c <USBH_CDC_ReceiveCallback>
      break;
 800964e:	bf00      	nop
  }
}
 8009650:	bf00      	nop
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80096a8:	2302      	movs	r3, #2
 80096aa:	e029      	b.n	8009700 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	79fa      	ldrb	r2, [r7, #7]
 80096b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f81f 	bl	8009708 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f001 fdc3 	bl	800b284 <USBH_LL_Init>

  return USBH_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e009      	b.n	800972e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	33e0      	adds	r3, #224	@ 0xe0
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	2200      	movs	r2, #0
 8009726:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b0f      	cmp	r3, #15
 8009732:	d9f2      	bls.n	800971a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e009      	b.n	800974e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009754:	d3f1      	bcc.n	800973a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2240      	movs	r2, #64	@ 0x40
 800977a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	331c      	adds	r3, #28
 80097a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f002 fa15 	bl	800bbdc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f002 fa0c 	bl	800bbdc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80097ca:	2212      	movs	r2, #18
 80097cc:	2100      	movs	r1, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f002 fa04 	bl	800bbdc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097da:	223e      	movs	r2, #62	@ 0x3e
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 f9fc 	bl	800bbdc <memset>

  return USBH_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d016      	beq.n	8009830 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10e      	bne.n	800982a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009812:	1c59      	adds	r1, r3, #1
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	33de      	adds	r3, #222	@ 0xde
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
 8009828:	e004      	b.n	8009834 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800982a:	2302      	movs	r3, #2
 800982c:	73fb      	strb	r3, [r7, #15]
 800982e:	e001      	b.n	8009834 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009842:	b480      	push	{r7}
 8009844:	b085      	sub	sp, #20
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	429a      	cmp	r2, r3
 800985c:	d204      	bcs.n	8009868 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009866:	e001      	b.n	800986c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009868:	2302      	movs	r3, #2
 800986a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800987a:	b480      	push	{r7}
 800987c:	b087      	sub	sp, #28
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	461a      	mov	r2, r3
 8009888:	4603      	mov	r3, r0
 800988a:	70fb      	strb	r3, [r7, #3]
 800988c:	460b      	mov	r3, r1
 800988e:	70bb      	strb	r3, [r7, #2]
 8009890:	4613      	mov	r3, r2
 8009892:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80098a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098a4:	e025      	b.n	80098f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	221a      	movs	r2, #26
 80098aa:	fb02 f303 	mul.w	r3, r2, r3
 80098ae:	3308      	adds	r3, #8
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	3302      	adds	r3, #2
 80098b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	795b      	ldrb	r3, [r3, #5]
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d002      	beq.n	80098c8 <USBH_FindInterface+0x4e>
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	2bff      	cmp	r3, #255	@ 0xff
 80098c6:	d111      	bne.n	80098ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80098cc:	78ba      	ldrb	r2, [r7, #2]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d002      	beq.n	80098d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80098d2:	78bb      	ldrb	r3, [r7, #2]
 80098d4:	2bff      	cmp	r3, #255	@ 0xff
 80098d6:	d109      	bne.n	80098ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80098dc:	787a      	ldrb	r2, [r7, #1]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d002      	beq.n	80098e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80098e2:	787b      	ldrb	r3, [r7, #1]
 80098e4:	2bff      	cmp	r3, #255	@ 0xff
 80098e6:	d101      	bne.n	80098ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	e006      	b.n	80098fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	3301      	adds	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d9d6      	bls.n	80098a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80098f8:	23ff      	movs	r3, #255	@ 0xff
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fcf4 	bl	800b2fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 fe0d 	bl	800b536 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af04      	add	r7, sp, #16
 800992e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009930:	2302      	movs	r3, #2
 8009932:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b01      	cmp	r3, #1
 8009942:	d102      	bne.n	800994a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2203      	movs	r2, #3
 8009948:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b0b      	cmp	r3, #11
 8009952:	f200 81bb 	bhi.w	8009ccc <USBH_Process+0x3a4>
 8009956:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <USBH_Process+0x34>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	0800998d 	.word	0x0800998d
 8009960:	080099bf 	.word	0x080099bf
 8009964:	08009a27 	.word	0x08009a27
 8009968:	08009c67 	.word	0x08009c67
 800996c:	08009ccd 	.word	0x08009ccd
 8009970:	08009ac7 	.word	0x08009ac7
 8009974:	08009c0d 	.word	0x08009c0d
 8009978:	08009afd 	.word	0x08009afd
 800997c:	08009b1d 	.word	0x08009b1d
 8009980:	08009b3b 	.word	0x08009b3b
 8009984:	08009b7f 	.word	0x08009b7f
 8009988:	08009c4f 	.word	0x08009c4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 819b 	beq.w	8009cd0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80099a0:	20c8      	movs	r0, #200	@ 0xc8
 80099a2:	f001 fe12 	bl	800b5ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fd05 	bl	800b3b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099bc:	e188      	b.n	8009cd0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d107      	bne.n	80099d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2202      	movs	r2, #2
 80099d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099d6:	e18a      	b.n	8009cee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80099de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099e2:	d914      	bls.n	8009a0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099ea:	3301      	adds	r3, #1
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d903      	bls.n	8009a06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	220d      	movs	r2, #13
 8009a02:	701a      	strb	r2, [r3, #0]
      break;
 8009a04:	e173      	b.n	8009cee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
      break;
 8009a0c:	e16f      	b.n	8009cee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009a14:	f103 020a 	add.w	r2, r3, #10
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009a1e:	200a      	movs	r0, #10
 8009a20:	f001 fdd3 	bl	800b5ca <USBH_Delay>
      break;
 8009a24:	e163      	b.n	8009cee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a36:	2104      	movs	r1, #4
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009a3c:	2064      	movs	r0, #100	@ 0x64
 8009a3e:	f001 fdc4 	bl	800b5ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fc90 	bl	800b368 <USBH_LL_GetSpeed>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2205      	movs	r2, #5
 8009a56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 fa9b 	bl	800af96 <USBH_AllocPipe>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009a68:	2180      	movs	r1, #128	@ 0x80
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 fa93 	bl	800af96 <USBH_AllocPipe>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7919      	ldrb	r1, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a8c:	9202      	str	r2, [sp, #8]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	9201      	str	r2, [sp, #4]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4603      	mov	r3, r0
 8009a96:	2280      	movs	r2, #128	@ 0x80
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fa4d 	bl	800af38 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7959      	ldrb	r1, [r3, #5]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ab2:	9202      	str	r2, [sp, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	9201      	str	r2, [sp, #4]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	4603      	mov	r3, r0
 8009abc:	2200      	movs	r2, #0
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 fa3a 	bl	800af38 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ac4:	e113      	b.n	8009cee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f916 	bl	8009cf8 <USBH_HandleEnum>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f040 80fd 	bne.w	8009cd4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d103      	bne.n	8009af4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2208      	movs	r2, #8
 8009af0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009af2:	e0ef      	b.n	8009cd4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2207      	movs	r2, #7
 8009af8:	701a      	strb	r2, [r3, #0]
      break;
 8009afa:	e0eb      	b.n	8009cd4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 80e8 	beq.w	8009cd8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b0e:	2101      	movs	r1, #1
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2208      	movs	r2, #8
 8009b18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009b1a:	e0dd      	b.n	8009cd8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fc3a 	bl	800a39e <USBH_SetCfg>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 80d5 	bne.w	8009cdc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2209      	movs	r2, #9
 8009b36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b38:	e0d0      	b.n	8009cdc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d016      	beq.n	8009b76 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009b48:	2101      	movs	r1, #1
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc4a 	bl	800a3e4 <USBH_SetFeature>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	220a      	movs	r2, #10
 8009b60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b62:	e0bd      	b.n	8009ce0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	f040 80b9 	bne.w	8009ce0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	220a      	movs	r2, #10
 8009b72:	701a      	strb	r2, [r3, #0]
      break;
 8009b74:	e0b4      	b.n	8009ce0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	220a      	movs	r2, #10
 8009b7a:	701a      	strb	r2, [r3, #0]
      break;
 8009b7c:	e0b0      	b.n	8009ce0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80ad 	beq.w	8009ce4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
 8009b96:	e016      	b.n	8009bc6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b98:	7bfa      	ldrb	r2, [r7, #15]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	32de      	adds	r2, #222	@ 0xde
 8009b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba2:	791a      	ldrb	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d108      	bne.n	8009bc0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009bae:	7bfa      	ldrb	r2, [r7, #15]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	32de      	adds	r2, #222	@ 0xde
 8009bb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009bbe:	e005      	b.n	8009bcc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	73fb      	strb	r3, [r7, #15]
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0e5      	beq.n	8009b98 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d109      	bne.n	8009bfc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2206      	movs	r2, #6
 8009bec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bf4:	2103      	movs	r1, #3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bfa:	e073      	b.n	8009ce4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	220d      	movs	r2, #13
 8009c00:	701a      	strb	r2, [r3, #0]
      break;
 8009c02:	e06f      	b.n	8009ce4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	220d      	movs	r2, #13
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e06b      	b.n	8009ce4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d017      	beq.n	8009c46 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	220b      	movs	r2, #11
 8009c32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c34:	e058      	b.n	8009ce8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d154      	bne.n	8009ce8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	220d      	movs	r2, #13
 8009c42:	701a      	strb	r2, [r3, #0]
      break;
 8009c44:	e050      	b.n	8009ce8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	220d      	movs	r2, #13
 8009c4a:	701a      	strb	r2, [r3, #0]
      break;
 8009c4c:	e04c      	b.n	8009ce8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d049      	beq.n	8009cec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
      }
      break;
 8009c64:	e042      	b.n	8009cec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff fd4a 	bl	8009708 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ca2:	2105      	movs	r1, #5
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d107      	bne.n	8009cc4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fe22 	bl	8009906 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cc2:	e014      	b.n	8009cee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 fb19 	bl	800b2fc <USBH_LL_Start>
      break;
 8009cca:	e010      	b.n	8009cee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009ccc:	bf00      	nop
 8009cce:	e00e      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e00c      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009cd4:	bf00      	nop
 8009cd6:	e00a      	b.n	8009cee <USBH_Process+0x3c6>
    break;
 8009cd8:	bf00      	nop
 8009cda:	e008      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009cdc:	bf00      	nop
 8009cde:	e006      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009ce0:	bf00      	nop
 8009ce2:	e004      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <USBH_Process+0x3c6>
      break;
 8009cec:	bf00      	nop
  }
  return USBH_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009d04:	2301      	movs	r3, #1
 8009d06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	785b      	ldrb	r3, [r3, #1]
 8009d0c:	2b07      	cmp	r3, #7
 8009d0e:	f200 81bd 	bhi.w	800a08c <USBH_HandleEnum+0x394>
 8009d12:	a201      	add	r2, pc, #4	@ (adr r2, 8009d18 <USBH_HandleEnum+0x20>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009df3 	.word	0x08009df3
 8009d20:	08009e5d 	.word	0x08009e5d
 8009d24:	08009ee7 	.word	0x08009ee7
 8009d28:	08009f51 	.word	0x08009f51
 8009d2c:	08009fc1 	.word	0x08009fc1
 8009d30:	0800a007 	.word	0x0800a007
 8009d34:	0800a04d 	.word	0x0800a04d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009d38:	2108      	movs	r1, #8
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa4c 	bl	800a1d8 <USBH_Get_DevDesc>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d12e      	bne.n	8009da8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7919      	ldrb	r1, [r3, #4]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d6e:	9202      	str	r2, [sp, #8]
 8009d70:	2200      	movs	r2, #0
 8009d72:	9201      	str	r2, [sp, #4]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	4603      	mov	r3, r0
 8009d78:	2280      	movs	r2, #128	@ 0x80
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 f8dc 	bl	800af38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7959      	ldrb	r1, [r3, #5]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d94:	9202      	str	r2, [sp, #8]
 8009d96:	2200      	movs	r2, #0
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f8c9 	bl	800af38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009da6:	e173      	b.n	800a090 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	f040 8170 	bne.w	800a090 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009db6:	3301      	adds	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d903      	bls.n	8009dd2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	220d      	movs	r2, #13
 8009dce:	701a      	strb	r2, [r3, #0]
      break;
 8009dd0:	e15e      	b.n	800a090 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 f8fd 	bl	800afd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 f8f7 	bl	800afd8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
      break;
 8009df0:	e14e      	b.n	800a090 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009df2:	2112      	movs	r1, #18
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9ef 	bl	800a1d8 <USBH_Get_DevDesc>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e0a:	e143      	b.n	800a094 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	f040 8140 	bne.w	800a094 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d903      	bls.n	8009e36 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	220d      	movs	r2, #13
 8009e32:	701a      	strb	r2, [r3, #0]
      break;
 8009e34:	e12e      	b.n	800a094 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f8cb 	bl	800afd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f8c5 	bl	800afd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	701a      	strb	r2, [r3, #0]
      break;
 8009e5a:	e11b      	b.n	800a094 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa79 	bl	800a356 <USBH_SetAddress>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d130      	bne.n	8009ed0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009e6e:	2002      	movs	r0, #2
 8009e70:	f001 fbab 	bl	800b5ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7919      	ldrb	r1, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e96:	9202      	str	r2, [sp, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	9201      	str	r2, [sp, #4]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2280      	movs	r2, #128	@ 0x80
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f848 	bl	800af38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7959      	ldrb	r1, [r3, #5]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ebc:	9202      	str	r2, [sp, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	9201      	str	r2, [sp, #4]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f835 	bl	800af38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ece:	e0e3      	b.n	800a098 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	f040 80e0 	bne.w	800a098 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220d      	movs	r2, #13
 8009edc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	705a      	strb	r2, [r3, #1]
      break;
 8009ee4:	e0d8      	b.n	800a098 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ee6:	2109      	movs	r1, #9
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9a1 	bl	800a230 <USBH_Get_CfgDesc>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d103      	bne.n	8009f00 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2204      	movs	r2, #4
 8009efc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009efe:	e0cd      	b.n	800a09c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	f040 80ca 	bne.w	800a09c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f0e:	3301      	adds	r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d903      	bls.n	8009f2a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	220d      	movs	r2, #13
 8009f26:	701a      	strb	r2, [r3, #0]
      break;
 8009f28:	e0b8      	b.n	800a09c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	795b      	ldrb	r3, [r3, #5]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f851 	bl	800afd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	791b      	ldrb	r3, [r3, #4]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f84b 	bl	800afd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
      break;
 8009f4e:	e0a5      	b.n	800a09c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f969 	bl	800a230 <USBH_Get_CfgDesc>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2205      	movs	r2, #5
 8009f6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f6e:	e097      	b.n	800a0a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	f040 8094 	bne.w	800a0a0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f7e:	3301      	adds	r3, #1
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d903      	bls.n	8009f9a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	220d      	movs	r2, #13
 8009f96:	701a      	strb	r2, [r3, #0]
      break;
 8009f98:	e082      	b.n	800a0a0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	795b      	ldrb	r3, [r3, #5]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 f819 	bl	800afd8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	791b      	ldrb	r3, [r3, #4]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f813 	bl	800afd8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
      break;
 8009fbe:	e06f      	b.n	800a0a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d019      	beq.n	8009ffe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009fd6:	23ff      	movs	r3, #255	@ 0xff
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f953 	bl	800a284 <USBH_Get_StringDesc>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2206      	movs	r2, #6
 8009fec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fee:	e059      	b.n	800a0a4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d156      	bne.n	800a0a4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2206      	movs	r2, #6
 8009ffa:	705a      	strb	r2, [r3, #1]
      break;
 8009ffc:	e052      	b.n	800a0a4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2206      	movs	r2, #6
 800a002:	705a      	strb	r2, [r3, #1]
      break;
 800a004:	e04e      	b.n	800a0a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d019      	beq.n	800a044 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a01c:	23ff      	movs	r3, #255	@ 0xff
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f930 	bl	800a284 <USBH_Get_StringDesc>
 800a024:	4603      	mov	r3, r0
 800a026:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d103      	bne.n	800a036 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2207      	movs	r2, #7
 800a032:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a034:	e038      	b.n	800a0a8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d135      	bne.n	800a0a8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2207      	movs	r2, #7
 800a040:	705a      	strb	r2, [r3, #1]
      break;
 800a042:	e031      	b.n	800a0a8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2207      	movs	r2, #7
 800a048:	705a      	strb	r2, [r3, #1]
      break;
 800a04a:	e02d      	b.n	800a0a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a052:	2b00      	cmp	r3, #0
 800a054:	d017      	beq.n	800a086 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a062:	23ff      	movs	r3, #255	@ 0xff
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f90d 	bl	800a284 <USBH_Get_StringDesc>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a078:	e018      	b.n	800a0ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d115      	bne.n	800a0ac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
      break;
 800a084:	e012      	b.n	800a0ac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
      break;
 800a08a:	e00f      	b.n	800a0ac <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a08c:	bf00      	nop
 800a08e:	e00e      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a090:	bf00      	nop
 800a092:	e00c      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a094:	bf00      	nop
 800a096:	e00a      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a098:	bf00      	nop
 800a09a:	e008      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a09c:	bf00      	nop
 800a09e:	e006      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a0a0:	bf00      	nop
 800a0a2:	e004      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a0a4:	bf00      	nop
 800a0a6:	e002      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a0a8:	bf00      	nop
 800a0aa:	e000      	b.n	800a0ae <USBH_HandleEnum+0x3b6>
      break;
 800a0ac:	bf00      	nop
  }
  return Status;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a0ca:	bf00      	nop
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f804 	bl	800a0fa <USBH_HandleSof>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b0b      	cmp	r3, #11
 800a10a:	d10a      	bne.n	800a122 <USBH_HandleSof+0x28>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
  }
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a13a:	bf00      	nop
}
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a156:	bf00      	nop
}
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f001 f8be 	bl	800b332 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	791b      	ldrb	r3, [r3, #4]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 ff0b 	bl	800afd8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	795b      	ldrb	r3, [r3, #5]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 ff05 	bl	800afd8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a1e4:	887b      	ldrh	r3, [r7, #2]
 800a1e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ea:	d901      	bls.n	800a1f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e01b      	b.n	800a228 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1f6:	887b      	ldrh	r3, [r7, #2]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a200:	2100      	movs	r1, #0
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f872 	bl	800a2ec <USBH_GetDescriptor>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a218:	887a      	ldrh	r2, [r7, #2]
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f929 	bl	800a474 <USBH_ParseDevDesc>
 800a222:	4603      	mov	r3, r0
 800a224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	331c      	adds	r3, #28
 800a240:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a242:	887b      	ldrh	r3, [r7, #2]
 800a244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a248:	d901      	bls.n	800a24e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e016      	b.n	800a27c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a24e:	887b      	ldrh	r3, [r7, #2]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a258:	2100      	movs	r1, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f846 	bl	800a2ec <USBH_GetDescriptor>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d107      	bne.n	800a27a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a26a:	887b      	ldrh	r3, [r7, #2]
 800a26c:	461a      	mov	r2, r3
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9af 	bl	800a5d4 <USBH_ParseCfgDesc>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	461a      	mov	r2, r3
 800a290:	460b      	mov	r3, r1
 800a292:	72fb      	strb	r3, [r7, #11]
 800a294:	4613      	mov	r3, r2
 800a296:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a298:	893b      	ldrh	r3, [r7, #8]
 800a29a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a29e:	d802      	bhi.n	800a2a6 <USBH_Get_StringDesc+0x22>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e01c      	b.n	800a2e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a2b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a2ba:	893b      	ldrh	r3, [r7, #8]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f812 	bl	800a2ec <USBH_GetDescriptor>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2d8:	893a      	ldrh	r2, [r7, #8]
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fb8d 	bl	800a9fc <USBH_ParseStringDesc>
  }

  return status;
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	607b      	str	r3, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	72fb      	strb	r3, [r7, #11]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	789b      	ldrb	r3, [r3, #2]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d11c      	bne.n	800a340 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2206      	movs	r2, #6
 800a316:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	893a      	ldrh	r2, [r7, #8]
 800a31c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a31e:	893b      	ldrh	r3, [r7, #8]
 800a320:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a328:	d104      	bne.n	800a334 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a330:	829a      	strh	r2, [r3, #20]
 800a332:	e002      	b.n	800a33a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8b3a      	ldrh	r2, [r7, #24]
 800a33e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a340:	8b3b      	ldrh	r3, [r7, #24]
 800a342:	461a      	mov	r2, r3
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fba5 	bl	800aa96 <USBH_CtlReq>
 800a34c:	4603      	mov	r3, r0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	789b      	ldrb	r3, [r3, #2]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d10f      	bne.n	800a38a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2205      	movs	r2, #5
 800a374:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	b29a      	uxth	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fb81 	bl	800aa96 <USBH_CtlReq>
 800a394:	4603      	mov	r3, r0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	789b      	ldrb	r3, [r3, #2]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10e      	bne.n	800a3d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2209      	movs	r2, #9
 800a3bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	887a      	ldrh	r2, [r7, #2]
 800a3c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fb5e 	bl	800aa96 <USBH_CtlReq>
 800a3da:	4603      	mov	r3, r0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	789b      	ldrb	r3, [r3, #2]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d10f      	bne.n	800a418 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2203      	movs	r2, #3
 800a402:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fb3a 	bl	800aa96 <USBH_CtlReq>
 800a422:	4603      	mov	r3, r0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	789b      	ldrb	r3, [r3, #2]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d10f      	bne.n	800a460 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a452:	78fb      	ldrb	r3, [r7, #3]
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a460:	2200      	movs	r2, #0
 800a462:	2100      	movs	r1, #0
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fb16 	bl	800aa96 <USBH_CtlReq>
 800a46a:	4603      	mov	r3, r0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a488:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a494:	2302      	movs	r3, #2
 800a496:	e094      	b.n	800a5c2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	781a      	ldrb	r2, [r3, #0]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	785a      	ldrb	r2, [r3, #1]
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3303      	adds	r3, #3
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	791a      	ldrb	r2, [r3, #4]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	795a      	ldrb	r2, [r3, #5]
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	799a      	ldrb	r2, [r3, #6]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	79da      	ldrb	r2, [r3, #7]
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d11b      	bne.n	800a52e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	79db      	ldrb	r3, [r3, #7]
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	dc0f      	bgt.n	800a51e <USBH_ParseDevDesc+0xaa>
 800a4fe:	2b08      	cmp	r3, #8
 800a500:	db0f      	blt.n	800a522 <USBH_ParseDevDesc+0xae>
 800a502:	3b08      	subs	r3, #8
 800a504:	4a32      	ldr	r2, [pc, #200]	@ (800a5d0 <USBH_ParseDevDesc+0x15c>)
 800a506:	fa22 f303 	lsr.w	r3, r2, r3
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <USBH_ParseDevDesc+0xb6>
 800a51c:	e001      	b.n	800a522 <USBH_ParseDevDesc+0xae>
 800a51e:	2b40      	cmp	r3, #64	@ 0x40
 800a520:	d003      	beq.n	800a52a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2208      	movs	r2, #8
 800a526:	71da      	strb	r2, [r3, #7]
        break;
 800a528:	e000      	b.n	800a52c <USBH_ParseDevDesc+0xb8>
        break;
 800a52a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a52c:	e00e      	b.n	800a54c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a534:	2b02      	cmp	r3, #2
 800a536:	d107      	bne.n	800a548 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	79db      	ldrb	r3, [r3, #7]
 800a53c:	2b08      	cmp	r3, #8
 800a53e:	d005      	beq.n	800a54c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2208      	movs	r2, #8
 800a544:	71da      	strb	r2, [r3, #7]
 800a546:	e001      	b.n	800a54c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a548:	2303      	movs	r3, #3
 800a54a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d936      	bls.n	800a5c0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	3308      	adds	r3, #8
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3309      	adds	r3, #9
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	b29b      	uxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	330a      	adds	r3, #10
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	330b      	adds	r3, #11
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	4313      	orrs	r3, r2
 800a580:	b29a      	uxth	r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	330c      	adds	r3, #12
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	330d      	adds	r3, #13
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	b29b      	uxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	7b9a      	ldrb	r2, [r3, #14]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	7bda      	ldrb	r2, [r3, #15]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	7c1a      	ldrb	r2, [r3, #16]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	7c5a      	ldrb	r2, [r3, #17]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	01000101 	.word	0x01000101

0800a5d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	@ 0x30
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a5e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a602:	2302      	movs	r3, #2
 800a604:	e0da      	b.n	800a7bc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b09      	cmp	r3, #9
 800a610:	d002      	beq.n	800a618 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	2209      	movs	r2, #9
 800a616:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	785a      	ldrb	r2, [r3, #1]
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	3302      	adds	r3, #2
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	3303      	adds	r3, #3
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	b29b      	uxth	r3, r3
 800a63a:	4313      	orrs	r3, r2
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a642:	bf28      	it	cs
 800a644:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a648:	b29a      	uxth	r2, r3
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	791a      	ldrb	r2, [r3, #4]
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	795a      	ldrb	r2, [r3, #5]
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	799a      	ldrb	r2, [r3, #6]
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	79da      	ldrb	r2, [r3, #7]
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	7a1a      	ldrb	r2, [r3, #8]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	2b09      	cmp	r3, #9
 800a67a:	f240 809d 	bls.w	800a7b8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a67e:	2309      	movs	r3, #9
 800a680:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a686:	e081      	b.n	800a78c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a688:	f107 0316 	add.w	r3, r7, #22
 800a68c:	4619      	mov	r1, r3
 800a68e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a690:	f000 f9e7 	bl	800aa62 <USBH_GetNextDesc>
 800a694:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d176      	bne.n	800a78c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2b09      	cmp	r3, #9
 800a6a4:	d002      	beq.n	800a6ac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	2209      	movs	r2, #9
 800a6aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6b0:	221a      	movs	r2, #26
 800a6b2:	fb02 f303 	mul.w	r3, r2, r3
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	6a3a      	ldr	r2, [r7, #32]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3302      	adds	r3, #2
 800a6be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a6c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6c2:	69f8      	ldr	r0, [r7, #28]
 800a6c4:	f000 f87e 	bl	800a7c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6d2:	e043      	b.n	800a75c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a6d4:	f107 0316 	add.w	r3, r7, #22
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6dc:	f000 f9c1 	bl	800aa62 <USBH_GetNextDesc>
 800a6e0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	785b      	ldrb	r3, [r3, #1]
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d138      	bne.n	800a75c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	795b      	ldrb	r3, [r3, #5]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d113      	bne.n	800a71a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d003      	beq.n	800a702 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	799b      	ldrb	r3, [r3, #6]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d10b      	bne.n	800a71a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	79db      	ldrb	r3, [r3, #7]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <USBH_ParseCfgDesc+0x14e>
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b09      	cmp	r3, #9
 800a710:	d007      	beq.n	800a722 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	2209      	movs	r2, #9
 800a716:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a718:	e003      	b.n	800a722 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71c:	2207      	movs	r2, #7
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e000      	b.n	800a724 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a722:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a728:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a72c:	3201      	adds	r2, #1
 800a72e:	00d2      	lsls	r2, r2, #3
 800a730:	211a      	movs	r1, #26
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	4413      	add	r3, r2
 800a738:	3308      	adds	r3, #8
 800a73a:	6a3a      	ldr	r2, [r7, #32]
 800a73c:	4413      	add	r3, r2
 800a73e:	3304      	adds	r3, #4
 800a740:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a744:	69b9      	ldr	r1, [r7, #24]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f870 	bl	800a82c <USBH_ParseEPDesc>
 800a74c:	4603      	mov	r3, r0
 800a74e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a752:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a756:	3301      	adds	r3, #1
 800a758:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	791b      	ldrb	r3, [r3, #4]
 800a760:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a764:	429a      	cmp	r2, r3
 800a766:	d204      	bcs.n	800a772 <USBH_ParseCfgDesc+0x19e>
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	885a      	ldrh	r2, [r3, #2]
 800a76c:	8afb      	ldrh	r3, [r7, #22]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d8b0      	bhi.n	800a6d4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	791b      	ldrb	r3, [r3, #4]
 800a776:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d201      	bcs.n	800a782 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a77e:	2303      	movs	r3, #3
 800a780:	e01c      	b.n	800a7bc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a786:	3301      	adds	r3, #1
 800a788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a78c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a790:	2b01      	cmp	r3, #1
 800a792:	d805      	bhi.n	800a7a0 <USBH_ParseCfgDesc+0x1cc>
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	885a      	ldrh	r2, [r3, #2]
 800a798:	8afb      	ldrh	r3, [r7, #22]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	f63f af74 	bhi.w	800a688 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	791b      	ldrb	r3, [r3, #4]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	bf28      	it	cs
 800a7a8:	2302      	movcs	r3, #2
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d201      	bcs.n	800a7b8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e001      	b.n	800a7bc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3730      	adds	r7, #48	@ 0x30
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	785a      	ldrb	r2, [r3, #1]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	789a      	ldrb	r2, [r3, #2]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	78da      	ldrb	r2, [r3, #3]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	bf28      	it	cs
 800a7f8:	2302      	movcs	r3, #2
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	795a      	ldrb	r2, [r3, #5]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	799a      	ldrb	r2, [r3, #6]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	79da      	ldrb	r2, [r3, #7]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	7a1a      	ldrb	r2, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	721a      	strb	r2, [r3, #8]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	785a      	ldrb	r2, [r3, #1]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	789a      	ldrb	r2, [r3, #2]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	78da      	ldrb	r2, [r3, #3]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3304      	adds	r3, #4
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3305      	adds	r3, #5
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	b29a      	uxth	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	799a      	ldrb	r2, [r3, #6]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	889b      	ldrh	r3, [r3, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d009      	beq.n	800a89a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a88a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a88e:	d804      	bhi.n	800a89a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a898:	d901      	bls.n	800a89e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a89a:	2303      	movs	r3, #3
 800a89c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d136      	bne.n	800a916 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	78db      	ldrb	r3, [r3, #3]
 800a8ac:	f003 0303 	and.w	r3, r3, #3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d108      	bne.n	800a8c6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	889b      	ldrh	r3, [r3, #4]
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8bc:	f240 8097 	bls.w	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	75fb      	strb	r3, [r7, #23]
 800a8c4:	e093      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	78db      	ldrb	r3, [r3, #3]
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d107      	bne.n	800a8e2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	889b      	ldrh	r3, [r3, #4]
 800a8d6:	2b40      	cmp	r3, #64	@ 0x40
 800a8d8:	f240 8089 	bls.w	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	e085      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	78db      	ldrb	r3, [r3, #3]
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d005      	beq.n	800a8fa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	78db      	ldrb	r3, [r3, #3]
 800a8f2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d10a      	bne.n	800a910 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	799b      	ldrb	r3, [r3, #6]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <USBH_ParseEPDesc+0xde>
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	799b      	ldrb	r3, [r3, #6]
 800a906:	2b10      	cmp	r3, #16
 800a908:	d970      	bls.n	800a9ec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a90a:	2303      	movs	r3, #3
 800a90c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a90e:	e06d      	b.n	800a9ec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a910:	2303      	movs	r3, #3
 800a912:	75fb      	strb	r3, [r7, #23]
 800a914:	e06b      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d13c      	bne.n	800a99a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	78db      	ldrb	r3, [r3, #3]
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d005      	beq.n	800a938 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	78db      	ldrb	r3, [r3, #3]
 800a930:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	889b      	ldrh	r3, [r3, #4]
 800a93c:	2b40      	cmp	r3, #64	@ 0x40
 800a93e:	d956      	bls.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a940:	2303      	movs	r3, #3
 800a942:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a944:	e053      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	78db      	ldrb	r3, [r3, #3]
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d10e      	bne.n	800a970 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	799b      	ldrb	r3, [r3, #6]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d007      	beq.n	800a96a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d803      	bhi.n	800a96a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a966:	2b40      	cmp	r3, #64	@ 0x40
 800a968:	d941      	bls.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a96a:	2303      	movs	r3, #3
 800a96c:	75fb      	strb	r3, [r7, #23]
 800a96e:	e03e      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	78db      	ldrb	r3, [r3, #3]
 800a974:	f003 0303 	and.w	r3, r3, #3
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d10b      	bne.n	800a994 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	799b      	ldrb	r3, [r3, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <USBH_ParseEPDesc+0x162>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	889b      	ldrh	r3, [r3, #4]
 800a988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a98c:	d32f      	bcc.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a98e:	2303      	movs	r3, #3
 800a990:	75fb      	strb	r3, [r7, #23]
 800a992:	e02c      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a994:	2303      	movs	r3, #3
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	e029      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d120      	bne.n	800a9e6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	78db      	ldrb	r3, [r3, #3]
 800a9a8:	f003 0303 	and.w	r3, r3, #3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	889b      	ldrh	r3, [r3, #4]
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d01a      	beq.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	e017      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	78db      	ldrb	r3, [r3, #3]
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d10a      	bne.n	800a9e0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	799b      	ldrb	r3, [r3, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <USBH_ParseEPDesc+0x1ae>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	889b      	ldrh	r3, [r3, #4]
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d909      	bls.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	75fb      	strb	r3, [r7, #23]
 800a9de:	e006      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	75fb      	strb	r3, [r7, #23]
 800a9e4:	e003      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	75fb      	strb	r3, [r7, #23]
 800a9ea:	e000      	b.n	800a9ee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9ec:	bf00      	nop
  }

  return status;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	371c      	adds	r7, #28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	4613      	mov	r3, r2
 800aa08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d120      	bne.n	800aa56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	1e9a      	subs	r2, r3, #2
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	bf28      	it	cs
 800aa20:	4613      	movcs	r3, r2
 800aa22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3302      	adds	r3, #2
 800aa28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	82fb      	strh	r3, [r7, #22]
 800aa2e:	e00b      	b.n	800aa48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aa30:	8afb      	ldrh	r3, [r7, #22]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa42:	8afb      	ldrh	r3, [r7, #22]
 800aa44:	3302      	adds	r3, #2
 800aa46:	82fb      	strh	r3, [r7, #22]
 800aa48:	8afa      	ldrh	r2, [r7, #22]
 800aa4a:	8abb      	ldrh	r3, [r7, #20]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d3ef      	bcc.n	800aa30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
  }
}
 800aa56:	bf00      	nop
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	4413      	add	r3, r2
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa88:	68fb      	ldr	r3, [r7, #12]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	789b      	ldrb	r3, [r3, #2]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d002      	beq.n	800aab6 <USBH_CtlReq+0x20>
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d00f      	beq.n	800aad4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aab4:	e027      	b.n	800ab06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	88fa      	ldrh	r2, [r7, #6]
 800aac0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2202      	movs	r2, #2
 800aacc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aace:	2301      	movs	r3, #1
 800aad0:	75fb      	strb	r3, [r7, #23]
      break;
 800aad2:	e018      	b.n	800ab06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 f81b 	bl	800ab10 <USBH_HandleControl>
 800aada:	4603      	mov	r3, r0
 800aadc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <USBH_CtlReq+0x54>
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d106      	bne.n	800aaf8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	761a      	strb	r2, [r3, #24]
      break;
 800aaf6:	e005      	b.n	800ab04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d102      	bne.n	800ab04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	709a      	strb	r2, [r3, #2]
      break;
 800ab04:	bf00      	nop
  }
  return status;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7e1b      	ldrb	r3, [r3, #24]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	2b0a      	cmp	r3, #10
 800ab28:	f200 8156 	bhi.w	800add8 <USBH_HandleControl+0x2c8>
 800ab2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab34 <USBH_HandleControl+0x24>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800ab61 	.word	0x0800ab61
 800ab38:	0800ab7b 	.word	0x0800ab7b
 800ab3c:	0800abe5 	.word	0x0800abe5
 800ab40:	0800ac0b 	.word	0x0800ac0b
 800ab44:	0800ac43 	.word	0x0800ac43
 800ab48:	0800ac6d 	.word	0x0800ac6d
 800ab4c:	0800acbf 	.word	0x0800acbf
 800ab50:	0800ace1 	.word	0x0800ace1
 800ab54:	0800ad1d 	.word	0x0800ad1d
 800ab58:	0800ad43 	.word	0x0800ad43
 800ab5c:	0800ad81 	.word	0x0800ad81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f103 0110 	add.w	r1, r3, #16
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	795b      	ldrb	r3, [r3, #5]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f943 	bl	800adf8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2202      	movs	r2, #2
 800ab76:	761a      	strb	r2, [r3, #24]
      break;
 800ab78:	e139      	b.n	800adee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	795b      	ldrb	r3, [r3, #5]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fcc5 	bl	800b510 <USBH_LL_GetURBState>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d11e      	bne.n	800abce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7c1b      	ldrb	r3, [r3, #16]
 800ab94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	8adb      	ldrh	r3, [r3, #22]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aba2:	7b7b      	ldrb	r3, [r7, #13]
 800aba4:	2b80      	cmp	r3, #128	@ 0x80
 800aba6:	d103      	bne.n	800abb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2203      	movs	r2, #3
 800abac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abae:	e115      	b.n	800addc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2205      	movs	r2, #5
 800abb4:	761a      	strb	r2, [r3, #24]
      break;
 800abb6:	e111      	b.n	800addc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800abb8:	7b7b      	ldrb	r3, [r7, #13]
 800abba:	2b80      	cmp	r3, #128	@ 0x80
 800abbc:	d103      	bne.n	800abc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2209      	movs	r2, #9
 800abc2:	761a      	strb	r2, [r3, #24]
      break;
 800abc4:	e10a      	b.n	800addc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2207      	movs	r2, #7
 800abca:	761a      	strb	r2, [r3, #24]
      break;
 800abcc:	e106      	b.n	800addc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d003      	beq.n	800abdc <USBH_HandleControl+0xcc>
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	f040 8100 	bne.w	800addc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	220b      	movs	r2, #11
 800abe0:	761a      	strb	r2, [r3, #24]
      break;
 800abe2:	e0fb      	b.n	800addc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abea:	b29a      	uxth	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6899      	ldr	r1, [r3, #8]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	899a      	ldrh	r2, [r3, #12]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	791b      	ldrb	r3, [r3, #4]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f93a 	bl	800ae76 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2204      	movs	r2, #4
 800ac06:	761a      	strb	r2, [r3, #24]
      break;
 800ac08:	e0f1      	b.n	800adee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	791b      	ldrb	r3, [r3, #4]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fc7d 	bl	800b510 <USBH_LL_GetURBState>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d102      	bne.n	800ac26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2209      	movs	r2, #9
 800ac24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d102      	bne.n	800ac32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac30:	e0d6      	b.n	800ade0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	f040 80d3 	bne.w	800ade0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	220b      	movs	r2, #11
 800ac3e:	761a      	strb	r2, [r3, #24]
      break;
 800ac40:	e0ce      	b.n	800ade0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6899      	ldr	r1, [r3, #8]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	899a      	ldrh	r2, [r3, #12]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	795b      	ldrb	r3, [r3, #5]
 800ac4e:	2001      	movs	r0, #1
 800ac50:	9000      	str	r0, [sp, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f8ea 	bl	800ae2c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2206      	movs	r2, #6
 800ac68:	761a      	strb	r2, [r3, #24]
      break;
 800ac6a:	e0c0      	b.n	800adee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	795b      	ldrb	r3, [r3, #5]
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fc4c 	bl	800b510 <USBH_LL_GetURBState>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d103      	bne.n	800ac8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2207      	movs	r2, #7
 800ac86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac88:	e0ac      	b.n	800ade4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b05      	cmp	r3, #5
 800ac8e:	d105      	bne.n	800ac9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	220c      	movs	r2, #12
 800ac94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac96:	2303      	movs	r3, #3
 800ac98:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9a:	e0a3      	b.n	800ade4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d103      	bne.n	800acaa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2205      	movs	r2, #5
 800aca6:	761a      	strb	r2, [r3, #24]
      break;
 800aca8:	e09c      	b.n	800ade4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	2b04      	cmp	r3, #4
 800acae:	f040 8099 	bne.w	800ade4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	220b      	movs	r2, #11
 800acb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800acb8:	2302      	movs	r3, #2
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	e092      	b.n	800ade4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	791b      	ldrb	r3, [r3, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	2100      	movs	r1, #0
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f8d5 	bl	800ae76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2208      	movs	r2, #8
 800acdc:	761a      	strb	r2, [r3, #24]

      break;
 800acde:	e086      	b.n	800adee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	791b      	ldrb	r3, [r3, #4]
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fc12 	bl	800b510 <USBH_LL_GetURBState>
 800acec:	4603      	mov	r3, r0
 800acee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d105      	bne.n	800ad02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	220d      	movs	r2, #13
 800acfa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad00:	e072      	b.n	800ade8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d103      	bne.n	800ad10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	220b      	movs	r2, #11
 800ad0c:	761a      	strb	r2, [r3, #24]
      break;
 800ad0e:	e06b      	b.n	800ade8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d168      	bne.n	800ade8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ad16:	2303      	movs	r3, #3
 800ad18:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1a:	e065      	b.n	800ade8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	795b      	ldrb	r3, [r3, #5]
 800ad20:	2201      	movs	r2, #1
 800ad22:	9200      	str	r2, [sp, #0]
 800ad24:	2200      	movs	r2, #0
 800ad26:	2100      	movs	r1, #0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f87f 	bl	800ae2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	761a      	strb	r2, [r3, #24]
      break;
 800ad40:	e055      	b.n	800adee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	795b      	ldrb	r3, [r3, #5]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fbe1 	bl	800b510 <USBH_LL_GetURBState>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d105      	bne.n	800ad64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	220d      	movs	r2, #13
 800ad60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad62:	e043      	b.n	800adec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d103      	bne.n	800ad72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2209      	movs	r2, #9
 800ad6e:	761a      	strb	r2, [r3, #24]
      break;
 800ad70:	e03c      	b.n	800adec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	d139      	bne.n	800adec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	220b      	movs	r2, #11
 800ad7c:	761a      	strb	r2, [r3, #24]
      break;
 800ad7e:	e035      	b.n	800adec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7e5b      	ldrb	r3, [r3, #25]
 800ad84:	3301      	adds	r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	765a      	strb	r2, [r3, #25]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7e5b      	ldrb	r3, [r3, #25]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d806      	bhi.n	800ada2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ada0:	e025      	b.n	800adee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ada8:	2106      	movs	r1, #6
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	795b      	ldrb	r3, [r3, #5]
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f90c 	bl	800afd8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	791b      	ldrb	r3, [r3, #4]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f906 	bl	800afd8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800add2:	2302      	movs	r3, #2
 800add4:	73fb      	strb	r3, [r7, #15]
      break;
 800add6:	e00a      	b.n	800adee <USBH_HandleControl+0x2de>

    default:
      break;
 800add8:	bf00      	nop
 800adda:	e008      	b.n	800adee <USBH_HandleControl+0x2de>
      break;
 800addc:	bf00      	nop
 800adde:	e006      	b.n	800adee <USBH_HandleControl+0x2de>
      break;
 800ade0:	bf00      	nop
 800ade2:	e004      	b.n	800adee <USBH_HandleControl+0x2de>
      break;
 800ade4:	bf00      	nop
 800ade6:	e002      	b.n	800adee <USBH_HandleControl+0x2de>
      break;
 800ade8:	bf00      	nop
 800adea:	e000      	b.n	800adee <USBH_HandleControl+0x2de>
      break;
 800adec:	bf00      	nop
  }

  return status;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af04      	add	r7, sp, #16
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	4613      	mov	r3, r2
 800ae04:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae06:	79f9      	ldrb	r1, [r7, #7]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	2308      	movs	r3, #8
 800ae0e:	9302      	str	r3, [sp, #8]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	9301      	str	r3, [sp, #4]
 800ae14:	2300      	movs	r3, #0
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fb46 	bl	800b4ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4611      	mov	r1, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	80fb      	strh	r3, [r7, #6]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae50:	7979      	ldrb	r1, [r7, #5]
 800ae52:	7e3b      	ldrb	r3, [r7, #24]
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	2200      	movs	r2, #0
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fb21 	bl	800b4ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af04      	add	r7, sp, #16
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	4611      	mov	r1, r2
 800ae82:	461a      	mov	r2, r3
 800ae84:	460b      	mov	r3, r1
 800ae86:	80fb      	strh	r3, [r7, #6]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae8c:	7979      	ldrb	r1, [r7, #5]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2201      	movs	r2, #1
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fb03 	bl	800b4ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aea8:	2300      	movs	r3, #0

}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b088      	sub	sp, #32
 800aeb6:	af04      	add	r7, sp, #16
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	4611      	mov	r1, r2
 800aebe:	461a      	mov	r2, r3
 800aec0:	460b      	mov	r3, r1
 800aec2:	80fb      	strh	r3, [r7, #6]
 800aec4:	4613      	mov	r3, r2
 800aec6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aed6:	7979      	ldrb	r1, [r7, #5]
 800aed8:	7e3b      	ldrb	r3, [r7, #24]
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	2301      	movs	r3, #1
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	2302      	movs	r3, #2
 800aeea:	2200      	movs	r2, #0
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fade 	bl	800b4ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af04      	add	r7, sp, #16
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	460b      	mov	r3, r1
 800af0c:	80fb      	strh	r3, [r7, #6]
 800af0e:	4613      	mov	r3, r2
 800af10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af12:	7979      	ldrb	r1, [r7, #5]
 800af14:	2300      	movs	r3, #0
 800af16:	9303      	str	r3, [sp, #12]
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	9302      	str	r3, [sp, #8]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	2301      	movs	r3, #1
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2302      	movs	r3, #2
 800af26:	2201      	movs	r2, #1
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 fac0 	bl	800b4ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af04      	add	r7, sp, #16
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	4608      	mov	r0, r1
 800af42:	4611      	mov	r1, r2
 800af44:	461a      	mov	r2, r3
 800af46:	4603      	mov	r3, r0
 800af48:	70fb      	strb	r3, [r7, #3]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70bb      	strb	r3, [r7, #2]
 800af4e:	4613      	mov	r3, r2
 800af50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af52:	7878      	ldrb	r0, [r7, #1]
 800af54:	78ba      	ldrb	r2, [r7, #2]
 800af56:	78f9      	ldrb	r1, [r7, #3]
 800af58:	8b3b      	ldrh	r3, [r7, #24]
 800af5a:	9302      	str	r3, [sp, #8]
 800af5c:	7d3b      	ldrb	r3, [r7, #20]
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	7c3b      	ldrb	r3, [r7, #16]
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	4603      	mov	r3, r0
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa53 	bl	800b412 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af82:	78fb      	ldrb	r3, [r7, #3]
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa72 	bl	800b470 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f836 	bl	800b014 <USBH_GetFreePipe>
 800afa8:	4603      	mov	r3, r0
 800afaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800afac:	89fb      	ldrh	r3, [r7, #14]
 800afae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00a      	beq.n	800afcc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800afb6:	78fa      	ldrb	r2, [r7, #3]
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	f003 030f 	and.w	r3, r3, #15
 800afbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	33e0      	adds	r3, #224	@ 0xe0
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	b2db      	uxtb	r3, r3
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	2b0f      	cmp	r3, #15
 800afe8:	d80d      	bhi.n	800b006 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	33e0      	adds	r3, #224	@ 0xe0
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	78fb      	ldrb	r3, [r7, #3]
 800aff8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	33e0      	adds	r3, #224	@ 0xe0
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
 800b024:	e00f      	b.n	800b046 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	33e0      	adds	r3, #224	@ 0xe0
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	e007      	b.n	800b050 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	3301      	adds	r3, #1
 800b044:	73fb      	strb	r3, [r7, #15]
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	2b0f      	cmp	r3, #15
 800b04a:	d9ec      	bls.n	800b026 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b04c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b060:	2201      	movs	r2, #1
 800b062:	490e      	ldr	r1, [pc, #56]	@ (800b09c <MX_USB_HOST_Init+0x40>)
 800b064:	480e      	ldr	r0, [pc, #56]	@ (800b0a0 <MX_USB_HOST_Init+0x44>)
 800b066:	f7fe fb15 	bl	8009694 <USBH_Init>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b070:	f7f5 ff56 	bl	8000f20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b074:	490b      	ldr	r1, [pc, #44]	@ (800b0a4 <MX_USB_HOST_Init+0x48>)
 800b076:	480a      	ldr	r0, [pc, #40]	@ (800b0a0 <MX_USB_HOST_Init+0x44>)
 800b078:	f7fe fbb9 	bl	80097ee <USBH_RegisterClass>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b082:	f7f5 ff4d 	bl	8000f20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b086:	4806      	ldr	r0, [pc, #24]	@ (800b0a0 <MX_USB_HOST_Init+0x44>)
 800b088:	f7fe fc3d 	bl	8009906 <USBH_Start>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b092:	f7f5 ff45 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	200002e8 	.word	0x200002e8
 800b0a4:	2000000c 	.word	0x2000000c

0800b0a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b0ac:	4802      	ldr	r0, [pc, #8]	@ (800b0b8 <MX_USB_HOST_Process+0x10>)
 800b0ae:	f7fe fc3b 	bl	8009928 <USBH_Process>
}
 800b0b2:	bf00      	nop
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200002e8 	.word	0x200002e8

0800b0bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	d819      	bhi.n	800b104 <USBH_UserProcess+0x48>
 800b0d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d8 <USBH_UserProcess+0x1c>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b105 	.word	0x0800b105
 800b0dc:	0800b0f5 	.word	0x0800b0f5
 800b0e0:	0800b105 	.word	0x0800b105
 800b0e4:	0800b0fd 	.word	0x0800b0fd
 800b0e8:	0800b0ed 	.word	0x0800b0ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0ec:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <USBH_UserProcess+0x58>)
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	701a      	strb	r2, [r3, #0]
  break;
 800b0f2:	e008      	b.n	800b106 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0f4:	4b07      	ldr	r3, [pc, #28]	@ (800b114 <USBH_UserProcess+0x58>)
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	701a      	strb	r2, [r3, #0]
  break;
 800b0fa:	e004      	b.n	800b106 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0fc:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <USBH_UserProcess+0x58>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	701a      	strb	r2, [r3, #0]
  break;
 800b102:	e000      	b.n	800b106 <USBH_UserProcess+0x4a>

  default:
  break;
 800b104:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	200006c0 	.word	0x200006c0

0800b118 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08a      	sub	sp, #40	@ 0x28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b120:	f107 0314 	add.w	r3, r7, #20
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	605a      	str	r2, [r3, #4]
 800b12a:	609a      	str	r2, [r3, #8]
 800b12c:	60da      	str	r2, [r3, #12]
 800b12e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b138:	d147      	bne.n	800b1ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	4b25      	ldr	r3, [pc, #148]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b142:	4a24      	ldr	r2, [pc, #144]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b144:	f043 0301 	orr.w	r3, r3, #1
 800b148:	6313      	str	r3, [r2, #48]	@ 0x30
 800b14a:	4b22      	ldr	r3, [pc, #136]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b15a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b160:	2300      	movs	r3, #0
 800b162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b164:	f107 0314 	add.w	r3, r7, #20
 800b168:	4619      	mov	r1, r3
 800b16a:	481b      	ldr	r0, [pc, #108]	@ (800b1d8 <HAL_HCD_MspInit+0xc0>)
 800b16c:	f7f7 fd80 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b170:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b176:	2302      	movs	r3, #2
 800b178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b17e:	2303      	movs	r3, #3
 800b180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b182:	230a      	movs	r3, #10
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b186:	f107 0314 	add.w	r3, r7, #20
 800b18a:	4619      	mov	r1, r3
 800b18c:	4812      	ldr	r0, [pc, #72]	@ (800b1d8 <HAL_HCD_MspInit+0xc0>)
 800b18e:	f7f7 fd6f 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b192:	4b10      	ldr	r3, [pc, #64]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b196:	4a0f      	ldr	r2, [pc, #60]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1a6:	4a0b      	ldr	r2, [pc, #44]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b1a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b1ac:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1ae:	4b09      	ldr	r3, [pc, #36]	@ (800b1d4 <HAL_HCD_MspInit+0xbc>)
 800b1b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	2043      	movs	r0, #67	@ 0x43
 800b1c0:	f7f7 f81c 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1c4:	2043      	movs	r0, #67	@ 0x43
 800b1c6:	f7f7 f845 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	3728      	adds	r7, #40	@ 0x28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40023800 	.word	0x40023800
 800b1d8:	40020000 	.word	0x40020000

0800b1dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe ff73 	bl	800a0d6 <USBH_LL_IncTimer>
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe ffab 	bl	800a162 <USBH_LL_Connect>
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe ffb4 	bl	800a190 <USBH_LL_Disconnect>
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	70fb      	strb	r3, [r7, #3]
 800b23c:	4613      	mov	r3, r2
 800b23e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe ff65 	bl	800a12a <USBH_LL_PortEnabled>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe ff65 	bl	800a146 <USBH_LL_PortDisabled>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b292:	2b01      	cmp	r3, #1
 800b294:	d12a      	bne.n	800b2ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b296:	4a18      	ldr	r2, [pc, #96]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a15      	ldr	r2, [pc, #84]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2a6:	4b14      	ldr	r3, [pc, #80]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b2ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2ae:	4b12      	ldr	r3, [pc, #72]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2b4:	4b10      	ldr	r3, [pc, #64]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b2cc:	480a      	ldr	r0, [pc, #40]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2ce:	f7f7 ff93 	bl	80031f8 <HAL_HCD_Init>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2d8:	f7f5 fe22 	bl	8000f20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2dc:	4806      	ldr	r0, [pc, #24]	@ (800b2f8 <USBH_LL_Init+0x74>)
 800b2de:	f7f8 fbff 	bl	8003ae0 <HAL_HCD_GetCurrentFrame>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7fe fee6 	bl	800a0b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200006c4 	.word	0x200006c4

0800b2fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b312:	4618      	mov	r0, r3
 800b314:	f7f8 fb6c 	bl	80039f0 <HAL_HCD_Start>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 f95e 	bl	800b5e0 <USBH_Get_USB_Status>
 800b324:	4603      	mov	r3, r0
 800b326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b328:	7bbb      	ldrb	r3, [r7, #14]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b348:	4618      	mov	r0, r3
 800b34a:	f7f8 fb74 	bl	8003a36 <HAL_HCD_Stop>
 800b34e:	4603      	mov	r3, r0
 800b350:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	4618      	mov	r0, r3
 800b356:	f000 f943 	bl	800b5e0 <USBH_Get_USB_Status>
 800b35a:	4603      	mov	r3, r0
 800b35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b370:	2301      	movs	r3, #1
 800b372:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7f8 fbbe 	bl	8003afc <HAL_HCD_GetCurrentSpeed>
 800b380:	4603      	mov	r3, r0
 800b382:	2b02      	cmp	r3, #2
 800b384:	d00c      	beq.n	800b3a0 <USBH_LL_GetSpeed+0x38>
 800b386:	2b02      	cmp	r3, #2
 800b388:	d80d      	bhi.n	800b3a6 <USBH_LL_GetSpeed+0x3e>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <USBH_LL_GetSpeed+0x2c>
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d003      	beq.n	800b39a <USBH_LL_GetSpeed+0x32>
 800b392:	e008      	b.n	800b3a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
    break;
 800b398:	e008      	b.n	800b3ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b39a:	2301      	movs	r3, #1
 800b39c:	73fb      	strb	r3, [r7, #15]
    break;
 800b39e:	e005      	b.n	800b3ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a4:	e002      	b.n	800b3ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3aa:	bf00      	nop
  }
  return  speed;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7f8 fb4f 	bl	8003a70 <HAL_HCD_ResetPort>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 f901 	bl	800b5e0 <USBH_Get_USB_Status>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3fe:	78fa      	ldrb	r2, [r7, #3]
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7f8 fb57 	bl	8003ab6 <HAL_HCD_HC_GetXferCount>
 800b408:	4603      	mov	r3, r0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b412:	b590      	push	{r4, r7, lr}
 800b414:	b089      	sub	sp, #36	@ 0x24
 800b416:	af04      	add	r7, sp, #16
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	461a      	mov	r2, r3
 800b420:	4603      	mov	r3, r0
 800b422:	70fb      	strb	r3, [r7, #3]
 800b424:	460b      	mov	r3, r1
 800b426:	70bb      	strb	r3, [r7, #2]
 800b428:	4613      	mov	r3, r2
 800b42a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b43a:	787c      	ldrb	r4, [r7, #1]
 800b43c:	78ba      	ldrb	r2, [r7, #2]
 800b43e:	78f9      	ldrb	r1, [r7, #3]
 800b440:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	4623      	mov	r3, r4
 800b452:	f7f7 ff43 	bl	80032dc <HAL_HCD_HC_Init>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 f8bf 	bl	800b5e0 <USBH_Get_USB_Status>
 800b462:	4603      	mov	r3, r0
 800b464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b466:	7bbb      	ldrb	r3, [r7, #14]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd90      	pop	{r4, r7, pc}

0800b470 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b48a:	78fa      	ldrb	r2, [r7, #3]
 800b48c:	4611      	mov	r1, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f7f7 ffdc 	bl	800344c <HAL_HCD_HC_Halt>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f8a0 	bl	800b5e0 <USBH_Get_USB_Status>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4ae:	b590      	push	{r4, r7, lr}
 800b4b0:	b089      	sub	sp, #36	@ 0x24
 800b4b2:	af04      	add	r7, sp, #16
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	4603      	mov	r3, r0
 800b4be:	70fb      	strb	r3, [r7, #3]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70bb      	strb	r3, [r7, #2]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b4d6:	787c      	ldrb	r4, [r7, #1]
 800b4d8:	78ba      	ldrb	r2, [r7, #2]
 800b4da:	78f9      	ldrb	r1, [r7, #3]
 800b4dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4e4:	9302      	str	r3, [sp, #8]
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	4623      	mov	r3, r4
 800b4f2:	f7f7 ffcf 	bl	8003494 <HAL_HCD_HC_SubmitRequest>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 f86f 	bl	800b5e0 <USBH_Get_USB_Status>
 800b502:	4603      	mov	r3, r0
 800b504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b506:	7bbb      	ldrb	r3, [r7, #14]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}

0800b510 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	4611      	mov	r1, r2
 800b526:	4618      	mov	r0, r3
 800b528:	f7f8 fab0 	bl	8003a8c <HAL_HCD_HC_GetURBState>
 800b52c:	4603      	mov	r3, r0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	460b      	mov	r3, r1
 800b540:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d103      	bne.n	800b554 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f872 	bl	800b638 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b554:	20c8      	movs	r0, #200	@ 0xc8
 800b556:	f7f5 ffa7 	bl	80014a8 <HAL_Delay>
  return USBH_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
 800b570:	4613      	mov	r3, r2
 800b572:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b57a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	68f9      	ldr	r1, [r7, #12]
 800b580:	4613      	mov	r3, r2
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	1a9b      	subs	r3, r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	440b      	add	r3, r1
 800b58a:	3317      	adds	r3, #23
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b592:	78fa      	ldrb	r2, [r7, #3]
 800b594:	68f9      	ldr	r1, [r7, #12]
 800b596:	4613      	mov	r3, r2
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	1a9b      	subs	r3, r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	440b      	add	r3, r1
 800b5a0:	333c      	adds	r3, #60	@ 0x3c
 800b5a2:	78ba      	ldrb	r2, [r7, #2]
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e009      	b.n	800b5bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b5a8:	78fa      	ldrb	r2, [r7, #3]
 800b5aa:	68f9      	ldr	r1, [r7, #12]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	333d      	adds	r3, #61	@ 0x3d
 800b5b8:	78ba      	ldrb	r2, [r7, #2]
 800b5ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7f5 ff68 	bl	80014a8 <HAL_Delay>
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b03      	cmp	r3, #3
 800b5f2:	d817      	bhi.n	800b624 <USBH_Get_USB_Status+0x44>
 800b5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5fc <USBH_Get_USB_Status+0x1c>)
 800b5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fa:	bf00      	nop
 800b5fc:	0800b60d 	.word	0x0800b60d
 800b600:	0800b613 	.word	0x0800b613
 800b604:	0800b619 	.word	0x0800b619
 800b608:	0800b61f 	.word	0x0800b61f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
    break;
 800b610:	e00b      	b.n	800b62a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b612:	2302      	movs	r3, #2
 800b614:	73fb      	strb	r3, [r7, #15]
    break;
 800b616:	e008      	b.n	800b62a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b618:	2301      	movs	r3, #1
 800b61a:	73fb      	strb	r3, [r7, #15]
    break;
 800b61c:	e005      	b.n	800b62a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b61e:	2302      	movs	r3, #2
 800b620:	73fb      	strb	r3, [r7, #15]
    break;
 800b622:	e002      	b.n	800b62a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b624:	2302      	movs	r3, #2
 800b626:	73fb      	strb	r3, [r7, #15]
    break;
 800b628:	bf00      	nop
  }
  return usb_status;
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	4603      	mov	r3, r0
 800b640:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b642:	79fb      	ldrb	r3, [r7, #7]
 800b644:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b64c:	2300      	movs	r3, #0
 800b64e:	73fb      	strb	r3, [r7, #15]
 800b650:	e001      	b.n	800b656 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b652:	2301      	movs	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	461a      	mov	r2, r3
 800b65a:	2101      	movs	r1, #1
 800b65c:	4803      	ldr	r0, [pc, #12]	@ (800b66c <MX_DriverVbusFS+0x34>)
 800b65e:	f7f7 fd9f 	bl	80031a0 <HAL_GPIO_WritePin>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	40020800 	.word	0x40020800

0800b670 <malloc>:
 800b670:	4b02      	ldr	r3, [pc, #8]	@ (800b67c <malloc+0xc>)
 800b672:	4601      	mov	r1, r0
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	f000 b82d 	b.w	800b6d4 <_malloc_r>
 800b67a:	bf00      	nop
 800b67c:	20000038 	.word	0x20000038

0800b680 <free>:
 800b680:	4b02      	ldr	r3, [pc, #8]	@ (800b68c <free+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f000 bb35 	b.w	800bcf4 <_free_r>
 800b68a:	bf00      	nop
 800b68c:	20000038 	.word	0x20000038

0800b690 <sbrk_aligned>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4e0f      	ldr	r6, [pc, #60]	@ (800b6d0 <sbrk_aligned+0x40>)
 800b694:	460c      	mov	r4, r1
 800b696:	6831      	ldr	r1, [r6, #0]
 800b698:	4605      	mov	r5, r0
 800b69a:	b911      	cbnz	r1, 800b6a2 <sbrk_aligned+0x12>
 800b69c:	f000 fada 	bl	800bc54 <_sbrk_r>
 800b6a0:	6030      	str	r0, [r6, #0]
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f000 fad5 	bl	800bc54 <_sbrk_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d103      	bne.n	800b6b6 <sbrk_aligned+0x26>
 800b6ae:	f04f 34ff 	mov.w	r4, #4294967295
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	bd70      	pop	{r4, r5, r6, pc}
 800b6b6:	1cc4      	adds	r4, r0, #3
 800b6b8:	f024 0403 	bic.w	r4, r4, #3
 800b6bc:	42a0      	cmp	r0, r4
 800b6be:	d0f8      	beq.n	800b6b2 <sbrk_aligned+0x22>
 800b6c0:	1a21      	subs	r1, r4, r0
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f000 fac6 	bl	800bc54 <_sbrk_r>
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d1f2      	bne.n	800b6b2 <sbrk_aligned+0x22>
 800b6cc:	e7ef      	b.n	800b6ae <sbrk_aligned+0x1e>
 800b6ce:	bf00      	nop
 800b6d0:	20000aa4 	.word	0x20000aa4

0800b6d4 <_malloc_r>:
 800b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	1ccd      	adds	r5, r1, #3
 800b6da:	f025 0503 	bic.w	r5, r5, #3
 800b6de:	3508      	adds	r5, #8
 800b6e0:	2d0c      	cmp	r5, #12
 800b6e2:	bf38      	it	cc
 800b6e4:	250c      	movcc	r5, #12
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	db01      	blt.n	800b6f0 <_malloc_r+0x1c>
 800b6ec:	42a9      	cmp	r1, r5
 800b6ee:	d904      	bls.n	800b6fa <_malloc_r+0x26>
 800b6f0:	230c      	movs	r3, #12
 800b6f2:	6033      	str	r3, [r6, #0]
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7d0 <_malloc_r+0xfc>
 800b6fe:	f000 f869 	bl	800b7d4 <__malloc_lock>
 800b702:	f8d8 3000 	ldr.w	r3, [r8]
 800b706:	461c      	mov	r4, r3
 800b708:	bb44      	cbnz	r4, 800b75c <_malloc_r+0x88>
 800b70a:	4629      	mov	r1, r5
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ffbf 	bl	800b690 <sbrk_aligned>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	4604      	mov	r4, r0
 800b716:	d158      	bne.n	800b7ca <_malloc_r+0xf6>
 800b718:	f8d8 4000 	ldr.w	r4, [r8]
 800b71c:	4627      	mov	r7, r4
 800b71e:	2f00      	cmp	r7, #0
 800b720:	d143      	bne.n	800b7aa <_malloc_r+0xd6>
 800b722:	2c00      	cmp	r4, #0
 800b724:	d04b      	beq.n	800b7be <_malloc_r+0xea>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	4639      	mov	r1, r7
 800b72a:	4630      	mov	r0, r6
 800b72c:	eb04 0903 	add.w	r9, r4, r3
 800b730:	f000 fa90 	bl	800bc54 <_sbrk_r>
 800b734:	4581      	cmp	r9, r0
 800b736:	d142      	bne.n	800b7be <_malloc_r+0xea>
 800b738:	6821      	ldr	r1, [r4, #0]
 800b73a:	1a6d      	subs	r5, r5, r1
 800b73c:	4629      	mov	r1, r5
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff ffa6 	bl	800b690 <sbrk_aligned>
 800b744:	3001      	adds	r0, #1
 800b746:	d03a      	beq.n	800b7be <_malloc_r+0xea>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	442b      	add	r3, r5
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	f8d8 3000 	ldr.w	r3, [r8]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	bb62      	cbnz	r2, 800b7b0 <_malloc_r+0xdc>
 800b756:	f8c8 7000 	str.w	r7, [r8]
 800b75a:	e00f      	b.n	800b77c <_malloc_r+0xa8>
 800b75c:	6822      	ldr	r2, [r4, #0]
 800b75e:	1b52      	subs	r2, r2, r5
 800b760:	d420      	bmi.n	800b7a4 <_malloc_r+0xd0>
 800b762:	2a0b      	cmp	r2, #11
 800b764:	d917      	bls.n	800b796 <_malloc_r+0xc2>
 800b766:	1961      	adds	r1, r4, r5
 800b768:	42a3      	cmp	r3, r4
 800b76a:	6025      	str	r5, [r4, #0]
 800b76c:	bf18      	it	ne
 800b76e:	6059      	strne	r1, [r3, #4]
 800b770:	6863      	ldr	r3, [r4, #4]
 800b772:	bf08      	it	eq
 800b774:	f8c8 1000 	streq.w	r1, [r8]
 800b778:	5162      	str	r2, [r4, r5]
 800b77a:	604b      	str	r3, [r1, #4]
 800b77c:	4630      	mov	r0, r6
 800b77e:	f000 f82f 	bl	800b7e0 <__malloc_unlock>
 800b782:	f104 000b 	add.w	r0, r4, #11
 800b786:	1d23      	adds	r3, r4, #4
 800b788:	f020 0007 	bic.w	r0, r0, #7
 800b78c:	1ac2      	subs	r2, r0, r3
 800b78e:	bf1c      	itt	ne
 800b790:	1a1b      	subne	r3, r3, r0
 800b792:	50a3      	strne	r3, [r4, r2]
 800b794:	e7af      	b.n	800b6f6 <_malloc_r+0x22>
 800b796:	6862      	ldr	r2, [r4, #4]
 800b798:	42a3      	cmp	r3, r4
 800b79a:	bf0c      	ite	eq
 800b79c:	f8c8 2000 	streq.w	r2, [r8]
 800b7a0:	605a      	strne	r2, [r3, #4]
 800b7a2:	e7eb      	b.n	800b77c <_malloc_r+0xa8>
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	6864      	ldr	r4, [r4, #4]
 800b7a8:	e7ae      	b.n	800b708 <_malloc_r+0x34>
 800b7aa:	463c      	mov	r4, r7
 800b7ac:	687f      	ldr	r7, [r7, #4]
 800b7ae:	e7b6      	b.n	800b71e <_malloc_r+0x4a>
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	d1fb      	bne.n	800b7b0 <_malloc_r+0xdc>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	6053      	str	r3, [r2, #4]
 800b7bc:	e7de      	b.n	800b77c <_malloc_r+0xa8>
 800b7be:	230c      	movs	r3, #12
 800b7c0:	6033      	str	r3, [r6, #0]
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 f80c 	bl	800b7e0 <__malloc_unlock>
 800b7c8:	e794      	b.n	800b6f4 <_malloc_r+0x20>
 800b7ca:	6005      	str	r5, [r0, #0]
 800b7cc:	e7d6      	b.n	800b77c <_malloc_r+0xa8>
 800b7ce:	bf00      	nop
 800b7d0:	20000aa8 	.word	0x20000aa8

0800b7d4 <__malloc_lock>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	@ (800b7dc <__malloc_lock+0x8>)
 800b7d6:	f000 ba8a 	b.w	800bcee <__retarget_lock_acquire_recursive>
 800b7da:	bf00      	nop
 800b7dc:	20000bec 	.word	0x20000bec

0800b7e0 <__malloc_unlock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	@ (800b7e8 <__malloc_unlock+0x8>)
 800b7e2:	f000 ba85 	b.w	800bcf0 <__retarget_lock_release_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	20000bec 	.word	0x20000bec

0800b7ec <std>:
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7fa:	6083      	str	r3, [r0, #8]
 800b7fc:	8181      	strh	r1, [r0, #12]
 800b7fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800b800:	81c2      	strh	r2, [r0, #14]
 800b802:	6183      	str	r3, [r0, #24]
 800b804:	4619      	mov	r1, r3
 800b806:	2208      	movs	r2, #8
 800b808:	305c      	adds	r0, #92	@ 0x5c
 800b80a:	f000 f9e7 	bl	800bbdc <memset>
 800b80e:	4b0d      	ldr	r3, [pc, #52]	@ (800b844 <std+0x58>)
 800b810:	6263      	str	r3, [r4, #36]	@ 0x24
 800b812:	4b0d      	ldr	r3, [pc, #52]	@ (800b848 <std+0x5c>)
 800b814:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b816:	4b0d      	ldr	r3, [pc, #52]	@ (800b84c <std+0x60>)
 800b818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b81a:	4b0d      	ldr	r3, [pc, #52]	@ (800b850 <std+0x64>)
 800b81c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b81e:	4b0d      	ldr	r3, [pc, #52]	@ (800b854 <std+0x68>)
 800b820:	6224      	str	r4, [r4, #32]
 800b822:	429c      	cmp	r4, r3
 800b824:	d006      	beq.n	800b834 <std+0x48>
 800b826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b82a:	4294      	cmp	r4, r2
 800b82c:	d002      	beq.n	800b834 <std+0x48>
 800b82e:	33d0      	adds	r3, #208	@ 0xd0
 800b830:	429c      	cmp	r4, r3
 800b832:	d105      	bne.n	800b840 <std+0x54>
 800b834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b83c:	f000 ba56 	b.w	800bcec <__retarget_lock_init_recursive>
 800b840:	bd10      	pop	{r4, pc}
 800b842:	bf00      	nop
 800b844:	0800ba2d 	.word	0x0800ba2d
 800b848:	0800ba4f 	.word	0x0800ba4f
 800b84c:	0800ba87 	.word	0x0800ba87
 800b850:	0800baab 	.word	0x0800baab
 800b854:	20000aac 	.word	0x20000aac

0800b858 <stdio_exit_handler>:
 800b858:	4a02      	ldr	r2, [pc, #8]	@ (800b864 <stdio_exit_handler+0xc>)
 800b85a:	4903      	ldr	r1, [pc, #12]	@ (800b868 <stdio_exit_handler+0x10>)
 800b85c:	4803      	ldr	r0, [pc, #12]	@ (800b86c <stdio_exit_handler+0x14>)
 800b85e:	f000 b869 	b.w	800b934 <_fwalk_sglue>
 800b862:	bf00      	nop
 800b864:	2000002c 	.word	0x2000002c
 800b868:	0800be91 	.word	0x0800be91
 800b86c:	2000003c 	.word	0x2000003c

0800b870 <cleanup_stdio>:
 800b870:	6841      	ldr	r1, [r0, #4]
 800b872:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a4 <cleanup_stdio+0x34>)
 800b874:	4299      	cmp	r1, r3
 800b876:	b510      	push	{r4, lr}
 800b878:	4604      	mov	r4, r0
 800b87a:	d001      	beq.n	800b880 <cleanup_stdio+0x10>
 800b87c:	f000 fb08 	bl	800be90 <_fflush_r>
 800b880:	68a1      	ldr	r1, [r4, #8]
 800b882:	4b09      	ldr	r3, [pc, #36]	@ (800b8a8 <cleanup_stdio+0x38>)
 800b884:	4299      	cmp	r1, r3
 800b886:	d002      	beq.n	800b88e <cleanup_stdio+0x1e>
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fb01 	bl	800be90 <_fflush_r>
 800b88e:	68e1      	ldr	r1, [r4, #12]
 800b890:	4b06      	ldr	r3, [pc, #24]	@ (800b8ac <cleanup_stdio+0x3c>)
 800b892:	4299      	cmp	r1, r3
 800b894:	d004      	beq.n	800b8a0 <cleanup_stdio+0x30>
 800b896:	4620      	mov	r0, r4
 800b898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89c:	f000 baf8 	b.w	800be90 <_fflush_r>
 800b8a0:	bd10      	pop	{r4, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000aac 	.word	0x20000aac
 800b8a8:	20000b14 	.word	0x20000b14
 800b8ac:	20000b7c 	.word	0x20000b7c

0800b8b0 <global_stdio_init.part.0>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e0 <global_stdio_init.part.0+0x30>)
 800b8b4:	4c0b      	ldr	r4, [pc, #44]	@ (800b8e4 <global_stdio_init.part.0+0x34>)
 800b8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b8e8 <global_stdio_init.part.0+0x38>)
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2104      	movs	r1, #4
 800b8c0:	f7ff ff94 	bl	800b7ec <std>
 800b8c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	2109      	movs	r1, #9
 800b8cc:	f7ff ff8e 	bl	800b7ec <std>
 800b8d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8da:	2112      	movs	r1, #18
 800b8dc:	f7ff bf86 	b.w	800b7ec <std>
 800b8e0:	20000be4 	.word	0x20000be4
 800b8e4:	20000aac 	.word	0x20000aac
 800b8e8:	0800b859 	.word	0x0800b859

0800b8ec <__sfp_lock_acquire>:
 800b8ec:	4801      	ldr	r0, [pc, #4]	@ (800b8f4 <__sfp_lock_acquire+0x8>)
 800b8ee:	f000 b9fe 	b.w	800bcee <__retarget_lock_acquire_recursive>
 800b8f2:	bf00      	nop
 800b8f4:	20000bed 	.word	0x20000bed

0800b8f8 <__sfp_lock_release>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	@ (800b900 <__sfp_lock_release+0x8>)
 800b8fa:	f000 b9f9 	b.w	800bcf0 <__retarget_lock_release_recursive>
 800b8fe:	bf00      	nop
 800b900:	20000bed 	.word	0x20000bed

0800b904 <__sinit>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	f7ff fff0 	bl	800b8ec <__sfp_lock_acquire>
 800b90c:	6a23      	ldr	r3, [r4, #32]
 800b90e:	b11b      	cbz	r3, 800b918 <__sinit+0x14>
 800b910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b914:	f7ff bff0 	b.w	800b8f8 <__sfp_lock_release>
 800b918:	4b04      	ldr	r3, [pc, #16]	@ (800b92c <__sinit+0x28>)
 800b91a:	6223      	str	r3, [r4, #32]
 800b91c:	4b04      	ldr	r3, [pc, #16]	@ (800b930 <__sinit+0x2c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f5      	bne.n	800b910 <__sinit+0xc>
 800b924:	f7ff ffc4 	bl	800b8b0 <global_stdio_init.part.0>
 800b928:	e7f2      	b.n	800b910 <__sinit+0xc>
 800b92a:	bf00      	nop
 800b92c:	0800b871 	.word	0x0800b871
 800b930:	20000be4 	.word	0x20000be4

0800b934 <_fwalk_sglue>:
 800b934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b938:	4607      	mov	r7, r0
 800b93a:	4688      	mov	r8, r1
 800b93c:	4614      	mov	r4, r2
 800b93e:	2600      	movs	r6, #0
 800b940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b944:	f1b9 0901 	subs.w	r9, r9, #1
 800b948:	d505      	bpl.n	800b956 <_fwalk_sglue+0x22>
 800b94a:	6824      	ldr	r4, [r4, #0]
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	d1f7      	bne.n	800b940 <_fwalk_sglue+0xc>
 800b950:	4630      	mov	r0, r6
 800b952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d907      	bls.n	800b96c <_fwalk_sglue+0x38>
 800b95c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b960:	3301      	adds	r3, #1
 800b962:	d003      	beq.n	800b96c <_fwalk_sglue+0x38>
 800b964:	4629      	mov	r1, r5
 800b966:	4638      	mov	r0, r7
 800b968:	47c0      	blx	r8
 800b96a:	4306      	orrs	r6, r0
 800b96c:	3568      	adds	r5, #104	@ 0x68
 800b96e:	e7e9      	b.n	800b944 <_fwalk_sglue+0x10>

0800b970 <_puts_r>:
 800b970:	6a03      	ldr	r3, [r0, #32]
 800b972:	b570      	push	{r4, r5, r6, lr}
 800b974:	6884      	ldr	r4, [r0, #8]
 800b976:	4605      	mov	r5, r0
 800b978:	460e      	mov	r6, r1
 800b97a:	b90b      	cbnz	r3, 800b980 <_puts_r+0x10>
 800b97c:	f7ff ffc2 	bl	800b904 <__sinit>
 800b980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b982:	07db      	lsls	r3, r3, #31
 800b984:	d405      	bmi.n	800b992 <_puts_r+0x22>
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	0598      	lsls	r0, r3, #22
 800b98a:	d402      	bmi.n	800b992 <_puts_r+0x22>
 800b98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b98e:	f000 f9ae 	bl	800bcee <__retarget_lock_acquire_recursive>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	0719      	lsls	r1, r3, #28
 800b996:	d502      	bpl.n	800b99e <_puts_r+0x2e>
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d135      	bne.n	800ba0a <_puts_r+0x9a>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f000 f8c5 	bl	800bb30 <__swsetup_r>
 800b9a6:	b380      	cbz	r0, 800ba0a <_puts_r+0x9a>
 800b9a8:	f04f 35ff 	mov.w	r5, #4294967295
 800b9ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9ae:	07da      	lsls	r2, r3, #31
 800b9b0:	d405      	bmi.n	800b9be <_puts_r+0x4e>
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	059b      	lsls	r3, r3, #22
 800b9b6:	d402      	bmi.n	800b9be <_puts_r+0x4e>
 800b9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ba:	f000 f999 	bl	800bcf0 <__retarget_lock_release_recursive>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	da04      	bge.n	800b9d0 <_puts_r+0x60>
 800b9c6:	69a2      	ldr	r2, [r4, #24]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	dc17      	bgt.n	800b9fc <_puts_r+0x8c>
 800b9cc:	290a      	cmp	r1, #10
 800b9ce:	d015      	beq.n	800b9fc <_puts_r+0x8c>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	6022      	str	r2, [r4, #0]
 800b9d6:	7019      	strb	r1, [r3, #0]
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	d1ed      	bne.n	800b9c2 <_puts_r+0x52>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	da11      	bge.n	800ba0e <_puts_r+0x9e>
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	210a      	movs	r1, #10
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f000 f85f 	bl	800bab2 <__swbuf_r>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d0d7      	beq.n	800b9a8 <_puts_r+0x38>
 800b9f8:	250a      	movs	r5, #10
 800b9fa:	e7d7      	b.n	800b9ac <_puts_r+0x3c>
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 f857 	bl	800bab2 <__swbuf_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d1e7      	bne.n	800b9d8 <_puts_r+0x68>
 800ba08:	e7ce      	b.n	800b9a8 <_puts_r+0x38>
 800ba0a:	3e01      	subs	r6, #1
 800ba0c:	e7e4      	b.n	800b9d8 <_puts_r+0x68>
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	6022      	str	r2, [r4, #0]
 800ba14:	220a      	movs	r2, #10
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e7ee      	b.n	800b9f8 <_puts_r+0x88>
	...

0800ba1c <puts>:
 800ba1c:	4b02      	ldr	r3, [pc, #8]	@ (800ba28 <puts+0xc>)
 800ba1e:	4601      	mov	r1, r0
 800ba20:	6818      	ldr	r0, [r3, #0]
 800ba22:	f7ff bfa5 	b.w	800b970 <_puts_r>
 800ba26:	bf00      	nop
 800ba28:	20000038 	.word	0x20000038

0800ba2c <__sread>:
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	460c      	mov	r4, r1
 800ba30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba34:	f000 f8fc 	bl	800bc30 <_read_r>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	bfab      	itete	ge
 800ba3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba40:	181b      	addge	r3, r3, r0
 800ba42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba46:	bfac      	ite	ge
 800ba48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba4a:	81a3      	strhlt	r3, [r4, #12]
 800ba4c:	bd10      	pop	{r4, pc}

0800ba4e <__swrite>:
 800ba4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba52:	461f      	mov	r7, r3
 800ba54:	898b      	ldrh	r3, [r1, #12]
 800ba56:	05db      	lsls	r3, r3, #23
 800ba58:	4605      	mov	r5, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	4616      	mov	r6, r2
 800ba5e:	d505      	bpl.n	800ba6c <__swrite+0x1e>
 800ba60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba64:	2302      	movs	r3, #2
 800ba66:	2200      	movs	r2, #0
 800ba68:	f000 f8d0 	bl	800bc0c <_lseek_r>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	4632      	mov	r2, r6
 800ba7a:	463b      	mov	r3, r7
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba82:	f000 b8f7 	b.w	800bc74 <_write_r>

0800ba86 <__sseek>:
 800ba86:	b510      	push	{r4, lr}
 800ba88:	460c      	mov	r4, r1
 800ba8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8e:	f000 f8bd 	bl	800bc0c <_lseek_r>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	bf15      	itete	ne
 800ba98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800baa2:	81a3      	strheq	r3, [r4, #12]
 800baa4:	bf18      	it	ne
 800baa6:	81a3      	strhne	r3, [r4, #12]
 800baa8:	bd10      	pop	{r4, pc}

0800baaa <__sclose>:
 800baaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baae:	f000 b89d 	b.w	800bbec <_close_r>

0800bab2 <__swbuf_r>:
 800bab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab4:	460e      	mov	r6, r1
 800bab6:	4614      	mov	r4, r2
 800bab8:	4605      	mov	r5, r0
 800baba:	b118      	cbz	r0, 800bac4 <__swbuf_r+0x12>
 800babc:	6a03      	ldr	r3, [r0, #32]
 800babe:	b90b      	cbnz	r3, 800bac4 <__swbuf_r+0x12>
 800bac0:	f7ff ff20 	bl	800b904 <__sinit>
 800bac4:	69a3      	ldr	r3, [r4, #24]
 800bac6:	60a3      	str	r3, [r4, #8]
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	071a      	lsls	r2, r3, #28
 800bacc:	d501      	bpl.n	800bad2 <__swbuf_r+0x20>
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	b943      	cbnz	r3, 800bae4 <__swbuf_r+0x32>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 f82b 	bl	800bb30 <__swsetup_r>
 800bada:	b118      	cbz	r0, 800bae4 <__swbuf_r+0x32>
 800badc:	f04f 37ff 	mov.w	r7, #4294967295
 800bae0:	4638      	mov	r0, r7
 800bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	6922      	ldr	r2, [r4, #16]
 800bae8:	1a98      	subs	r0, r3, r2
 800baea:	6963      	ldr	r3, [r4, #20]
 800baec:	b2f6      	uxtb	r6, r6
 800baee:	4283      	cmp	r3, r0
 800baf0:	4637      	mov	r7, r6
 800baf2:	dc05      	bgt.n	800bb00 <__swbuf_r+0x4e>
 800baf4:	4621      	mov	r1, r4
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f9ca 	bl	800be90 <_fflush_r>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d1ed      	bne.n	800badc <__swbuf_r+0x2a>
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	6022      	str	r2, [r4, #0]
 800bb0c:	701e      	strb	r6, [r3, #0]
 800bb0e:	6962      	ldr	r2, [r4, #20]
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d004      	beq.n	800bb20 <__swbuf_r+0x6e>
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	07db      	lsls	r3, r3, #31
 800bb1a:	d5e1      	bpl.n	800bae0 <__swbuf_r+0x2e>
 800bb1c:	2e0a      	cmp	r6, #10
 800bb1e:	d1df      	bne.n	800bae0 <__swbuf_r+0x2e>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 f9b4 	bl	800be90 <_fflush_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d0d9      	beq.n	800bae0 <__swbuf_r+0x2e>
 800bb2c:	e7d6      	b.n	800badc <__swbuf_r+0x2a>
	...

0800bb30 <__swsetup_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4b29      	ldr	r3, [pc, #164]	@ (800bbd8 <__swsetup_r+0xa8>)
 800bb34:	4605      	mov	r5, r0
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	460c      	mov	r4, r1
 800bb3a:	b118      	cbz	r0, 800bb44 <__swsetup_r+0x14>
 800bb3c:	6a03      	ldr	r3, [r0, #32]
 800bb3e:	b90b      	cbnz	r3, 800bb44 <__swsetup_r+0x14>
 800bb40:	f7ff fee0 	bl	800b904 <__sinit>
 800bb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb48:	0719      	lsls	r1, r3, #28
 800bb4a:	d422      	bmi.n	800bb92 <__swsetup_r+0x62>
 800bb4c:	06da      	lsls	r2, r3, #27
 800bb4e:	d407      	bmi.n	800bb60 <__swsetup_r+0x30>
 800bb50:	2209      	movs	r2, #9
 800bb52:	602a      	str	r2, [r5, #0]
 800bb54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	e033      	b.n	800bbc8 <__swsetup_r+0x98>
 800bb60:	0758      	lsls	r0, r3, #29
 800bb62:	d512      	bpl.n	800bb8a <__swsetup_r+0x5a>
 800bb64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb66:	b141      	cbz	r1, 800bb7a <__swsetup_r+0x4a>
 800bb68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb6c:	4299      	cmp	r1, r3
 800bb6e:	d002      	beq.n	800bb76 <__swsetup_r+0x46>
 800bb70:	4628      	mov	r0, r5
 800bb72:	f000 f8bf 	bl	800bcf4 <_free_r>
 800bb76:	2300      	movs	r3, #0
 800bb78:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	2300      	movs	r3, #0
 800bb84:	6063      	str	r3, [r4, #4]
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	f043 0308 	orr.w	r3, r3, #8
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	b94b      	cbnz	r3, 800bbaa <__swsetup_r+0x7a>
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba0:	d003      	beq.n	800bbaa <__swsetup_r+0x7a>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 f9c1 	bl	800bf2c <__smakebuf_r>
 800bbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbae:	f013 0201 	ands.w	r2, r3, #1
 800bbb2:	d00a      	beq.n	800bbca <__swsetup_r+0x9a>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	60a2      	str	r2, [r4, #8]
 800bbb8:	6962      	ldr	r2, [r4, #20]
 800bbba:	4252      	negs	r2, r2
 800bbbc:	61a2      	str	r2, [r4, #24]
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	b942      	cbnz	r2, 800bbd4 <__swsetup_r+0xa4>
 800bbc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbc6:	d1c5      	bne.n	800bb54 <__swsetup_r+0x24>
 800bbc8:	bd38      	pop	{r3, r4, r5, pc}
 800bbca:	0799      	lsls	r1, r3, #30
 800bbcc:	bf58      	it	pl
 800bbce:	6962      	ldrpl	r2, [r4, #20]
 800bbd0:	60a2      	str	r2, [r4, #8]
 800bbd2:	e7f4      	b.n	800bbbe <__swsetup_r+0x8e>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e7f7      	b.n	800bbc8 <__swsetup_r+0x98>
 800bbd8:	20000038 	.word	0x20000038

0800bbdc <memset>:
 800bbdc:	4402      	add	r2, r0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d100      	bne.n	800bbe6 <memset+0xa>
 800bbe4:	4770      	bx	lr
 800bbe6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbea:	e7f9      	b.n	800bbe0 <memset+0x4>

0800bbec <_close_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4d06      	ldr	r5, [pc, #24]	@ (800bc08 <_close_r+0x1c>)
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4608      	mov	r0, r1
 800bbf6:	602b      	str	r3, [r5, #0]
 800bbf8:	f7f5 faab 	bl	8001152 <_close>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_close_r+0x1a>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_close_r+0x1a>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20000be8 	.word	0x20000be8

0800bc0c <_lseek_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4d07      	ldr	r5, [pc, #28]	@ (800bc2c <_lseek_r+0x20>)
 800bc10:	4604      	mov	r4, r0
 800bc12:	4608      	mov	r0, r1
 800bc14:	4611      	mov	r1, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	602a      	str	r2, [r5, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f7f5 fac0 	bl	80011a0 <_lseek>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d102      	bne.n	800bc2a <_lseek_r+0x1e>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	b103      	cbz	r3, 800bc2a <_lseek_r+0x1e>
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	20000be8 	.word	0x20000be8

0800bc30 <_read_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	@ (800bc50 <_read_r+0x20>)
 800bc34:	4604      	mov	r4, r0
 800bc36:	4608      	mov	r0, r1
 800bc38:	4611      	mov	r1, r2
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	602a      	str	r2, [r5, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f7f5 fa6a 	bl	8001118 <_read>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_read_r+0x1e>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_read_r+0x1e>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	20000be8 	.word	0x20000be8

0800bc54 <_sbrk_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	@ (800bc70 <_sbrk_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f5 faac 	bl	80011bc <_sbrk>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_sbrk_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_sbrk_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20000be8 	.word	0x20000be8

0800bc74 <_write_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4d07      	ldr	r5, [pc, #28]	@ (800bc94 <_write_r+0x20>)
 800bc78:	4604      	mov	r4, r0
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	602a      	str	r2, [r5, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f7f5 f930 	bl	8000ee8 <_write>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_write_r+0x1e>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_write_r+0x1e>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20000be8 	.word	0x20000be8

0800bc98 <__errno>:
 800bc98:	4b01      	ldr	r3, [pc, #4]	@ (800bca0 <__errno+0x8>)
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20000038 	.word	0x20000038

0800bca4 <__libc_init_array>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4d0d      	ldr	r5, [pc, #52]	@ (800bcdc <__libc_init_array+0x38>)
 800bca8:	4c0d      	ldr	r4, [pc, #52]	@ (800bce0 <__libc_init_array+0x3c>)
 800bcaa:	1b64      	subs	r4, r4, r5
 800bcac:	10a4      	asrs	r4, r4, #2
 800bcae:	2600      	movs	r6, #0
 800bcb0:	42a6      	cmp	r6, r4
 800bcb2:	d109      	bne.n	800bcc8 <__libc_init_array+0x24>
 800bcb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bce4 <__libc_init_array+0x40>)
 800bcb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bce8 <__libc_init_array+0x44>)
 800bcb8:	f000 f996 	bl	800bfe8 <_init>
 800bcbc:	1b64      	subs	r4, r4, r5
 800bcbe:	10a4      	asrs	r4, r4, #2
 800bcc0:	2600      	movs	r6, #0
 800bcc2:	42a6      	cmp	r6, r4
 800bcc4:	d105      	bne.n	800bcd2 <__libc_init_array+0x2e>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bccc:	4798      	blx	r3
 800bcce:	3601      	adds	r6, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__libc_init_array+0xc>
 800bcd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcd6:	4798      	blx	r3
 800bcd8:	3601      	adds	r6, #1
 800bcda:	e7f2      	b.n	800bcc2 <__libc_init_array+0x1e>
 800bcdc:	0800c2b4 	.word	0x0800c2b4
 800bce0:	0800c2b4 	.word	0x0800c2b4
 800bce4:	0800c2b4 	.word	0x0800c2b4
 800bce8:	0800c2b8 	.word	0x0800c2b8

0800bcec <__retarget_lock_init_recursive>:
 800bcec:	4770      	bx	lr

0800bcee <__retarget_lock_acquire_recursive>:
 800bcee:	4770      	bx	lr

0800bcf0 <__retarget_lock_release_recursive>:
 800bcf0:	4770      	bx	lr
	...

0800bcf4 <_free_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	d041      	beq.n	800bd80 <_free_r+0x8c>
 800bcfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd00:	1f0c      	subs	r4, r1, #4
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bfb8      	it	lt
 800bd06:	18e4      	addlt	r4, r4, r3
 800bd08:	f7ff fd64 	bl	800b7d4 <__malloc_lock>
 800bd0c:	4a1d      	ldr	r2, [pc, #116]	@ (800bd84 <_free_r+0x90>)
 800bd0e:	6813      	ldr	r3, [r2, #0]
 800bd10:	b933      	cbnz	r3, 800bd20 <_free_r+0x2c>
 800bd12:	6063      	str	r3, [r4, #4]
 800bd14:	6014      	str	r4, [r2, #0]
 800bd16:	4628      	mov	r0, r5
 800bd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd1c:	f7ff bd60 	b.w	800b7e0 <__malloc_unlock>
 800bd20:	42a3      	cmp	r3, r4
 800bd22:	d908      	bls.n	800bd36 <_free_r+0x42>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	1821      	adds	r1, r4, r0
 800bd28:	428b      	cmp	r3, r1
 800bd2a:	bf01      	itttt	eq
 800bd2c:	6819      	ldreq	r1, [r3, #0]
 800bd2e:	685b      	ldreq	r3, [r3, #4]
 800bd30:	1809      	addeq	r1, r1, r0
 800bd32:	6021      	streq	r1, [r4, #0]
 800bd34:	e7ed      	b.n	800bd12 <_free_r+0x1e>
 800bd36:	461a      	mov	r2, r3
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	b10b      	cbz	r3, 800bd40 <_free_r+0x4c>
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d9fa      	bls.n	800bd36 <_free_r+0x42>
 800bd40:	6811      	ldr	r1, [r2, #0]
 800bd42:	1850      	adds	r0, r2, r1
 800bd44:	42a0      	cmp	r0, r4
 800bd46:	d10b      	bne.n	800bd60 <_free_r+0x6c>
 800bd48:	6820      	ldr	r0, [r4, #0]
 800bd4a:	4401      	add	r1, r0
 800bd4c:	1850      	adds	r0, r2, r1
 800bd4e:	4283      	cmp	r3, r0
 800bd50:	6011      	str	r1, [r2, #0]
 800bd52:	d1e0      	bne.n	800bd16 <_free_r+0x22>
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	6053      	str	r3, [r2, #4]
 800bd5a:	4408      	add	r0, r1
 800bd5c:	6010      	str	r0, [r2, #0]
 800bd5e:	e7da      	b.n	800bd16 <_free_r+0x22>
 800bd60:	d902      	bls.n	800bd68 <_free_r+0x74>
 800bd62:	230c      	movs	r3, #12
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	e7d6      	b.n	800bd16 <_free_r+0x22>
 800bd68:	6820      	ldr	r0, [r4, #0]
 800bd6a:	1821      	adds	r1, r4, r0
 800bd6c:	428b      	cmp	r3, r1
 800bd6e:	bf04      	itt	eq
 800bd70:	6819      	ldreq	r1, [r3, #0]
 800bd72:	685b      	ldreq	r3, [r3, #4]
 800bd74:	6063      	str	r3, [r4, #4]
 800bd76:	bf04      	itt	eq
 800bd78:	1809      	addeq	r1, r1, r0
 800bd7a:	6021      	streq	r1, [r4, #0]
 800bd7c:	6054      	str	r4, [r2, #4]
 800bd7e:	e7ca      	b.n	800bd16 <_free_r+0x22>
 800bd80:	bd38      	pop	{r3, r4, r5, pc}
 800bd82:	bf00      	nop
 800bd84:	20000aa8 	.word	0x20000aa8

0800bd88 <__sflush_r>:
 800bd88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd90:	0716      	lsls	r6, r2, #28
 800bd92:	4605      	mov	r5, r0
 800bd94:	460c      	mov	r4, r1
 800bd96:	d454      	bmi.n	800be42 <__sflush_r+0xba>
 800bd98:	684b      	ldr	r3, [r1, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dc02      	bgt.n	800bda4 <__sflush_r+0x1c>
 800bd9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dd48      	ble.n	800be36 <__sflush_r+0xae>
 800bda4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	d045      	beq.n	800be36 <__sflush_r+0xae>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdb0:	682f      	ldr	r7, [r5, #0]
 800bdb2:	6a21      	ldr	r1, [r4, #32]
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	d030      	beq.n	800be1a <__sflush_r+0x92>
 800bdb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	0759      	lsls	r1, r3, #29
 800bdbe:	d505      	bpl.n	800bdcc <__sflush_r+0x44>
 800bdc0:	6863      	ldr	r3, [r4, #4]
 800bdc2:	1ad2      	subs	r2, r2, r3
 800bdc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdc6:	b10b      	cbz	r3, 800bdcc <__sflush_r+0x44>
 800bdc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	2300      	movs	r3, #0
 800bdce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdd0:	6a21      	ldr	r1, [r4, #32]
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b0      	blx	r6
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	d106      	bne.n	800bdea <__sflush_r+0x62>
 800bddc:	6829      	ldr	r1, [r5, #0]
 800bdde:	291d      	cmp	r1, #29
 800bde0:	d82b      	bhi.n	800be3a <__sflush_r+0xb2>
 800bde2:	4a2a      	ldr	r2, [pc, #168]	@ (800be8c <__sflush_r+0x104>)
 800bde4:	410a      	asrs	r2, r1
 800bde6:	07d6      	lsls	r6, r2, #31
 800bde8:	d427      	bmi.n	800be3a <__sflush_r+0xb2>
 800bdea:	2200      	movs	r2, #0
 800bdec:	6062      	str	r2, [r4, #4]
 800bdee:	04d9      	lsls	r1, r3, #19
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	6022      	str	r2, [r4, #0]
 800bdf4:	d504      	bpl.n	800be00 <__sflush_r+0x78>
 800bdf6:	1c42      	adds	r2, r0, #1
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0x76>
 800bdfa:	682b      	ldr	r3, [r5, #0]
 800bdfc:	b903      	cbnz	r3, 800be00 <__sflush_r+0x78>
 800bdfe:	6560      	str	r0, [r4, #84]	@ 0x54
 800be00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be02:	602f      	str	r7, [r5, #0]
 800be04:	b1b9      	cbz	r1, 800be36 <__sflush_r+0xae>
 800be06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be0a:	4299      	cmp	r1, r3
 800be0c:	d002      	beq.n	800be14 <__sflush_r+0x8c>
 800be0e:	4628      	mov	r0, r5
 800be10:	f7ff ff70 	bl	800bcf4 <_free_r>
 800be14:	2300      	movs	r3, #0
 800be16:	6363      	str	r3, [r4, #52]	@ 0x34
 800be18:	e00d      	b.n	800be36 <__sflush_r+0xae>
 800be1a:	2301      	movs	r3, #1
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b0      	blx	r6
 800be20:	4602      	mov	r2, r0
 800be22:	1c50      	adds	r0, r2, #1
 800be24:	d1c9      	bne.n	800bdba <__sflush_r+0x32>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0c6      	beq.n	800bdba <__sflush_r+0x32>
 800be2c:	2b1d      	cmp	r3, #29
 800be2e:	d001      	beq.n	800be34 <__sflush_r+0xac>
 800be30:	2b16      	cmp	r3, #22
 800be32:	d11e      	bne.n	800be72 <__sflush_r+0xea>
 800be34:	602f      	str	r7, [r5, #0]
 800be36:	2000      	movs	r0, #0
 800be38:	e022      	b.n	800be80 <__sflush_r+0xf8>
 800be3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be3e:	b21b      	sxth	r3, r3
 800be40:	e01b      	b.n	800be7a <__sflush_r+0xf2>
 800be42:	690f      	ldr	r7, [r1, #16]
 800be44:	2f00      	cmp	r7, #0
 800be46:	d0f6      	beq.n	800be36 <__sflush_r+0xae>
 800be48:	0793      	lsls	r3, r2, #30
 800be4a:	680e      	ldr	r6, [r1, #0]
 800be4c:	bf08      	it	eq
 800be4e:	694b      	ldreq	r3, [r1, #20]
 800be50:	600f      	str	r7, [r1, #0]
 800be52:	bf18      	it	ne
 800be54:	2300      	movne	r3, #0
 800be56:	eba6 0807 	sub.w	r8, r6, r7
 800be5a:	608b      	str	r3, [r1, #8]
 800be5c:	f1b8 0f00 	cmp.w	r8, #0
 800be60:	dde9      	ble.n	800be36 <__sflush_r+0xae>
 800be62:	6a21      	ldr	r1, [r4, #32]
 800be64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be66:	4643      	mov	r3, r8
 800be68:	463a      	mov	r2, r7
 800be6a:	4628      	mov	r0, r5
 800be6c:	47b0      	blx	r6
 800be6e:	2800      	cmp	r0, #0
 800be70:	dc08      	bgt.n	800be84 <__sflush_r+0xfc>
 800be72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	4407      	add	r7, r0
 800be86:	eba8 0800 	sub.w	r8, r8, r0
 800be8a:	e7e7      	b.n	800be5c <__sflush_r+0xd4>
 800be8c:	dfbffffe 	.word	0xdfbffffe

0800be90 <_fflush_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	690b      	ldr	r3, [r1, #16]
 800be94:	4605      	mov	r5, r0
 800be96:	460c      	mov	r4, r1
 800be98:	b913      	cbnz	r3, 800bea0 <_fflush_r+0x10>
 800be9a:	2500      	movs	r5, #0
 800be9c:	4628      	mov	r0, r5
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	b118      	cbz	r0, 800beaa <_fflush_r+0x1a>
 800bea2:	6a03      	ldr	r3, [r0, #32]
 800bea4:	b90b      	cbnz	r3, 800beaa <_fflush_r+0x1a>
 800bea6:	f7ff fd2d 	bl	800b904 <__sinit>
 800beaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0f3      	beq.n	800be9a <_fflush_r+0xa>
 800beb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800beb4:	07d0      	lsls	r0, r2, #31
 800beb6:	d404      	bmi.n	800bec2 <_fflush_r+0x32>
 800beb8:	0599      	lsls	r1, r3, #22
 800beba:	d402      	bmi.n	800bec2 <_fflush_r+0x32>
 800bebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bebe:	f7ff ff16 	bl	800bcee <__retarget_lock_acquire_recursive>
 800bec2:	4628      	mov	r0, r5
 800bec4:	4621      	mov	r1, r4
 800bec6:	f7ff ff5f 	bl	800bd88 <__sflush_r>
 800beca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800becc:	07da      	lsls	r2, r3, #31
 800bece:	4605      	mov	r5, r0
 800bed0:	d4e4      	bmi.n	800be9c <_fflush_r+0xc>
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	059b      	lsls	r3, r3, #22
 800bed6:	d4e1      	bmi.n	800be9c <_fflush_r+0xc>
 800bed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beda:	f7ff ff09 	bl	800bcf0 <__retarget_lock_release_recursive>
 800bede:	e7dd      	b.n	800be9c <_fflush_r+0xc>

0800bee0 <__swhatbuf_r>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	460c      	mov	r4, r1
 800bee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee8:	2900      	cmp	r1, #0
 800beea:	b096      	sub	sp, #88	@ 0x58
 800beec:	4615      	mov	r5, r2
 800beee:	461e      	mov	r6, r3
 800bef0:	da0d      	bge.n	800bf0e <__swhatbuf_r+0x2e>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bef8:	f04f 0100 	mov.w	r1, #0
 800befc:	bf14      	ite	ne
 800befe:	2340      	movne	r3, #64	@ 0x40
 800bf00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf04:	2000      	movs	r0, #0
 800bf06:	6031      	str	r1, [r6, #0]
 800bf08:	602b      	str	r3, [r5, #0]
 800bf0a:	b016      	add	sp, #88	@ 0x58
 800bf0c:	bd70      	pop	{r4, r5, r6, pc}
 800bf0e:	466a      	mov	r2, sp
 800bf10:	f000 f848 	bl	800bfa4 <_fstat_r>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	dbec      	blt.n	800bef2 <__swhatbuf_r+0x12>
 800bf18:	9901      	ldr	r1, [sp, #4]
 800bf1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf22:	4259      	negs	r1, r3
 800bf24:	4159      	adcs	r1, r3
 800bf26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf2a:	e7eb      	b.n	800bf04 <__swhatbuf_r+0x24>

0800bf2c <__smakebuf_r>:
 800bf2c:	898b      	ldrh	r3, [r1, #12]
 800bf2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf30:	079d      	lsls	r5, r3, #30
 800bf32:	4606      	mov	r6, r0
 800bf34:	460c      	mov	r4, r1
 800bf36:	d507      	bpl.n	800bf48 <__smakebuf_r+0x1c>
 800bf38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2301      	movs	r3, #1
 800bf42:	6163      	str	r3, [r4, #20]
 800bf44:	b003      	add	sp, #12
 800bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf48:	ab01      	add	r3, sp, #4
 800bf4a:	466a      	mov	r2, sp
 800bf4c:	f7ff ffc8 	bl	800bee0 <__swhatbuf_r>
 800bf50:	9f00      	ldr	r7, [sp, #0]
 800bf52:	4605      	mov	r5, r0
 800bf54:	4639      	mov	r1, r7
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff fbbc 	bl	800b6d4 <_malloc_r>
 800bf5c:	b948      	cbnz	r0, 800bf72 <__smakebuf_r+0x46>
 800bf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf62:	059a      	lsls	r2, r3, #22
 800bf64:	d4ee      	bmi.n	800bf44 <__smakebuf_r+0x18>
 800bf66:	f023 0303 	bic.w	r3, r3, #3
 800bf6a:	f043 0302 	orr.w	r3, r3, #2
 800bf6e:	81a3      	strh	r3, [r4, #12]
 800bf70:	e7e2      	b.n	800bf38 <__smakebuf_r+0xc>
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	6020      	str	r0, [r4, #0]
 800bf76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf82:	b15b      	cbz	r3, 800bf9c <__smakebuf_r+0x70>
 800bf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f000 f81d 	bl	800bfc8 <_isatty_r>
 800bf8e:	b128      	cbz	r0, 800bf9c <__smakebuf_r+0x70>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	f043 0301 	orr.w	r3, r3, #1
 800bf9a:	81a3      	strh	r3, [r4, #12]
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	431d      	orrs	r5, r3
 800bfa0:	81a5      	strh	r5, [r4, #12]
 800bfa2:	e7cf      	b.n	800bf44 <__smakebuf_r+0x18>

0800bfa4 <_fstat_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d07      	ldr	r5, [pc, #28]	@ (800bfc4 <_fstat_r+0x20>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	4611      	mov	r1, r2
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	f7f5 f8da 	bl	800116a <_fstat>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	d102      	bne.n	800bfc0 <_fstat_r+0x1c>
 800bfba:	682b      	ldr	r3, [r5, #0]
 800bfbc:	b103      	cbz	r3, 800bfc0 <_fstat_r+0x1c>
 800bfbe:	6023      	str	r3, [r4, #0]
 800bfc0:	bd38      	pop	{r3, r4, r5, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000be8 	.word	0x20000be8

0800bfc8 <_isatty_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d06      	ldr	r5, [pc, #24]	@ (800bfe4 <_isatty_r+0x1c>)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	602b      	str	r3, [r5, #0]
 800bfd4:	f7f5 f8d9 	bl	800118a <_isatty>
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	d102      	bne.n	800bfe2 <_isatty_r+0x1a>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	b103      	cbz	r3, 800bfe2 <_isatty_r+0x1a>
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
 800bfe4:	20000be8 	.word	0x20000be8

0800bfe8 <_init>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr

0800bff4 <_fini>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr
