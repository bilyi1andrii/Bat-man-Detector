
BatDetector2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800a394  0800a394  0000b394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b4  0800a5b4  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5bc  0800a5bc  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5bc  0800a5bc  0000b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a5c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000007c  0800a640  0000c07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800a640  0000cb28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017131  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000433d  00000000  00000000  000231dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00027520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  000287f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab1d  00000000  00000000  00029641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d45b  00000000  00000000  0004415e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a84a  00000000  00000000  000615b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  000fbe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00100e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a37c 	.word	0x0800a37c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	0800a37c 	.word	0x0800a37c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f000 fd95 	bl	8001058 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fb96 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f001 f893 	bl	8001674 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fb86 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000098 	.word	0x20000098
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 fc0b 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	@ 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	4b5b      	ldr	r3, [pc, #364]	@ (800077c <MX_GPIO_Init+0x188>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a5a      	ldr	r2, [pc, #360]	@ (800077c <MX_GPIO_Init+0x188>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b58      	ldr	r3, [pc, #352]	@ (800077c <MX_GPIO_Init+0x188>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	4b54      	ldr	r3, [pc, #336]	@ (800077c <MX_GPIO_Init+0x188>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a53      	ldr	r2, [pc, #332]	@ (800077c <MX_GPIO_Init+0x188>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b51      	ldr	r3, [pc, #324]	@ (800077c <MX_GPIO_Init+0x188>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b4d      	ldr	r3, [pc, #308]	@ (800077c <MX_GPIO_Init+0x188>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a4c      	ldr	r2, [pc, #304]	@ (800077c <MX_GPIO_Init+0x188>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b4a      	ldr	r3, [pc, #296]	@ (800077c <MX_GPIO_Init+0x188>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b46      	ldr	r3, [pc, #280]	@ (800077c <MX_GPIO_Init+0x188>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a45      	ldr	r2, [pc, #276]	@ (800077c <MX_GPIO_Init+0x188>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b43      	ldr	r3, [pc, #268]	@ (800077c <MX_GPIO_Init+0x188>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b3f      	ldr	r3, [pc, #252]	@ (800077c <MX_GPIO_Init+0x188>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a3e      	ldr	r2, [pc, #248]	@ (800077c <MX_GPIO_Init+0x188>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <MX_GPIO_Init+0x188>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b38      	ldr	r3, [pc, #224]	@ (800077c <MX_GPIO_Init+0x188>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a37      	ldr	r2, [pc, #220]	@ (800077c <MX_GPIO_Init+0x188>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b35      	ldr	r3, [pc, #212]	@ (800077c <MX_GPIO_Init+0x188>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4832      	ldr	r0, [pc, #200]	@ (8000780 <MX_GPIO_Init+0x18c>)
 80006b8:	f001 fe34 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4830      	ldr	r0, [pc, #192]	@ (8000784 <MX_GPIO_Init+0x190>)
 80006c2:	f001 fe2f 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 80006c6:	2200      	movs	r2, #0
 80006c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80006cc:	482e      	ldr	r0, [pc, #184]	@ (8000788 <MX_GPIO_Init+0x194>)
 80006ce:	f001 fe29 	bl	8002324 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80006d2:	2304      	movs	r3, #4
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4826      	ldr	r0, [pc, #152]	@ (8000780 <MX_GPIO_Init+0x18c>)
 80006e6:	f001 fb85 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006ea:	2308      	movs	r3, #8
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	481f      	ldr	r0, [pc, #124]	@ (8000780 <MX_GPIO_Init+0x18c>)
 8000702:	f001 fb77 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000706:	2332      	movs	r3, #50	@ 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800070a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4819      	ldr	r0, [pc, #100]	@ (8000780 <MX_GPIO_Init+0x18c>)
 800071c:	f001 fb6a 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4813      	ldr	r0, [pc, #76]	@ (8000784 <MX_GPIO_Init+0x190>)
 8000738:	f001 fb5c 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PD15
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 800073c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000740:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_GPIO_Init+0x194>)
 8000756:	f001 fb4d 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800075a:	2320      	movs	r3, #32
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_GPIO_Init+0x194>)
 800076e:	f001 fb41 	bl	8001df4 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00

0800078c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f003 ff17 	bl	80045fc <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 fa46 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	@ (800086c <HAL_I2C_MspInit+0x84>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12c      	bne.n	8000864 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000826:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	2312      	movs	r3, #18
 800082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000838:	2304      	movs	r3, #4
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	@ (8000874 <HAL_I2C_MspInit+0x8c>)
 8000844:	f001 fad6 	bl	8001df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000852:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400

08000878 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_I2S2_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800089e:	4a0c      	ldr	r2, [pc, #48]	@ (80008d0 <MX_I2S2_Init+0x58>)
 80008a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008b6:	f004 f869 	bl	800498c <HAL_I2S_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f9d0 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000134 	.word	0x20000134
 80008cc:	40003800 	.word	0x40003800
 80008d0:	00017700 	.word	0x00017700

080008d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008da:	4a14      	ldr	r2, [pc, #80]	@ (800092c <MX_I2S3_Init+0x58>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <MX_I2S3_Init+0x5c>)
 80008fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_I2S3_Init+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000914:	f004 f83a 	bl	800498c <HAL_I2S_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800091e:	f000 f9a1 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000017c 	.word	0x2000017c
 800092c:	40003c00 	.word	0x40003c00
 8000930:	00017700 	.word	0x00017700

08000934 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a59      	ldr	r2, [pc, #356]	@ (8000ab8 <HAL_I2S_MspInit+0x184>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d15b      	bne.n	8000a0e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	4b58      	ldr	r3, [pc, #352]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a57      	ldr	r2, [pc, #348]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b55      	ldr	r3, [pc, #340]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	4b51      	ldr	r3, [pc, #324]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a50      	ldr	r2, [pc, #320]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b4a      	ldr	r3, [pc, #296]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a49      	ldr	r2, [pc, #292]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b47      	ldr	r3, [pc, #284]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009ba:	2306      	movs	r3, #6
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 80009c6:	f001 fa15 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 80009e6:	f001 fa05 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fc:	2305      	movs	r3, #5
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <HAL_I2S_MspInit+0x190>)
 8000a08:	f001 f9f4 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a0c:	e04f      	b.n	8000aae <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <HAL_I2S_MspInit+0x194>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d14a      	bne.n	8000aae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a26      	ldr	r2, [pc, #152]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4811      	ldr	r0, [pc, #68]	@ (8000acc <HAL_I2S_MspInit+0x198>)
 8000a88:	f001 f9b4 	bl	8001df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a8c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 8000aaa:	f001 f9a3 	bl	8001df4 <HAL_GPIO_Init>
}
 8000aae:	bf00      	nop
 8000ab0:	3738      	adds	r7, #56	@ 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40003c00 	.word	0x40003c00
 8000acc:	40020000 	.word	0x40020000

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fa29 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f83b 	bl	8000b54 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ade:	f000 f8a1 	bl	8000c24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f7ff fd87 	bl	80005f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae6:	f7ff fe51 	bl	800078c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000aea:	f7ff fec5 	bl	8000878 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000aee:	f7ff fef1 	bl	80008d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000af2:	f000 f8c9 	bl	8000c88 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000af6:	f008 ffeb 	bl	8009ad0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000afa:	f7ff fce5 	bl	80004c8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000afe:	f009 f80d 	bl	8009b1c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_ADC_Start(&hadc1);
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <main+0x7c>)
 8000b04:	f000 fc06 	bl	8001314 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <main+0x7c>)
 8000b0e:	f000 fd19 	bl	8001544 <HAL_ADC_PollForConversion>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d114      	bne.n	8000b42 <main+0x72>
		uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <main+0x7c>)
 8000b1a:	f000 fd9e 	bl	800165a <HAL_ADC_GetValue>
 8000b1e:	6078      	str	r0, [r7, #4]

		if (adc_value > 1000) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b26:	d906      	bls.n	8000b36 <main+0x66>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <main+0x80>)
 8000b30:	f001 fbf8 	bl	8002324 <HAL_GPIO_WritePin>
 8000b34:	e005      	b.n	8000b42 <main+0x72>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <main+0x80>)
 8000b3e:	f001 fbf1 	bl	8002324 <HAL_GPIO_WritePin>
		}
	}

	HAL_ADC_Stop(&hadc1);
 8000b42:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <main+0x7c>)
 8000b44:	f000 fcbe 	bl	80014c4 <HAL_ADC_Stop>
    MX_USB_HOST_Process();
 8000b48:	e7d9      	b.n	8000afe <main+0x2e>
 8000b4a:	bf00      	nop
 8000b4c:	20000098 	.word	0x20000098
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f009 fb7c 	bl	800a260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bc8:	23c0      	movs	r3, #192	@ 0xc0
 8000bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fc35 	bl	8005448 <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be4:	f000 f83e 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2103      	movs	r1, #3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 ff4b 	bl	8005aa0 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c10:	f000 f828 	bl	8000c64 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	@ 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c3e:	23c8      	movs	r3, #200	@ 0xc8
 8000c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000c42:	2305      	movs	r3, #5
 8000c44:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 f9db 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c58:	f000 f804 	bl	8000c64 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <MX_SPI1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_SPI1_Init+0x64>)
 8000cda:	f005 fc0d 	bl	80064f8 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f7ff ffbe 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001c4 	.word	0x200001c4
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4e:	23e0      	movs	r3, #224	@ 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	f001 f843 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	@ 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	f000 ffa6 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 f8d1 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <OTG_FS_IRQHandler+0x10>)
 8000e3a:	f001 fd8b 	bl	8002954 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000600 	.word	0x20000600

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f009 fa0a 	bl	800a290 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20020000 	.word	0x20020000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	2000021c 	.word	0x2000021c
 8000eb0:	20000b28 	.word	0x20000b28

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f009 f9c9 	bl	800a29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fde1 	bl	8000ad0 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f1c:	0800a5c4 	.word	0x0800a5c4
  ldr r2, =_sbss
 8000f20:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f24:	20000b28 	.word	0x20000b28

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fedd 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff ff10 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 ff24 	bl	8001ddc <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fed2 	bl	8001d54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000220 	.word	0x20000220

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000220 	.word	0x20000220

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e14e      	b.n	800130c <HAL_ADC_Init+0x2b4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a90      	ldr	r2, [pc, #576]	@ (80012b4 <HAL_ADC_Init+0x25c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d004      	beq.n	8001082 <HAL_ADC_Init+0x2a>
 8001078:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800107c:	488e      	ldr	r0, [pc, #568]	@ (80012b8 <HAL_ADC_Init+0x260>)
 800107e:	f7ff fdf7 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d013      	beq.n	80010b2 <HAL_ADC_Init+0x5a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001092:	d00e      	beq.n	80010b2 <HAL_ADC_Init+0x5a>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800109c:	d009      	beq.n	80010b2 <HAL_ADC_Init+0x5a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x5a>
 80010a8:	f240 1143 	movw	r1, #323	@ 0x143
 80010ac:	4882      	ldr	r0, [pc, #520]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80010ae:	f7ff fddf 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <HAL_ADC_Init+0x8a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c2:	d00e      	beq.n	80010e2 <HAL_ADC_Init+0x8a>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80010cc:	d009      	beq.n	80010e2 <HAL_ADC_Init+0x8a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80010d6:	d004      	beq.n	80010e2 <HAL_ADC_Init+0x8a>
 80010d8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80010dc:	4876      	ldr	r0, [pc, #472]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80010de:	f7ff fdc7 	bl	8000c70 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <HAL_ADC_Init+0xa4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d004      	beq.n	80010fc <HAL_ADC_Init+0xa4>
 80010f2:	f240 1145 	movw	r1, #325	@ 0x145
 80010f6:	4870      	ldr	r0, [pc, #448]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80010f8:	f7ff fdba 	bl	8000c70 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e1b      	ldrb	r3, [r3, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_ADC_Init+0xbe>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7e1b      	ldrb	r3, [r3, #24]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d004      	beq.n	8001116 <HAL_ADC_Init+0xbe>
 800110c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8001110:	4869      	ldr	r0, [pc, #420]	@ (80012b8 <HAL_ADC_Init+0x260>)
 8001112:	f7ff fdad 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	2b00      	cmp	r3, #0
 800111c:	d054      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001126:	d04f      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001130:	d04a      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800113a:	d045      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001144:	d040      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800114e:	d03b      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001154:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001158:	d036      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115e:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8001162:	d031      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800116c:	d02c      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001172:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8001176:	d027      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8001180:	d022      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001186:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 800118a:	d01d      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8001194:	d018      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119a:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 800119e:	d013      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80011a8:	d00e      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80011b2:	d009      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	4a40      	ldr	r2, [pc, #256]	@ (80012bc <HAL_ADC_Init+0x264>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d004      	beq.n	80011c8 <HAL_ADC_Init+0x170>
 80011be:	f240 1147 	movw	r1, #327	@ 0x147
 80011c2:	483d      	ldr	r0, [pc, #244]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80011c4:	f7ff fd54 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <HAL_ADC_Init+0x18c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011d8:	d004      	beq.n	80011e4 <HAL_ADC_Init+0x18c>
 80011da:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80011de:	4836      	ldr	r0, [pc, #216]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80011e0:	f7ff fd46 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_ADC_Init+0x19c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d904      	bls.n	80011fe <HAL_ADC_Init+0x1a6>
 80011f4:	f240 1149 	movw	r1, #329	@ 0x149
 80011f8:	482f      	ldr	r0, [pc, #188]	@ (80012b8 <HAL_ADC_Init+0x260>)
 80011fa:	f7ff fd39 	bl	8000c70 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_ADC_Init+0x1c4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800120e:	2b01      	cmp	r3, #1
 8001210:	d004      	beq.n	800121c <HAL_ADC_Init+0x1c4>
 8001212:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001216:	4828      	ldr	r0, [pc, #160]	@ (80012b8 <HAL_ADC_Init+0x260>)
 8001218:	f7ff fd2a 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d00c      	beq.n	800123e <HAL_ADC_Init+0x1e6>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_ADC_Init+0x1e6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d004      	beq.n	800123e <HAL_ADC_Init+0x1e6>
 8001234:	f240 114b 	movw	r1, #331	@ 0x14b
 8001238:	481f      	ldr	r0, [pc, #124]	@ (80012b8 <HAL_ADC_Init+0x260>)
 800123a:	f7ff fd19 	bl	8000c70 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <HAL_ADC_Init+0x204>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d004      	beq.n	800125c <HAL_ADC_Init+0x204>
 8001252:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001256:	4818      	ldr	r0, [pc, #96]	@ (80012b8 <HAL_ADC_Init+0x260>)
 8001258:	f7ff fd0a 	bl	8000c70 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001260:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <HAL_ADC_Init+0x264>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d017      	beq.n	8001296 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <HAL_ADC_Init+0x23e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001276:	d00e      	beq.n	8001296 <HAL_ADC_Init+0x23e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001280:	d009      	beq.n	8001296 <HAL_ADC_Init+0x23e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Init+0x23e>
 800128c:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <HAL_ADC_Init+0x260>)
 8001292:	f7ff fced 	bl	8000c70 <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d110      	bne.n	80012c0 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff f964 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80012b2:	e005      	b.n	80012c0 <HAL_ADC_Init+0x268>
 80012b4:	40012000 	.word	0x40012000
 80012b8:	0800a394 	.word	0x0800a394
 80012bc:	0f000001 	.word	0x0f000001
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d118      	bne.n	80012fe <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fb3d 	bl	8001960 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	f023 0303 	bic.w	r3, r3, #3
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fc:	e001      	b.n	8001302 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_ADC_Start+0x26>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e1b      	ldrb	r3, [r3, #24]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d004      	beq.n	800133a <HAL_ADC_Start+0x26>
 8001330:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001334:	485e      	ldr	r0, [pc, #376]	@ (80014b0 <HAL_ADC_Start+0x19c>)
 8001336:	f7ff fc9b 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <HAL_ADC_Start+0x56>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800134a:	d00e      	beq.n	800136a <HAL_ADC_Start+0x56>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001354:	d009      	beq.n	800136a <HAL_ADC_Start+0x56>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800135e:	d004      	beq.n	800136a <HAL_ADC_Start+0x56>
 8001360:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8001364:	4852      	ldr	r0, [pc, #328]	@ (80014b0 <HAL_ADC_Start+0x19c>)
 8001366:	f7ff fc83 	bl	8000c70 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_ADC_Start+0x64>
 8001374:	2302      	movs	r3, #2
 8001376:	e097      	b.n	80014a8 <HAL_ADC_Start+0x194>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d018      	beq.n	80013c0 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800139e:	4b45      	ldr	r3, [pc, #276]	@ (80014b4 <HAL_ADC_Start+0x1a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a45      	ldr	r2, [pc, #276]	@ (80014b8 <HAL_ADC_Start+0x1a4>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9a      	lsrs	r2, r3, #18
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80013b2:	e002      	b.n	80013ba <HAL_ADC_Start+0xa6>
    {
      counter--;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f9      	bne.n	80013b4 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d15f      	bne.n	800148e <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800140c:	d106      	bne.n	800141c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	f023 0206 	bic.w	r2, r3, #6
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	@ 0x44
 800141a:	e002      	b.n	8001422 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_ADC_Start+0x1a8>)
 800142c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001436:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10f      	bne.n	8001464 <HAL_ADC_Start+0x150>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d129      	bne.n	80014a6 <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	e020      	b.n	80014a6 <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_ADC_Start+0x1ac>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11b      	bne.n	80014a6 <HAL_ADC_Start+0x192>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d114      	bne.n	80014a6 <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e00b      	b.n	80014a6 <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f043 0210 	orr.w	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800a394 	.word	0x0800a394
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	40012300 	.word	0x40012300
 80014c0:	40012000 	.word	0x40012000

080014c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1a      	ldr	r2, [pc, #104]	@ (800153c <HAL_ADC_Stop+0x78>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d004      	beq.n	80014e0 <HAL_ADC_Stop+0x1c>
 80014d6:	f240 314a 	movw	r1, #842	@ 0x34a
 80014da:	4819      	ldr	r0, [pc, #100]	@ (8001540 <HAL_ADC_Stop+0x7c>)
 80014dc:	f7ff fbc8 	bl	8000c70 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Stop+0x2a>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e021      	b.n	8001532 <HAL_ADC_Stop+0x6e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <HAL_ADC_Stop+0x64>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012000 	.word	0x40012000
 8001540:	0800a394 	.word	0x0800a394

08001544 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001560:	d113      	bne.n	800158a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800156c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001570:	d10b      	bne.n	800158a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f043 0220 	orr.w	r2, r3, #32
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e063      	b.n	8001652 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800158a:	f7ff fd35 	bl	8000ff8 <HAL_GetTick>
 800158e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001590:	e021      	b.n	80015d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d01d      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_ADC_PollForConversion+0x6c>
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d212      	bcs.n	80015d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d00b      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e03d      	b.n	8001652 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d1d6      	bne.n	8001592 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f06f 0212 	mvn.w	r2, #18
 80015ec:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d123      	bne.n	8001650 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160c:	2b00      	cmp	r3, #0
 800160e:	d11f      	bne.n	8001650 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001616:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001628:	2b00      	cmp	r3, #0
 800162a:	d111      	bne.n	8001650 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b12      	cmp	r3, #18
 8001688:	d909      	bls.n	800169e <HAL_ADC_ConfigChannel+0x2a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a72      	ldr	r2, [pc, #456]	@ (8001858 <HAL_ADC_ConfigChannel+0x1e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d004      	beq.n	800169e <HAL_ADC_ConfigChannel+0x2a>
 8001694:	f240 618b 	movw	r1, #1675	@ 0x68b
 8001698:	4870      	ldr	r0, [pc, #448]	@ (800185c <HAL_ADC_ConfigChannel+0x1e8>)
 800169a:	f7ff fae9 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_ADC_ConfigChannel+0x3a>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d904      	bls.n	80016b8 <HAL_ADC_ConfigChannel+0x44>
 80016ae:	f240 618c 	movw	r1, #1676	@ 0x68c
 80016b2:	486a      	ldr	r0, [pc, #424]	@ (800185c <HAL_ADC_ConfigChannel+0x1e8>)
 80016b4:	f7ff fadc 	bl	8000c70 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d01c      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d018      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d014      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d010      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d00c      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d008      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d004      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x8e>
 80016f8:	f240 618d 	movw	r1, #1677	@ 0x68d
 80016fc:	4857      	ldr	r0, [pc, #348]	@ (800185c <HAL_ADC_ConfigChannel+0x1e8>)
 80016fe:	f7ff fab7 	bl	8000c70 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x9c>
 800170c:	2302      	movs	r3, #2
 800170e:	e118      	b.n	8001942 <HAL_ADC_ConfigChannel+0x2ce>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d925      	bls.n	800176c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68d9      	ldr	r1, [r3, #12]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43da      	mvns	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	400a      	ands	r2, r1
 8001744:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68d9      	ldr	r1, [r3, #12]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	4603      	mov	r3, r0
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4403      	add	r3, r0
 800175e:	3b1e      	subs	r3, #30
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e022      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6919      	ldr	r1, [r3, #16]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	2207      	movs	r2, #7
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	400a      	ands	r2, r1
 800178e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4403      	add	r3, r0
 80017a8:	409a      	lsls	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d824      	bhi.n	8001804 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b05      	subs	r3, #5
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b05      	subs	r3, #5
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
 8001802:	e051      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d829      	bhi.n	8001860 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b23      	subs	r3, #35	@ 0x23
 800181e:	221f      	movs	r2, #31
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	400a      	ands	r2, r1
 800182c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b23      	subs	r3, #35	@ 0x23
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
 8001854:	e028      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x234>
 8001856:	bf00      	nop
 8001858:	10000012 	.word	0x10000012
 800185c:	0800a394 	.word	0x0800a394
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b41      	subs	r3, #65	@ 0x41
 8001872:	221f      	movs	r2, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b41      	subs	r3, #65	@ 0x41
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_ADC_ConfigChannel+0x2d8>)
 80018aa:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a27      	ldr	r2, [pc, #156]	@ (8001950 <HAL_ADC_ConfigChannel+0x2dc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10f      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x262>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d10b      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1d      	ldr	r2, [pc, #116]	@ (8001950 <HAL_ADC_ConfigChannel+0x2dc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d12b      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2c4>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_ADC_ConfigChannel+0x2e0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d003      	beq.n	80018f2 <HAL_ADC_ConfigChannel+0x27e>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d122      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <HAL_ADC_ConfigChannel+0x2e0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <HAL_ADC_ConfigChannel+0x2e4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_ADC_ConfigChannel+0x2e8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9a      	lsrs	r2, r3, #18
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800192a:	e002      	b.n	8001932 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	3b01      	subs	r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f9      	bne.n	800192c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40012300 	.word	0x40012300
 8001950:	40012000 	.word	0x40012000
 8001954:	10000012 	.word	0x10000012
 8001958:	20000000 	.word	0x20000000
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b7f      	ldr	r3, [pc, #508]	@ (8001b68 <ADC_Init+0x208>)
 800196a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	021a      	lsls	r2, r3, #8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b6c <ADC_Init+0x20c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e00f      	b.n	8001a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0202 	bic.w	r2, r2, #2
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
 8001a78:	005a      	lsls	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d028      	beq.n	8001ade <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <ADC_Init+0x13c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d904      	bls.n	8001aa6 <ADC_Init+0x146>
 8001a9c:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8001aa0:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <ADC_Init+0x210>)
 8001aa2:	f7ff f8e5 	bl	8000c70 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ab4:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ac4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	035a      	lsls	r2, r3, #13
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	e007      	b.n	8001aee <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aec:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	051a      	lsls	r2, r3, #20
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b30:	025a      	lsls	r2, r3, #9
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	029a      	lsls	r2, r3, #10
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	0f000001 	.word	0x0f000001
 8001b70:	0800a394 	.word	0x0800a394

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	d00f      	beq.n	8001d42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d00c      	beq.n	8001d42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d009      	beq.n	8001d42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d006      	beq.n	8001d42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d003      	beq.n	8001d42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d3a:	2190      	movs	r1, #144	@ 0x90
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d3e:	f7fe ff97 	bl	8000c70 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff16 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800a3cc 	.word	0x0800a3cc

08001d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d903      	bls.n	8001d74 <HAL_NVIC_SetPriority+0x20>
 8001d6c:	21a8      	movs	r1, #168	@ 0xa8
 8001d6e:	480e      	ldr	r0, [pc, #56]	@ (8001da8 <HAL_NVIC_SetPriority+0x54>)
 8001d70:	f7fe ff7e 	bl	8000c70 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d903      	bls.n	8001d82 <HAL_NVIC_SetPriority+0x2e>
 8001d7a:	21a9      	movs	r1, #169	@ 0xa9
 8001d7c:	480a      	ldr	r0, [pc, #40]	@ (8001da8 <HAL_NVIC_SetPriority+0x54>)
 8001d7e:	f7fe ff77 	bl	8000c70 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d82:	f7ff ff1b 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f7ff ff6b 	bl	8001c68 <NVIC_EncodePriority>
 8001d92:	4602      	mov	r2, r0
 8001d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff3a 	bl	8001c14 <__NVIC_SetPriority>
}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	0800a3cc 	.word	0x0800a3cc

08001dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da03      	bge.n	8001dc6 <HAL_NVIC_EnableIRQ+0x1a>
 8001dbe:	21bc      	movs	r1, #188	@ 0xbc
 8001dc0:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <HAL_NVIC_EnableIRQ+0x2c>)
 8001dc2:	f7fe ff55 	bl	8000c70 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff04 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0800a3cc 	.word	0x0800a3cc

08001ddc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff73 	bl	8001cd0 <SysTick_Config>
 8001dea:	4603      	mov	r3, r0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ed8 <HAL_GPIO_Init+0xe4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d017      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a31      	ldr	r2, [pc, #196]	@ (8001edc <HAL_GPIO_Init+0xe8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <HAL_GPIO_Init+0xec>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00f      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee4 <HAL_GPIO_Init+0xf0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00b      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee8 <HAL_GPIO_Init+0xf4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2d      	ldr	r2, [pc, #180]	@ (8001eec <HAL_GPIO_Init+0xf8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x4e>
 8001e3a:	21ac      	movs	r1, #172	@ 0xac
 8001e3c:	482c      	ldr	r0, [pc, #176]	@ (8001ef0 <HAL_GPIO_Init+0xfc>)
 8001e3e:	f7fe ff17 	bl	8000c70 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_GPIO_Init+0x62>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e54:	d303      	bcc.n	8001e5e <HAL_GPIO_Init+0x6a>
 8001e56:	21ad      	movs	r1, #173	@ 0xad
 8001e58:	4825      	ldr	r0, [pc, #148]	@ (8001ef0 <HAL_GPIO_Init+0xfc>)
 8001e5a:	f7fe ff09 	bl	8000c70 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d035      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d031      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b11      	cmp	r3, #17
 8001e74:	d02d      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d029      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001e8e:	d020      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001e98:	d01b      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001ea2:	d016      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001eac:	d011      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
 8001eca:	21ae      	movs	r1, #174	@ 0xae
 8001ecc:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <HAL_GPIO_Init+0xfc>)
 8001ece:	f7fe fecf 	bl	8000c70 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e20b      	b.n	80022f0 <HAL_GPIO_Init+0x4fc>
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40021c00 	.word	0x40021c00
 8001ef0:	0800a408 	.word	0x0800a408
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 81ec 	bne.w	80022ea <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d144      	bne.n	8001fb4 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00f      	beq.n	8001f52 <HAL_GPIO_Init+0x15e>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00b      	beq.n	8001f52 <HAL_GPIO_Init+0x15e>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x15e>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x15e>
 8001f4a:	21c0      	movs	r1, #192	@ 0xc0
 8001f4c:	4884      	ldr	r0, [pc, #528]	@ (8002160 <HAL_GPIO_Init+0x36c>)
 8001f4e:	f7fe fe8f 	bl	8000c70 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d027      	beq.n	8002010 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fd8:	21d1      	movs	r1, #209	@ 0xd1
 8001fda:	4861      	ldr	r0, [pc, #388]	@ (8002160 <HAL_GPIO_Init+0x36c>)
 8001fdc:	f7fe fe48 	bl	8000c70 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b02      	cmp	r3, #2
 800201a:	f040 80a3 	bne.w	8002164 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d077      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b09      	cmp	r3, #9
 800202c:	d073      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d06f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d06b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d067      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d05f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d05b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d057      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d053      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d04f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d04b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b04      	cmp	r3, #4
 8002084:	d047      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b04      	cmp	r3, #4
 800208c:	d043      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d03f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d03b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d037      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d033      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d02f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d027      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d023      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d01b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d017      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d00f      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	d00b      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x322>
 800210e:	21de      	movs	r1, #222	@ 0xde
 8002110:	4813      	ldr	r0, [pc, #76]	@ (8002160 <HAL_GPIO_Init+0x36c>)
 8002112:	f7fe fdad 	bl	8000c70 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800215e:	e001      	b.n	8002164 <HAL_GPIO_Init+0x370>
 8002160:	0800a408 	.word	0x0800a408
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a2 	beq.w	80022ea <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b56      	ldr	r3, [pc, #344]	@ (8002304 <HAL_GPIO_Init+0x510>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	4a55      	ldr	r2, [pc, #340]	@ (8002304 <HAL_GPIO_Init+0x510>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b6:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_GPIO_Init+0x510>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c2:	4a51      	ldr	r2, [pc, #324]	@ (8002308 <HAL_GPIO_Init+0x514>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a48      	ldr	r2, [pc, #288]	@ (800230c <HAL_GPIO_Init+0x518>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x42e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a47      	ldr	r2, [pc, #284]	@ (8002310 <HAL_GPIO_Init+0x51c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x42a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a46      	ldr	r2, [pc, #280]	@ (8002314 <HAL_GPIO_Init+0x520>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x426>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a45      	ldr	r2, [pc, #276]	@ (8002318 <HAL_GPIO_Init+0x524>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x422>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a44      	ldr	r2, [pc, #272]	@ (800231c <HAL_GPIO_Init+0x528>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x41e>
 800220e:	2304      	movs	r3, #4
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x430>
 8002212:	2307      	movs	r3, #7
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x430>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x430>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x430>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x430>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002234:	4934      	ldr	r1, [pc, #208]	@ (8002308 <HAL_GPIO_Init+0x514>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a2e      	ldr	r2, [pc, #184]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002296:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ba:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <HAL_GPIO_Init+0x52c>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f adfe 	bls.w	8001ef4 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_GPIO_WritePin+0x20>
 800233a:	f240 119d 	movw	r1, #413	@ 0x19d
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <HAL_GPIO_WritePin+0x54>)
 8002340:	f7fe fc96 	bl	8000c70 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_GPIO_WritePin+0x36>
 800234a:	787b      	ldrb	r3, [r7, #1]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d004      	beq.n	800235a <HAL_GPIO_WritePin+0x36>
 8002350:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002354:	4808      	ldr	r0, [pc, #32]	@ (8002378 <HAL_GPIO_WritePin+0x54>)
 8002356:	f7fe fc8b 	bl	8000c70 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002366:	e003      	b.n	8002370 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	041a      	lsls	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	0800a408 	.word	0x0800a408

0800237c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e062      	b.n	8002454 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002396:	d003      	beq.n	80023a0 <HAL_HCD_Init+0x24>
 8002398:	217b      	movs	r1, #123	@ 0x7b
 800239a:	4830      	ldr	r0, [pc, #192]	@ (800245c <HAL_HCD_Init+0xe0>)
 800239c:	f7fe fc68 	bl	8000c70 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f007 fbe6 	bl	8009b8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2203      	movs	r2, #3
 80023c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ce:	d102      	bne.n	80023d6 <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 fa9d 	bl	800691a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c1a      	ldrb	r2, [r3, #16]
 80023e8:	f88d 2000 	strb.w	r2, [sp]
 80023ec:	3304      	adds	r3, #4
 80023ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f0:	f004 fa1e 	bl	8006830 <USB_CoreInit>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e026      	b.n	8002454 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f004 fa95 	bl	800693c <USB_SetCurrentMode>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e017      	b.n	8002454 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7c1a      	ldrb	r2, [r3, #16]
 800242c:	f88d 2000 	strb.w	r2, [sp]
 8002430:	3304      	adds	r3, #4
 8002432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002434:	f004 fc38 	bl	8006ca8 <USB_HostInit>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e004      	b.n	8002454 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	0800a444 	.word	0x0800a444

08002460 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b08b      	sub	sp, #44	@ 0x2c
 8002464:	af04      	add	r7, sp, #16
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	70fb      	strb	r3, [r7, #3]
 8002472:	460b      	mov	r3, r1
 8002474:	70bb      	strb	r3, [r7, #2]
 8002476:	4613      	mov	r3, r2
 8002478:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800247a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800247c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_HCD_HC_Init+0x2c>
 8002488:	2302      	movs	r3, #2
 800248a:	e09d      	b.n	80025c8 <HAL_HCD_HC_Init+0x168>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3319      	adds	r3, #25
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3314      	adds	r3, #20
 80024b8:	787a      	ldrb	r2, [r7, #1]
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3315      	adds	r3, #21
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3326      	adds	r3, #38	@ 0x26
 80024e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	78bb      	ldrb	r3, [r7, #2]
 80024ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ee:	b2d8      	uxtb	r0, r3
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3316      	adds	r3, #22
 80024fe:	4602      	mov	r2, r0
 8002500:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fbc8 	bl	8002c9c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800250c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002510:	2b00      	cmp	r3, #0
 8002512:	da0a      	bge.n	800252a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3317      	adds	r3, #23
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e009      	b.n	800253e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3317      	adds	r3, #23
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f004 fcfe 	bl	8006f44 <USB_GetHostSpeed>
 8002548:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800254a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10b      	bne.n	800256a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002552:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_HCD_HC_Init+0x10a>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2bbc      	cmp	r3, #188	@ 0xbc
 8002564:	d901      	bls.n	800256a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002566:	23bc      	movs	r3, #188	@ 0xbc
 8002568:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3318      	adds	r3, #24
 800257a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800257e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	b298      	uxth	r0, r3
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3328      	adds	r3, #40	@ 0x28
 8002594:	4602      	mov	r2, r0
 8002596:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	787c      	ldrb	r4, [r7, #1]
 80025a2:	78ba      	ldrb	r2, [r7, #2]
 80025a4:	78f9      	ldrb	r1, [r7, #3]
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4623      	mov	r3, r4
 80025b6:	f004 fced 	bl	8006f94 <USB_HC_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_HCD_HC_Halt+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e00f      	b.n	800260e <HAL_HCD_HC_Halt+0x3e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f005 f833 	bl	800766a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	70fb      	strb	r3, [r7, #3]
 800262a:	460b      	mov	r3, r1
 800262c:	70bb      	strb	r3, [r7, #2]
 800262e:	4613      	mov	r3, r2
 8002630:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3317      	adds	r3, #23
 8002642:	78ba      	ldrb	r2, [r7, #2]
 8002644:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3326      	adds	r3, #38	@ 0x26
 8002656:	787a      	ldrb	r2, [r7, #1]
 8002658:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800265a:	7c3b      	ldrb	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d114      	bne.n	800268a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	332a      	adds	r3, #42	@ 0x2a
 8002670:	2203      	movs	r2, #3
 8002672:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3319      	adds	r3, #25
 8002684:	7f3a      	ldrb	r2, [r7, #28]
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e009      	b.n	800269e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	332a      	adds	r3, #42	@ 0x2a
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800269e:	787b      	ldrb	r3, [r7, #1]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	f200 8102 	bhi.w	80028aa <HAL_HCD_HC_SubmitRequest+0x292>
 80026a6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	08002895 	.word	0x08002895
 80026b4:	08002781 	.word	0x08002781
 80026b8:	0800280b 	.word	0x0800280b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80026bc:	7c3b      	ldrb	r3, [r7, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 80f5 	bne.w	80028ae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80026c4:	78bb      	ldrb	r3, [r7, #2]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d12d      	bne.n	8002726 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80026ca:	8b3b      	ldrh	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	333d      	adds	r3, #61	@ 0x3d
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	333d      	adds	r3, #61	@ 0x3d
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	332a      	adds	r3, #42	@ 0x2a
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800270e:	e0ce      	b.n	80028ae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	332a      	adds	r3, #42	@ 0x2a
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
      break;
 8002724:	e0c3      	b.n	80028ae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	331a      	adds	r3, #26
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 80b8 	bne.w	80028ae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	333c      	adds	r3, #60	@ 0x3c
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	332a      	adds	r3, #42	@ 0x2a
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
      break;
 8002768:	e0a1      	b.n	80028ae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	332a      	adds	r3, #42	@ 0x2a
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
      break;
 800277e:	e096      	b.n	80028ae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d120      	bne.n	80027c8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	333d      	adds	r3, #61	@ 0x3d
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	332a      	adds	r3, #42	@ 0x2a
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027b0:	e07e      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	332a      	adds	r3, #42	@ 0x2a
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
      break;
 80027c6:	e073      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	333c      	adds	r3, #60	@ 0x3c
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	332a      	adds	r3, #42	@ 0x2a
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
      break;
 80027f2:	e05d      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	332a      	adds	r3, #42	@ 0x2a
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
      break;
 8002808:	e052      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800280a:	78bb      	ldrb	r3, [r7, #2]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d120      	bne.n	8002852 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	333d      	adds	r3, #61	@ 0x3d
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	332a      	adds	r3, #42	@ 0x2a
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800283a:	e039      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	332a      	adds	r3, #42	@ 0x2a
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
      break;
 8002850:	e02e      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	333c      	adds	r3, #60	@ 0x3c
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	332a      	adds	r3, #42	@ 0x2a
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
      break;
 800287c:	e018      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	332a      	adds	r3, #42	@ 0x2a
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
      break;
 8002892:	e00d      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	332a      	adds	r3, #42	@ 0x2a
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80028ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	332c      	adds	r3, #44	@ 0x2c
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	8b39      	ldrh	r1, [r7, #24]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4403      	add	r3, r0
 80028d4:	3334      	adds	r3, #52	@ 0x34
 80028d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334c      	adds	r3, #76	@ 0x4c
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3338      	adds	r3, #56	@ 0x38
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3315      	adds	r3, #21
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	3310      	adds	r3, #16
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	1d19      	adds	r1, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	f004 fc3c 	bl	80071c0 <USB_HC_StartXfer>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 f95c 	bl	8006c28 <USB_GetMode>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 80fb 	bne.w	8002b6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f91f 	bl	8006bc0 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80f1 	beq.w	8002b6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f004 f916 	bl	8006bc0 <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800299a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800299e:	d104      	bne.n	80029aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 f906 	bl	8006bc0 <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029be:	d104      	bne.n	80029ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f8f6 	bl	8006bc0 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029de:	d104      	bne.n	80029ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 f8e6 	bl	8006bc0 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2202      	movs	r2, #2
 8002a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f8d8 	bl	8006bc0 <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a1a:	d120      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d113      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a36:	2110      	movs	r1, #16
 8002a38:	6938      	ldr	r0, [r7, #16]
 8002a3a:	f003 ffcb 	bl	80069d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a3e:	6938      	ldr	r0, [r7, #16]
 8002a40:	f003 fffa 	bl	8006a38 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7a5b      	ldrb	r3, [r3, #9]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d105      	bne.n	8002a58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 f9d6 	bl	8006e04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f007 f915 	bl	8009c88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f8ac 	bl	8006bc0 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a72:	d102      	bne.n	8002a7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 fd4d 	bl	8004514 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f89e 	bl	8006bc0 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d106      	bne.n	8002a9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f007 f8de 	bl	8009c50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 f88d 	bl	8006bc0 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ab0:	d139      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fdc6 	bl	8007648 <USB_HC_ReadInterrupt>
 8002abc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e025      	b.n	8002b10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d018      	beq.n	8002b0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aee:	d106      	bne.n	8002afe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f905 	bl	8002d06 <HCD_HC_IN_IRQHandler>
 8002afc:	e005      	b.n	8002b0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 ff67 	bl	80039d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	795b      	ldrb	r3, [r3, #5]
 8002b14:	461a      	mov	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d3d3      	bcc.n	8002ac4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f848 	bl	8006bc0 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d101      	bne.n	8002b3e <HAL_HCD_IRQHandler+0x1ea>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_HCD_IRQHandler+0x1ec>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d014      	beq.n	8002b6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f001 fbfe 	bl	8004356 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0210 	orr.w	r2, r2, #16
 8002b68:	619a      	str	r2, [r3, #24]
 8002b6a:	e000      	b.n	8002b6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b6c:	bf00      	nop
    }
  }
}
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_HCD_Start+0x16>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e013      	b.n	8002bb2 <HAL_HCD_Start+0x3e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f99a 	bl	8006ed2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fea8 	bl	80068f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_HCD_Stop+0x16>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e00d      	b.n	8002bec <HAL_HCD_Stop+0x32>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 fe64 	bl	80078aa <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 f93c 	bl	8006e7e <USB_ResetPort>
 8002c06:	4603      	mov	r3, r0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	334c      	adds	r3, #76	@ 0x4c
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3338      	adds	r3, #56	@ 0x38
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 f97e 	bl	8006f72 <USB_GetCurrentFrame>
 8002c76:	4603      	mov	r3, r0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f959 	bl	8006f44 <USB_GetHostSpeed>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	331a      	adds	r3, #26
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331b      	adds	r3, #27
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3325      	adds	r3, #37	@ 0x25
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3324      	adds	r3, #36	@ 0x24
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 ff5e 	bl	8006be6 <USB_ReadChInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11a      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2304      	movs	r3, #4
 8002d44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	334d      	adds	r3, #77	@ 0x4d
 8002d56:	2207      	movs	r2, #7
 8002d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fc81 	bl	800766a <USB_HC_Halt>
 8002d68:	e09e      	b.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 ff37 	bl	8006be6 <USB_ReadChInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d82:	d11b      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334d      	adds	r3, #77	@ 0x4d
 8002da8:	2208      	movs	r2, #8
 8002daa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fc58 	bl	800766a <USB_HC_Halt>
 8002dba:	e075      	b.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 ff0e 	bl	8006be6 <USB_ReadChInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11a      	bne.n	8002e0a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2308      	movs	r3, #8
 8002de4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	334d      	adds	r3, #77	@ 0x4d
 8002df6:	2206      	movs	r2, #6
 8002df8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fc31 	bl	800766a <USB_HC_Halt>
 8002e08:	e04e      	b.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fee7 	bl	8006be6 <USB_ReadChInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e22:	d11b      	bne.n	8002e5c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2209      	movs	r2, #9
 8002e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 fc08 	bl	800766a <USB_HC_Halt>
 8002e5a:	e025      	b.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 febe 	bl	8006be6 <USB_ReadChInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b80      	cmp	r3, #128	@ 0x80
 8002e72:	d119      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334d      	adds	r3, #77	@ 0x4d
 8002e96:	2207      	movs	r2, #7
 8002e98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 fbe1 	bl	800766a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fe98 	bl	8006be6 <USB_ReadChInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d112      	bne.n	8002ee8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 fbcd 	bl	800766a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	f000 bd75 	b.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fe78 	bl	8006be6 <USB_ReadChInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 8128 	bne.w	8003152 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2320      	movs	r3, #32
 8002f12:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	331b      	adds	r3, #27
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d119      	bne.n	8002f5e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	331b      	adds	r3, #27
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	0151      	lsls	r1, r2, #5
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	440a      	add	r2, r1
 8002f54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	799b      	ldrb	r3, [r3, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01b      	beq.n	8002f9e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3330      	adds	r3, #48	@ 0x30
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	1ac9      	subs	r1, r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	3338      	adds	r3, #56	@ 0x38
 8002f9c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334d      	adds	r3, #77	@ 0x4d
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	@ 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3326      	adds	r3, #38	@ 0x26
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3326      	adds	r3, #38	@ 0x26
 8002ffe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003000:	2b02      	cmp	r3, #2
 8003002:	d110      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f004 fb2c 	bl	800766a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2310      	movs	r3, #16
 8003022:	6093      	str	r3, [r2, #8]
 8003024:	e03d      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3326      	adds	r3, #38	@ 0x26
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d00a      	beq.n	8003052 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3326      	adds	r3, #38	@ 0x26
 800304c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800304e:	2b01      	cmp	r3, #1
 8003050:	d127      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800306c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003070:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	@ 0x4c
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334c      	adds	r3, #76	@ 0x4c
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f006 fe01 	bl	8009ca4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	799b      	ldrb	r3, [r3, #6]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d13b      	bne.n	8003122 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3338      	adds	r3, #56	@ 0x38
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	3328      	adds	r3, #40	@ 0x28
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	440b      	add	r3, r1
 80030d0:	1e59      	subs	r1, r3, #1
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	3328      	adds	r3, #40	@ 0x28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8470 	beq.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333c      	adds	r3, #60	@ 0x3c
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2d8      	uxtb	r0, r3
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	333c      	adds	r3, #60	@ 0x3c
 800311a:	4602      	mov	r2, r0
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	f000 bc58 	b.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	333c      	adds	r3, #60	@ 0x3c
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	333c      	adds	r3, #60	@ 0x3c
 800314a:	4602      	mov	r2, r0
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	f000 bc40 	b.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fd43 	bl	8006be6 <USB_ReadChInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d131      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	2320      	movs	r3, #32
 800317a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	331a      	adds	r3, #26
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 841f 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	331b      	adds	r3, #27
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2203      	movs	r2, #3
 80031ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fa50 	bl	800766a <USB_HC_Halt>
 80031ca:	f000 bc02 	b.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fd05 	bl	8006be6 <USB_ReadChInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	f040 8305 	bne.w	80037f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f4:	461a      	mov	r2, r3
 80031f6:	2302      	movs	r3, #2
 80031f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334d      	adds	r3, #77	@ 0x4d
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d114      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	334d      	adds	r3, #77	@ 0x4d
 8003220:	2202      	movs	r2, #2
 8003222:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	334c      	adds	r3, #76	@ 0x4c
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e2cc      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	334d      	adds	r3, #77	@ 0x4d
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d114      	bne.n	800327a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334c      	adds	r3, #76	@ 0x4c
 8003274:	2205      	movs	r2, #5
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e2ac      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	@ 0x4d
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b07      	cmp	r3, #7
 800328e:	d00b      	beq.n	80032a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032a2:	2b09      	cmp	r3, #9
 80032a4:	f040 80a6 	bne.w	80033f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334d      	adds	r3, #77	@ 0x4d
 80032b8:	2202      	movs	r2, #2
 80032ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3344      	adds	r3, #68	@ 0x44
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4403      	add	r3, r0
 80032dc:	3344      	adds	r3, #68	@ 0x44
 80032de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3344      	adds	r3, #68	@ 0x44
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d943      	bls.n	800337e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	3344      	adds	r3, #68	@ 0x44
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	331a      	adds	r3, #26
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d123      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	331b      	adds	r3, #27
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	331c      	adds	r3, #28
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	0151      	lsls	r1, r2, #5
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	440a      	add	r2, r1
 800335e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003366:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334c      	adds	r3, #76	@ 0x4c
 8003378:	2204      	movs	r2, #4
 800337a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800337c:	e229      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334c      	adds	r3, #76	@ 0x4c
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3326      	adds	r3, #38	@ 0x26
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3326      	adds	r3, #38	@ 0x26
 80033b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	f040 8209 	bne.w	80037d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033f2:	e1ee      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b05      	cmp	r3, #5
 8003408:	f040 80c8 	bne.w	800359c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	331b      	adds	r3, #27
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 81ce 	bne.w	80037d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3326      	adds	r3, #38	@ 0x26
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d16b      	bne.n	8003526 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3348      	adds	r3, #72	@ 0x48
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	3348      	adds	r3, #72	@ 0x48
 8003470:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3348      	adds	r3, #72	@ 0x48
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d943      	bls.n	8003510 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3348      	adds	r3, #72	@ 0x48
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	331b      	adds	r3, #27
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3344      	adds	r3, #68	@ 0x44
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d809      	bhi.n	80034da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	331c      	adds	r3, #28
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	334c      	adds	r3, #76	@ 0x4c
 800350a:	2204      	movs	r2, #4
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e014      	b.n	800353a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334c      	adds	r3, #76	@ 0x4c
 8003520:	2202      	movs	r2, #2
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e009      	b.n	800353a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	334c      	adds	r3, #76	@ 0x4c
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3326      	adds	r3, #38	@ 0x26
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3326      	adds	r3, #38	@ 0x26
 8003560:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003562:	2b02      	cmp	r3, #2
 8003564:	f040 8136 	bne.w	80037d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003586:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e11b      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	@ 0x4d
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	f040 8081 	bne.w	80036b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334d      	adds	r3, #77	@ 0x4d
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	331b      	adds	r3, #27
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	f040 80fa 	bne.w	80037d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334c      	adds	r3, #76	@ 0x4c
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	0151      	lsls	r1, r2, #5
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	440a      	add	r2, r1
 800360a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800360e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003612:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	440a      	add	r2, r1
 800362a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800362e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003632:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	440a      	add	r2, r1
 800364a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3326      	adds	r3, #38	@ 0x26
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3326      	adds	r3, #38	@ 0x26
 800367a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800367c:	2b02      	cmp	r3, #2
 800367e:	f040 80a9 	bne.w	80037d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003698:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e08e      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d143      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2202      	movs	r2, #2
 80036de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334c      	adds	r3, #76	@ 0x4c
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3326      	adds	r3, #38	@ 0x26
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3326      	adds	r3, #38	@ 0x26
 800371a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371c:	2b02      	cmp	r3, #2
 800371e:	d159      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003736:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800373e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e03f      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334d      	adds	r3, #77	@ 0x4d
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d126      	bne.n	80037b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334d      	adds	r3, #77	@ 0x4d
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3344      	adds	r3, #68	@ 0x44
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4403      	add	r3, r0
 800379e:	3344      	adds	r3, #68	@ 0x44
 80037a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334c      	adds	r3, #76	@ 0x4c
 80037b2:	2204      	movs	r2, #4
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e00d      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	@ 0x4d
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f000 8100 	beq.w	80039d0 <HCD_HC_IN_IRQHandler+0xcca>
 80037d0:	e000      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	334c      	adds	r3, #76	@ 0x4c
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f006 fa5a 	bl	8009ca4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037f0:	e0ef      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 f9f3 	bl	8006be6 <USB_ReadChInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d12f      	bne.n	800386a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003816:	461a      	mov	r2, r3
 8003818:	2340      	movs	r3, #64	@ 0x40
 800381a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	2205      	movs	r2, #5
 800382e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331a      	adds	r3, #26
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3344      	adds	r3, #68	@ 0x44
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 ff01 	bl	800766a <USB_HC_Halt>
 8003868:	e0b3      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f003 f9b7 	bl	8006be6 <USB_ReadChInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	f040 80a7 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3326      	adds	r3, #38	@ 0x26
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d11b      	bne.n	80038d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	@ 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	334d      	adds	r3, #77	@ 0x4d
 80038be:	2204      	movs	r2, #4
 80038c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 fecd 	bl	800766a <USB_HC_Halt>
 80038d0:	e03f      	b.n	8003952 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3326      	adds	r3, #38	@ 0x26
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3326      	adds	r3, #38	@ 0x26
 80038f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d129      	bne.n	8003952 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3344      	adds	r3, #68	@ 0x44
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	799b      	ldrb	r3, [r3, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HCD_HC_IN_IRQHandler+0xc2a>
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	331b      	adds	r3, #27
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2204      	movs	r2, #4
 8003942:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f003 fe8c 	bl	800766a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	331b      	adds	r3, #27
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d129      	bne.n	80039bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	331b      	adds	r3, #27
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	440a      	add	r2, r1
 8003992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b6:	f043 0320 	orr.w	r3, r3, #32
 80039ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	461a      	mov	r2, r3
 80039ca:	2310      	movs	r3, #16
 80039cc:	6093      	str	r3, [r2, #8]
 80039ce:	e000      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80039d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f8f5 	bl	8006be6 <USB_ReadChInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d11b      	bne.n	8003a3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	2304      	movs	r3, #4
 8003a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	334d      	adds	r3, #77	@ 0x4d
 8003a28:	2207      	movs	r2, #7
 8003a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fe18 	bl	800766a <USB_HC_Halt>
 8003a3a:	f000 bc89 	b.w	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 f8cd 	bl	8006be6 <USB_ReadChInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	f040 8082 	bne.w	8003b5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2320      	movs	r3, #32
 8003a68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3319      	adds	r3, #25
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d124      	bne.n	8003aca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3319      	adds	r3, #25
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334c      	adds	r3, #76	@ 0x4c
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334d      	adds	r3, #77	@ 0x4d
 8003ab8:	2203      	movs	r2, #3
 8003aba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fdd0 	bl	800766a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	331a      	adds	r3, #26
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 8437 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x978>
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	331b      	adds	r3, #27
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 842b 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3326      	adds	r3, #38	@ 0x26
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d009      	beq.n	8003b24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	331b      	adds	r3, #27
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	334d      	adds	r3, #77	@ 0x4d
 8003b34:	2203      	movs	r2, #3
 8003b36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fd92 	bl	800766a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3344      	adds	r3, #68	@ 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e3f9      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 f83e 	bl	8006be6 <USB_ReadChInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b74:	d111      	bne.n	8003b9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b82:	461a      	mov	r2, r3
 8003b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 fd69 	bl	800766a <USB_HC_Halt>
 8003b98:	e3da      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 f81f 	bl	8006be6 <USB_ReadChInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d168      	bne.n	8003c84 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3344      	adds	r3, #68	@ 0x44
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f003 f809 	bl	8006be6 <USB_ReadChInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b40      	cmp	r3, #64	@ 0x40
 8003bdc:	d112      	bne.n	8003c04 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3319      	adds	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2340      	movs	r3, #64	@ 0x40
 8003c02:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	331b      	adds	r3, #27
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	331b      	adds	r3, #27
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 fcf4 	bl	800766a <USB_HC_Halt>
 8003c82:	e365      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 ffaa 	bl	8006be6 <USB_ReadChInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b40      	cmp	r3, #64	@ 0x40
 8003c9a:	d139      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	334d      	adds	r3, #77	@ 0x4d
 8003cac:	2205      	movs	r2, #5
 8003cae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	331a      	adds	r3, #26
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3319      	adds	r3, #25
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3344      	adds	r3, #68	@ 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fcb7 	bl	800766a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2340      	movs	r3, #64	@ 0x40
 8003d0c:	6093      	str	r3, [r2, #8]
 8003d0e:	e31f      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 ff64 	bl	8006be6 <USB_ReadChInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d11a      	bne.n	8003d5e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d34:	461a      	mov	r2, r3
 8003d36:	2308      	movs	r3, #8
 8003d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334d      	adds	r3, #77	@ 0x4d
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 fc87 	bl	800766a <USB_HC_Halt>
 8003d5c:	e2f8      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f002 ff3d 	bl	8006be6 <USB_ReadChInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d144      	bne.n	8003e00 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3344      	adds	r3, #68	@ 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	334d      	adds	r3, #77	@ 0x4d
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	3319      	adds	r3, #25
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d114      	bne.n	8003dde <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3319      	adds	r3, #25
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fc3f 	bl	800766a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	6093      	str	r3, [r2, #8]
 8003dfe:	e2a7      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 feec 	bl	8006be6 <USB_ReadChInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b80      	cmp	r3, #128	@ 0x80
 8003e16:	f040 8083 	bne.w	8003f20 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	799b      	ldrb	r3, [r3, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d111      	bne.n	8003e46 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334d      	adds	r3, #77	@ 0x4d
 8003e32:	2207      	movs	r2, #7
 8003e34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fc13 	bl	800766a <USB_HC_Halt>
 8003e44:	e062      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3344      	adds	r3, #68	@ 0x44
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1c59      	adds	r1, r3, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4403      	add	r3, r0
 8003e66:	3344      	adds	r3, #68	@ 0x44
 8003e68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3344      	adds	r3, #68	@ 0x44
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d922      	bls.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3344      	adds	r3, #68	@ 0x44
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334c      	adds	r3, #76	@ 0x4c
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	334c      	adds	r3, #76	@ 0x4c
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f005 fef0 	bl	8009ca4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ec4:	e022      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	334c      	adds	r3, #76	@ 0x4c
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ef0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	e217      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fe5c 	bl	8006be6 <USB_ReadChInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f38:	d11b      	bne.n	8003f72 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	2209      	movs	r2, #9
 8003f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fb87 	bl	800766a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	e1ee      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f002 fe33 	bl	8006be6 <USB_ReadChInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	f040 81df 	bne.w	800434a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	334d      	adds	r3, #77	@ 0x4d
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 8093 	bne.w	80040dc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334d      	adds	r3, #77	@ 0x4d
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	334c      	adds	r3, #76	@ 0x4c
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3326      	adds	r3, #38	@ 0x26
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d00b      	beq.n	800400c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3326      	adds	r3, #38	@ 0x26
 8004004:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004006:	2b03      	cmp	r3, #3
 8004008:	f040 8190 	bne.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	799b      	ldrb	r3, [r3, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d115      	bne.n	8004040 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	333d      	adds	r3, #61	@ 0x3d
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	f083 0301 	eor.w	r3, r3, #1
 800402c:	b2d8      	uxtb	r0, r3
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	333d      	adds	r3, #61	@ 0x3d
 800403c:	4602      	mov	r2, r0
 800403e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	799b      	ldrb	r3, [r3, #6]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8171 	bne.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3334      	adds	r3, #52	@ 0x34
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8165 	beq.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3334      	adds	r3, #52	@ 0x34
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	440b      	add	r3, r1
 8004088:	1e59      	subs	r1, r3, #1
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3328      	adds	r3, #40	@ 0x28
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 813f 	beq.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	333d      	adds	r3, #61	@ 0x3d
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	f083 0301 	eor.w	r3, r3, #1
 80040c6:	b2d8      	uxtb	r0, r3
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	333d      	adds	r3, #61	@ 0x3d
 80040d6:	4602      	mov	r2, r0
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e127      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	334d      	adds	r3, #77	@ 0x4d
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d120      	bne.n	8004134 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334d      	adds	r3, #77	@ 0x4d
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	331b      	adds	r3, #27
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	f040 8107 	bne.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334c      	adds	r3, #76	@ 0x4c
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e0fb      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	334d      	adds	r3, #77	@ 0x4d
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d13a      	bne.n	80041c0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334d      	adds	r3, #77	@ 0x4d
 800415a:	2202      	movs	r2, #2
 800415c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	334c      	adds	r3, #76	@ 0x4c
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	331b      	adds	r3, #27
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 80d1 	bne.w	800432c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	331b      	adds	r3, #27
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	e0b5      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	@ 0x4d
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d114      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334d      	adds	r3, #77	@ 0x4d
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334c      	adds	r3, #76	@ 0x4c
 80041fa:	2202      	movs	r2, #2
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e095      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334d      	adds	r3, #77	@ 0x4d
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d114      	bne.n	8004240 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	334d      	adds	r3, #77	@ 0x4d
 8004226:	2202      	movs	r2, #2
 8004228:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	334c      	adds	r3, #76	@ 0x4c
 800423a:	2205      	movs	r2, #5
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e075      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334d      	adds	r3, #77	@ 0x4d
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b07      	cmp	r3, #7
 8004254:	d00a      	beq.n	800426c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	334d      	adds	r3, #77	@ 0x4d
 8004266:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004268:	2b09      	cmp	r3, #9
 800426a:	d170      	bne.n	800434e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334d      	adds	r3, #77	@ 0x4d
 800427c:	2202      	movs	r2, #2
 800427e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	3344      	adds	r3, #68	@ 0x44
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	1c59      	adds	r1, r3, #1
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4403      	add	r3, r0
 80042a0:	3344      	adds	r3, #68	@ 0x44
 80042a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3344      	adds	r3, #68	@ 0x44
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d914      	bls.n	80042e4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3344      	adds	r3, #68	@ 0x44
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	2204      	movs	r2, #4
 80042e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042e2:	e022      	b.n	800432a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334c      	adds	r3, #76	@ 0x4c
 80042f4:	2202      	movs	r2, #2
 80042f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800430e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800432a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	334c      	adds	r3, #76	@ 0x4c
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f005 fcae 	bl	8009ca4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004348:	e002      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800434e:	bf00      	nop
  }
}
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b08a      	sub	sp, #40	@ 0x28
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	0c5b      	lsrs	r3, r3, #17
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d004      	beq.n	800439c <HCD_RXQLVL_IRQHandler+0x46>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b05      	cmp	r3, #5
 8004396:	f000 80b6 	beq.w	8004506 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800439a:	e0b7      	b.n	800450c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80b3 	beq.w	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	332c      	adds	r3, #44	@ 0x2c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80a7 	beq.w	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	3338      	adds	r3, #56	@ 0x38
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4403      	add	r3, r0
 80043e0:	3334      	adds	r3, #52	@ 0x34
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4299      	cmp	r1, r3
 80043e6:	f200 8083 	bhi.w	80044f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	332c      	adds	r3, #44	@ 0x2c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	b292      	uxth	r2, r2
 8004404:	4619      	mov	r1, r3
 8004406:	f002 fb83 	bl	8006b10 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	332c      	adds	r3, #44	@ 0x2c
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	18d1      	adds	r1, r2, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4403      	add	r3, r0
 800442e:	332c      	adds	r3, #44	@ 0x2c
 8004430:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3338      	adds	r3, #56	@ 0x38
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	18d1      	adds	r1, r2, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4403      	add	r3, r0
 8004456:	3338      	adds	r3, #56	@ 0x38
 8004458:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	0cdb      	lsrs	r3, r3, #19
 800446a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4293      	cmp	r3, r2
 8004488:	d13f      	bne.n	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03c      	beq.n	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	333c      	adds	r3, #60	@ 0x3c
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f083 0301 	eor.w	r3, r3, #1
 80044d8:	b2d8      	uxtb	r0, r3
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	333c      	adds	r3, #60	@ 0x3c
 80044ea:	4602      	mov	r2, r0
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e00c      	b.n	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	@ 0x4c
 8004500:	2204      	movs	r2, #4
 8004502:	701a      	strb	r2, [r3, #0]
      break;
 8004504:	e001      	b.n	800450a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800450a:	bf00      	nop
  }
}
 800450c:	bf00      	nop
 800450e:	3728      	adds	r7, #40	@ 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004540:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10b      	bne.n	8004564 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d102      	bne.n	800455c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f005 fb88 	bl	8009c6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b08      	cmp	r3, #8
 800456c:	d132      	bne.n	80045d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d126      	bne.n	80045ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7a5b      	ldrb	r3, [r3, #9]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d113      	bne.n	80045b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800458e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004592:	d106      	bne.n	80045a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f002 fc32 	bl	8006e04 <USB_InitFSLSPClkSel>
 80045a0:	e011      	b.n	80045c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 fc2b 	bl	8006e04 <USB_InitFSLSPClkSel>
 80045ae:	e00a      	b.n	80045c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	79db      	ldrb	r3, [r3, #7]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045be:	461a      	mov	r2, r3
 80045c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80045c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f005 fb7a 	bl	8009cc0 <HAL_HCD_PortEnabled_Callback>
 80045cc:	e002      	b.n	80045d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f005 fb84 	bl	8009cdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d103      	bne.n	80045e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045ec:	461a      	mov	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6013      	str	r3, [r2, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e1ba      	b.n	8004984 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a9d      	ldr	r2, [pc, #628]	@ (8004888 <HAL_I2C_Init+0x28c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_I2C_Init+0x3a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a9b      	ldr	r2, [pc, #620]	@ (800488c <HAL_I2C_Init+0x290>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_I2C_Init+0x3a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a9a      	ldr	r2, [pc, #616]	@ (8004890 <HAL_I2C_Init+0x294>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_I2C_Init+0x3a>
 800462c:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004630:	4898      	ldr	r0, [pc, #608]	@ (8004894 <HAL_I2C_Init+0x298>)
 8004632:	f7fc fb1d 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_I2C_Init+0x4c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a95      	ldr	r2, [pc, #596]	@ (8004898 <HAL_I2C_Init+0x29c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d904      	bls.n	8004652 <HAL_I2C_Init+0x56>
 8004648:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 800464c:	4891      	ldr	r0, [pc, #580]	@ (8004894 <HAL_I2C_Init+0x298>)
 800464e:	f7fc fb0f 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_I2C_Init+0x72>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004662:	d004      	beq.n	800466e <HAL_I2C_Init+0x72>
 8004664:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004668:	488a      	ldr	r0, [pc, #552]	@ (8004894 <HAL_I2C_Init+0x298>)
 800466a:	f7fc fb01 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004676:	d304      	bcc.n	8004682 <HAL_I2C_Init+0x86>
 8004678:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800467c:	4885      	ldr	r0, [pc, #532]	@ (8004894 <HAL_I2C_Init+0x298>)
 800467e:	f7fc faf7 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800468a:	d009      	beq.n	80046a0 <HAL_I2C_Init+0xa4>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004694:	d004      	beq.n	80046a0 <HAL_I2C_Init+0xa4>
 8004696:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800469a:	487e      	ldr	r0, [pc, #504]	@ (8004894 <HAL_I2C_Init+0x298>)
 800469c:	f7fc fae8 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_I2C_Init+0xbe>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d004      	beq.n	80046ba <HAL_I2C_Init+0xbe>
 80046b0:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 80046b4:	4877      	ldr	r0, [pc, #476]	@ (8004894 <HAL_I2C_Init+0x298>)
 80046b6:	f7fc fadb 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_I2C_Init+0xd4>
 80046c6:	f240 11cf 	movw	r1, #463	@ 0x1cf
 80046ca:	4872      	ldr	r0, [pc, #456]	@ (8004894 <HAL_I2C_Init+0x298>)
 80046cc:	f7fc fad0 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_I2C_Init+0xee>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d004      	beq.n	80046ea <HAL_I2C_Init+0xee>
 80046e0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80046e4:	486b      	ldr	r0, [pc, #428]	@ (8004894 <HAL_I2C_Init+0x298>)
 80046e6:	f7fc fac3 	bl	8000c70 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_I2C_Init+0x108>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d004      	beq.n	8004704 <HAL_I2C_Init+0x108>
 80046fa:	f240 11d1 	movw	r1, #465	@ 0x1d1
 80046fe:	4865      	ldr	r0, [pc, #404]	@ (8004894 <HAL_I2C_Init+0x298>)
 8004700:	f7fc fab6 	bl	8000c70 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fc f865 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2224      	movs	r2, #36	@ 0x24
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004744:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004754:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004756:	f001 fc43 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 800475a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a4e      	ldr	r2, [pc, #312]	@ (800489c <HAL_I2C_Init+0x2a0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d807      	bhi.n	8004776 <HAL_I2C_Init+0x17a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a4d      	ldr	r2, [pc, #308]	@ (80048a0 <HAL_I2C_Init+0x2a4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	bf94      	ite	ls
 800476e:	2301      	movls	r3, #1
 8004770:	2300      	movhi	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e006      	b.n	8004784 <HAL_I2C_Init+0x188>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a4a      	ldr	r2, [pc, #296]	@ (80048a4 <HAL_I2C_Init+0x2a8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	bf94      	ite	ls
 800477e:	2301      	movls	r3, #1
 8004780:	2300      	movhi	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0fb      	b.n	8004984 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a46      	ldr	r2, [pc, #280]	@ (80048a8 <HAL_I2C_Init+0x2ac>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	0c9b      	lsrs	r3, r3, #18
 8004796:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a38      	ldr	r2, [pc, #224]	@ (800489c <HAL_I2C_Init+0x2a0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d802      	bhi.n	80047c6 <HAL_I2C_Init+0x1ca>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3301      	adds	r3, #1
 80047c4:	e009      	b.n	80047da <HAL_I2C_Init+0x1de>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	4a36      	ldr	r2, [pc, #216]	@ (80048ac <HAL_I2C_Init+0x2b0>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	3301      	adds	r3, #1
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	430b      	orrs	r3, r1
 80047e0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047ec:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4929      	ldr	r1, [pc, #164]	@ (800489c <HAL_I2C_Init+0x2a0>)
 80047f6:	428b      	cmp	r3, r1
 80047f8:	d819      	bhi.n	800482e <HAL_I2C_Init+0x232>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e59      	subs	r1, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fbb1 f3f3 	udiv	r3, r1, r3
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800480e:	400b      	ands	r3, r1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_I2C_Init+0x22e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e59      	subs	r1, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	e065      	b.n	80048f6 <HAL_I2C_Init+0x2fa>
 800482a:	2304      	movs	r3, #4
 800482c:	e063      	b.n	80048f6 <HAL_I2C_Init+0x2fa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d111      	bne.n	800485a <HAL_I2C_Init+0x25e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1e58      	subs	r0, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	440b      	add	r3, r1
 8004844:	fbb0 f3f3 	udiv	r3, r0, r3
 8004848:	3301      	adds	r3, #1
 800484a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e012      	b.n	8004880 <HAL_I2C_Init+0x284>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e58      	subs	r0, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	0099      	lsls	r1, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_I2C_Init+0x2b4>
 8004884:	2301      	movs	r3, #1
 8004886:	e036      	b.n	80048f6 <HAL_I2C_Init+0x2fa>
 8004888:	40005400 	.word	0x40005400
 800488c:	40005800 	.word	0x40005800
 8004890:	40005c00 	.word	0x40005c00
 8004894:	0800a47c 	.word	0x0800a47c
 8004898:	00061a80 	.word	0x00061a80
 800489c:	000186a0 	.word	0x000186a0
 80048a0:	001e847f 	.word	0x001e847f
 80048a4:	003d08ff 	.word	0x003d08ff
 80048a8:	431bde83 	.word	0x431bde83
 80048ac:	10624dd3 	.word	0x10624dd3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10e      	bne.n	80048d6 <HAL_I2C_Init+0x2da>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d4:	e00f      	b.n	80048f6 <HAL_I2C_Init+0x2fa>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1e58      	subs	r0, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6859      	ldr	r1, [r3, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	0099      	lsls	r1, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	6809      	ldr	r1, [r1, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004924:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6911      	ldr	r1, [r2, #16]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68d2      	ldr	r2, [r2, #12]
 8004930:	4311      	orrs	r1, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	430b      	orrs	r3, r1
 8004938:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1e7      	b.n	8004d6e <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a92      	ldr	r2, [pc, #584]	@ (8004bec <HAL_I2S_Init+0x260>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_I2S_Init+0x4e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a90      	ldr	r2, [pc, #576]	@ (8004bf0 <HAL_I2S_Init+0x264>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_I2S_Init+0x4e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a8f      	ldr	r2, [pc, #572]	@ (8004bf4 <HAL_I2S_Init+0x268>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_I2S_Init+0x4e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a8d      	ldr	r2, [pc, #564]	@ (8004bf8 <HAL_I2S_Init+0x26c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_I2S_Init+0x4e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a8c      	ldr	r2, [pc, #560]	@ (8004bfc <HAL_I2S_Init+0x270>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_I2S_Init+0x4e>
 80049d0:	f240 111b 	movw	r1, #283	@ 0x11b
 80049d4:	488a      	ldr	r0, [pc, #552]	@ (8004c00 <HAL_I2S_Init+0x274>)
 80049d6:	f7fc f94b 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <HAL_I2S_Init+0x7e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ea:	d00e      	beq.n	8004a0a <HAL_I2S_Init+0x7e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f4:	d009      	beq.n	8004a0a <HAL_I2S_Init+0x7e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049fe:	d004      	beq.n	8004a0a <HAL_I2S_Init+0x7e>
 8004a00:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004a04:	487e      	ldr	r0, [pc, #504]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004a06:	f7fc f933 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_I2S_Init+0xb0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d010      	beq.n	8004a3c <HAL_I2S_Init+0xb0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d00c      	beq.n	8004a3c <HAL_I2S_Init+0xb0>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b30      	cmp	r3, #48	@ 0x30
 8004a28:	d008      	beq.n	8004a3c <HAL_I2S_Init+0xb0>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a30:	d004      	beq.n	8004a3c <HAL_I2S_Init+0xb0>
 8004a32:	f240 111d 	movw	r1, #285	@ 0x11d
 8004a36:	4872      	ldr	r0, [pc, #456]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004a38:	f7fc f91a 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_I2S_Init+0xda>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d00c      	beq.n	8004a66 <HAL_I2S_Init+0xda>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d008      	beq.n	8004a66 <HAL_I2S_Init+0xda>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d004      	beq.n	8004a66 <HAL_I2S_Init+0xda>
 8004a5c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004a60:	4867      	ldr	r0, [pc, #412]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004a62:	f7fc f905 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6e:	d008      	beq.n	8004a82 <HAL_I2S_Init+0xf6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_I2S_Init+0xf6>
 8004a78:	f240 111f 	movw	r1, #287	@ 0x11f
 8004a7c:	4860      	ldr	r0, [pc, #384]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004a7e:	f7fc f8f7 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8004a8a:	d304      	bcc.n	8004a96 <HAL_I2S_Init+0x10a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	4a5c      	ldr	r2, [pc, #368]	@ (8004c04 <HAL_I2S_Init+0x278>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d908      	bls.n	8004aa8 <HAL_I2S_Init+0x11c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_I2S_Init+0x11c>
 8004a9e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004aa2:	4857      	ldr	r0, [pc, #348]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004aa4:	f7fc f8e4 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_I2S_Init+0x136>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d004      	beq.n	8004ac2 <HAL_I2S_Init+0x136>
 8004ab8:	f240 1121 	movw	r1, #289	@ 0x121
 8004abc:	4850      	ldr	r0, [pc, #320]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004abe:	f7fc f8d7 	bl	8000c70 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d008      	beq.n	8004adc <HAL_I2S_Init+0x150>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_I2S_Init+0x150>
 8004ad2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004ad6:	484a      	ldr	r0, [pc, #296]	@ (8004c00 <HAL_I2S_Init+0x274>)
 8004ad8:	f7fc f8ca 	bl	8000c70 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a45      	ldr	r2, [pc, #276]	@ (8004c08 <HAL_I2S_Init+0x27c>)
 8004af4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fb ff1c 	bl	8000934 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b12:	f023 030f 	bic.w	r3, r3, #15
 8004b16:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d073      	beq.n	8004c10 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b30:	2310      	movs	r3, #16
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e001      	b.n	8004b3a <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b36:	2320      	movs	r3, #32
 8004b38:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d802      	bhi.n	8004b48 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f001 fc73 	bl	8006434 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b4e:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b58:	d125      	bne.n	8004ba6 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	3305      	adds	r3, #5
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e01f      	b.n	8004bc4 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	3305      	adds	r3, #5
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e00e      	b.n	8004bc4 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	3305      	adds	r3, #5
 8004bc2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4a11      	ldr	r2, [pc, #68]	@ (8004c0c <HAL_I2S_Init+0x280>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	08db      	lsrs	r3, r3, #3
 8004bce:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	e016      	b.n	8004c18 <HAL_I2S_Init+0x28c>
 8004bea:	bf00      	nop
 8004bec:	40013000 	.word	0x40013000
 8004bf0:	40003800 	.word	0x40003800
 8004bf4:	40003c00 	.word	0x40003c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40015000 	.word	0x40015000
 8004c00:	0800a4b4 	.word	0x0800a4b4
 8004c04:	0002ee00 	.word	0x0002ee00
 8004c08:	08004e7f 	.word	0x08004e7f
 8004c0c:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c10:	2302      	movs	r3, #2
 8004c12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d902      	bls.n	8004c24 <HAL_I2S_Init+0x298>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2bff      	cmp	r3, #255	@ 0xff
 8004c22:	d907      	bls.n	8004c34 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c28:	f043 0210 	orr.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e09c      	b.n	8004d6e <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	ea42 0103 	orr.w	r1, r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c52:	f023 030f 	bic.w	r3, r3, #15
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6851      	ldr	r1, [r2, #4]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6892      	ldr	r2, [r2, #8]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68d2      	ldr	r2, [r2, #12]
 8004c64:	4311      	orrs	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6992      	ldr	r2, [r2, #24]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_I2S_Init+0x306>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d004      	beq.n	8004c92 <HAL_I2S_Init+0x306>
 8004c88:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004c8c:	483a      	ldr	r0, [pc, #232]	@ (8004d78 <HAL_I2S_Init+0x3ec>)
 8004c8e:	f7fb ffef 	bl	8000c70 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d161      	bne.n	8004d5e <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a37      	ldr	r2, [pc, #220]	@ (8004d7c <HAL_I2S_Init+0x3f0>)
 8004c9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a36      	ldr	r2, [pc, #216]	@ (8004d80 <HAL_I2S_Init+0x3f4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_I2S_Init+0x322>
 8004caa:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <HAL_I2S_Init+0x3f8>)
 8004cac:	e001      	b.n	8004cb2 <HAL_I2S_Init+0x326>
 8004cae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	4931      	ldr	r1, [pc, #196]	@ (8004d80 <HAL_I2S_Init+0x3f4>)
 8004cba:	428a      	cmp	r2, r1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2S_Init+0x336>
 8004cbe:	4a31      	ldr	r2, [pc, #196]	@ (8004d84 <HAL_I2S_Init+0x3f8>)
 8004cc0:	e001      	b.n	8004cc6 <HAL_I2S_Init+0x33a>
 8004cc2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004cc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004cca:	f023 030f 	bic.w	r3, r3, #15
 8004cce:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <HAL_I2S_Init+0x3f4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_I2S_Init+0x352>
 8004cda:	4b2a      	ldr	r3, [pc, #168]	@ (8004d84 <HAL_I2S_Init+0x3f8>)
 8004cdc:	e001      	b.n	8004ce2 <HAL_I2S_Init+0x356>
 8004cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a25      	ldr	r2, [pc, #148]	@ (8004d80 <HAL_I2S_Init+0x3f4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2S_Init+0x368>
 8004cf0:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_I2S_Init+0x3f8>)
 8004cf2:	e001      	b.n	8004cf8 <HAL_I2S_Init+0x36c>
 8004cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d04:	d003      	beq.n	8004d0e <HAL_I2S_Init+0x382>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e001      	b.n	8004d1a <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d46:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d80 <HAL_I2S_Init+0x3f4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_I2S_Init+0x3ca>
 8004d52:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <HAL_I2S_Init+0x3f8>)
 8004d54:	e001      	b.n	8004d5a <HAL_I2S_Init+0x3ce>
 8004d56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d5a:	897a      	ldrh	r2, [r7, #10]
 8004d5c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	0800a4b4 	.word	0x0800a4b4
 8004d7c:	08004f95 	.word	0x08004f95
 8004d80:	40003800 	.word	0x40003800
 8004d84:	40003400 	.word	0x40003400

08004d88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10e      	bne.n	8004e18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ffb8 	bl	8004d88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	b292      	uxth	r2, r2
 8004e34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10e      	bne.n	8004e76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff93 	bl	8004d9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d13a      	bne.n	8004f10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d109      	bne.n	8004eb8 <I2S_IRQHandler+0x3a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d102      	bne.n	8004eb8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ffb4 	bl	8004e20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d126      	bne.n	8004f10 <I2S_IRQHandler+0x92>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d11f      	bne.n	8004f10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ede:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	f043 0202 	orr.w	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ff50 	bl	8004db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d136      	bne.n	8004f8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d109      	bne.n	8004f3a <I2S_IRQHandler+0xbc>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b80      	cmp	r3, #128	@ 0x80
 8004f32:	d102      	bne.n	8004f3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff45 	bl	8004dc4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d122      	bne.n	8004f8a <I2S_IRQHandler+0x10c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d11b      	bne.n	8004f8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff13 	bl	8004db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a92      	ldr	r2, [pc, #584]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fae:	4b92      	ldr	r3, [pc, #584]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb0:	e001      	b.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a8b      	ldr	r2, [pc, #556]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fce:	e001      	b.n	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe0:	d004      	beq.n	8004fec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 8099 	bne.w	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d107      	bne.n	8005006 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f925 	bl	8005250 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9c8 	bl	80053b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005026:	2b40      	cmp	r3, #64	@ 0x40
 8005028:	d13a      	bne.n	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d035      	beq.n	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6e      	ldr	r2, [pc, #440]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800503e:	4b6e      	ldr	r3, [pc, #440]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005040:	e001      	b.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005042:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4969      	ldr	r1, [pc, #420]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504e:	428b      	cmp	r3, r1
 8005050:	d101      	bne.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005052:	4b69      	ldr	r3, [pc, #420]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005054:	e001      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800505a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800505e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800506e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe88 	bl	8004db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	f040 80c3 	bne.w	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80bd 	beq.w	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a49      	ldr	r2, [pc, #292]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050d2:	4b49      	ldr	r3, [pc, #292]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050d4:	e001      	b.n	80050da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4944      	ldr	r1, [pc, #272]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050e2:	428b      	cmp	r3, r1
 80050e4:	d101      	bne.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050e6:	4b44      	ldr	r3, [pc, #272]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e8:	e001      	b.n	80050ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050f4:	2300      	movs	r3, #0
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f043 0204 	orr.w	r2, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fe4a 	bl	8004db0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800511c:	e089      	b.n	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d107      	bne.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8be 	bl	80052b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d107      	bne.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8fd 	bl	800534c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	d12f      	bne.n	80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02a      	beq.n	80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005174:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005182:	e001      	b.n	8005188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4919      	ldr	r1, [pc, #100]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005190:	428b      	cmp	r3, r1
 8005192:	d101      	bne.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005194:	4b18      	ldr	r3, [pc, #96]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005196:	e001      	b.n	800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800519c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f043 0202 	orr.w	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fdfa 	bl	8004db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d136      	bne.n	8005234 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d031      	beq.n	8005234 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a07      	ldr	r2, [pc, #28]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051dc:	e001      	b.n	80051e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4902      	ldr	r1, [pc, #8]	@ (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051ea:	428b      	cmp	r3, r1
 80051ec:	d106      	bne.n	80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80051ee:	4b02      	ldr	r3, [pc, #8]	@ (80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051f0:	e006      	b.n	8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80051f2:	bf00      	nop
 80051f4:	40003800 	.word	0x40003800
 80051f8:	40003400 	.word	0x40003400
 80051fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005200:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005204:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005214:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	f043 0204 	orr.w	r2, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fdc0 	bl	8004db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005230:	e000      	b.n	8005234 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005232:	bf00      	nop
}
 8005234:	bf00      	nop
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	1c99      	adds	r1, r3, #2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6251      	str	r1, [r2, #36]	@ 0x24
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d113      	bne.n	80052aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005290:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ffc9 	bl	800523c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	1c99      	adds	r1, r3, #2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6251      	str	r1, [r2, #36]	@ 0x24
 80052c6:	8819      	ldrh	r1, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <I2SEx_TxISR_I2SExt+0x90>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <I2SEx_TxISR_I2SExt+0x22>
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <I2SEx_TxISR_I2SExt+0x94>)
 80052d4:	e001      	b.n	80052da <I2SEx_TxISR_I2SExt+0x26>
 80052d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052da:	460a      	mov	r2, r1
 80052dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d121      	bne.n	800533a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <I2SEx_TxISR_I2SExt+0x90>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <I2SEx_TxISR_I2SExt+0x50>
 8005300:	4b11      	ldr	r3, [pc, #68]	@ (8005348 <I2SEx_TxISR_I2SExt+0x94>)
 8005302:	e001      	b.n	8005308 <I2SEx_TxISR_I2SExt+0x54>
 8005304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	490d      	ldr	r1, [pc, #52]	@ (8005344 <I2SEx_TxISR_I2SExt+0x90>)
 8005310:	428b      	cmp	r3, r1
 8005312:	d101      	bne.n	8005318 <I2SEx_TxISR_I2SExt+0x64>
 8005314:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <I2SEx_TxISR_I2SExt+0x94>)
 8005316:	e001      	b.n	800531c <I2SEx_TxISR_I2SExt+0x68>
 8005318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800531c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005320:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff ff81 	bl	800523c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40003800 	.word	0x40003800
 8005348:	40003400 	.word	0x40003400

0800534c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68d8      	ldr	r0, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	1c99      	adds	r1, r3, #2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005364:	b282      	uxth	r2, r0
 8005366:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d113      	bne.n	80053a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800538e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff ff4a 	bl	800523c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a20      	ldr	r2, [pc, #128]	@ (8005440 <I2SEx_RxISR_I2SExt+0x90>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <I2SEx_RxISR_I2SExt+0x16>
 80053c2:	4b20      	ldr	r3, [pc, #128]	@ (8005444 <I2SEx_RxISR_I2SExt+0x94>)
 80053c4:	e001      	b.n	80053ca <I2SEx_RxISR_I2SExt+0x1a>
 80053c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ca:	68d8      	ldr	r0, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	1c99      	adds	r1, r3, #2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80053d6:	b282      	uxth	r2, r0
 80053d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d121      	bne.n	8005436 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <I2SEx_RxISR_I2SExt+0x90>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <I2SEx_RxISR_I2SExt+0x50>
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <I2SEx_RxISR_I2SExt+0x94>)
 80053fe:	e001      	b.n	8005404 <I2SEx_RxISR_I2SExt+0x54>
 8005400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	490d      	ldr	r1, [pc, #52]	@ (8005440 <I2SEx_RxISR_I2SExt+0x90>)
 800540c:	428b      	cmp	r3, r1
 800540e:	d101      	bne.n	8005414 <I2SEx_RxISR_I2SExt+0x64>
 8005410:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <I2SEx_RxISR_I2SExt+0x94>)
 8005412:	e001      	b.n	8005418 <I2SEx_RxISR_I2SExt+0x68>
 8005414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005418:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800541c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ff03 	bl	800523c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40003800 	.word	0x40003800
 8005444:	40003400 	.word	0x40003400

08005448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e318      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d903      	bls.n	800546a <HAL_RCC_OscConfig+0x22>
 8005462:	21e6      	movs	r1, #230	@ 0xe6
 8005464:	4897      	ldr	r0, [pc, #604]	@ (80056c4 <HAL_RCC_OscConfig+0x27c>)
 8005466:	f7fb fc03 	bl	8000c70 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8088 	beq.w	8005588 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <HAL_RCC_OscConfig+0x54>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005488:	d008      	beq.n	800549c <HAL_RCC_OscConfig+0x54>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005492:	d003      	beq.n	800549c <HAL_RCC_OscConfig+0x54>
 8005494:	21eb      	movs	r1, #235	@ 0xeb
 8005496:	488b      	ldr	r0, [pc, #556]	@ (80056c4 <HAL_RCC_OscConfig+0x27c>)
 8005498:	f7fb fbea 	bl	8000c70 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800549c:	4b8a      	ldr	r3, [pc, #552]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d00c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a8:	4b87      	ldr	r3, [pc, #540]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d112      	bne.n	80054da <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b4:	4b84      	ldr	r3, [pc, #528]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c0:	d10b      	bne.n	80054da <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c2:	4b81      	ldr	r3, [pc, #516]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d05b      	beq.n	8005586 <HAL_RCC_OscConfig+0x13e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d157      	bne.n	8005586 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e2d8      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0xaa>
 80054e4:	4b78      	ldr	r3, [pc, #480]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a77      	ldr	r2, [pc, #476]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e01d      	b.n	800552e <HAL_RCC_OscConfig+0xe6>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054fa:	d10c      	bne.n	8005516 <HAL_RCC_OscConfig+0xce>
 80054fc:	4b72      	ldr	r3, [pc, #456]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a71      	ldr	r2, [pc, #452]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b6f      	ldr	r3, [pc, #444]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a6e      	ldr	r2, [pc, #440]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e00b      	b.n	800552e <HAL_RCC_OscConfig+0xe6>
 8005516:	4b6c      	ldr	r3, [pc, #432]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6b      	ldr	r2, [pc, #428]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800551c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b69      	ldr	r3, [pc, #420]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a68      	ldr	r2, [pc, #416]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800552c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005536:	f7fb fd5f 	bl	8000ff8 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800553e:	f7fb fd5b 	bl	8000ff8 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	@ 0x64
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e29d      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005550:	4b5d      	ldr	r3, [pc, #372]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0xf6>
 800555c:	e014      	b.n	8005588 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555e:	f7fb fd4b 	bl	8000ff8 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005566:	f7fb fd47 	bl	8000ff8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b64      	cmp	r3, #100	@ 0x64
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e289      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f0      	bne.n	8005566 <HAL_RCC_OscConfig+0x11e>
 8005584:	e000      	b.n	8005588 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005586:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d079      	beq.n	8005688 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_OscConfig+0x166>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d004      	beq.n	80055ae <HAL_RCC_OscConfig+0x166>
 80055a4:	f240 111d 	movw	r1, #285	@ 0x11d
 80055a8:	4846      	ldr	r0, [pc, #280]	@ (80056c4 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f7fb fb61 	bl	8000c70 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b1f      	cmp	r3, #31
 80055b4:	d904      	bls.n	80055c0 <HAL_RCC_OscConfig+0x178>
 80055b6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80055ba:	4842      	ldr	r0, [pc, #264]	@ (80056c4 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	f7fb fb58 	bl	8000c70 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055c0:	4b41      	ldr	r3, [pc, #260]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055cc:	4b3e      	ldr	r3, [pc, #248]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d11c      	bne.n	8005612 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d8:	4b3b      	ldr	r3, [pc, #236]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d116      	bne.n	8005612 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e4:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_OscConfig+0x1b4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e247      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	492f      	ldr	r1, [pc, #188]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005610:	e03a      	b.n	8005688 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d020      	beq.n	800565c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800561a:	4b2c      	ldr	r3, [pc, #176]	@ (80056cc <HAL_RCC_OscConfig+0x284>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fb fcea 	bl	8000ff8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005628:	f7fb fce6 	bl	8000ff8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e228      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563a:	4b23      	ldr	r3, [pc, #140]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	491c      	ldr	r1, [pc, #112]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	e015      	b.n	8005688 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x284>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7fb fcc9 	bl	8000ff8 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800566a:	f7fb fcc5 	bl	8000ff8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e207      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567c:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <HAL_RCC_OscConfig+0x280>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d045      	beq.n	8005720 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCC_OscConfig+0x266>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d004      	beq.n	80056ae <HAL_RCC_OscConfig+0x266>
 80056a4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80056a8:	4806      	ldr	r0, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	f7fb fae1 	bl	8000c70 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01e      	beq.n	80056f4 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_RCC_OscConfig+0x288>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fb fc9c 	bl	8000ff8 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	e010      	b.n	80056e6 <HAL_RCC_OscConfig+0x29e>
 80056c4:	0800a4ec 	.word	0x0800a4ec
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470000 	.word	0x42470000
 80056d0:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d4:	f7fb fc90 	bl	8000ff8 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e1d2      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80056e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x28c>
 80056f2:	e015      	b.n	8005720 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005864 <HAL_RCC_OscConfig+0x41c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fa:	f7fb fc7d 	bl	8000ff8 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005702:	f7fb fc79 	bl	8000ff8 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e1bb      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	4b52      	ldr	r3, [pc, #328]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80b0 	beq.w	800588e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <HAL_RCC_OscConfig+0x30c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d008      	beq.n	8005754 <HAL_RCC_OscConfig+0x30c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b05      	cmp	r3, #5
 8005748:	d004      	beq.n	8005754 <HAL_RCC_OscConfig+0x30c>
 800574a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800574e:	4846      	ldr	r0, [pc, #280]	@ (8005868 <HAL_RCC_OscConfig+0x420>)
 8005750:	f7fb fa8e 	bl	8000c70 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005754:	4b42      	ldr	r3, [pc, #264]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10f      	bne.n	8005780 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	4b3e      	ldr	r3, [pc, #248]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	4a3d      	ldr	r2, [pc, #244]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 800576a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800576e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005770:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577c:	2301      	movs	r3, #1
 800577e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b3a      	ldr	r3, [pc, #232]	@ (800586c <HAL_RCC_OscConfig+0x424>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d118      	bne.n	80057be <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578c:	4b37      	ldr	r3, [pc, #220]	@ (800586c <HAL_RCC_OscConfig+0x424>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a36      	ldr	r2, [pc, #216]	@ (800586c <HAL_RCC_OscConfig+0x424>)
 8005792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005798:	f7fb fc2e 	bl	8000ff8 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a0:	f7fb fc2a 	bl	8000ff8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e16c      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b2:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <HAL_RCC_OscConfig+0x424>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d106      	bne.n	80057d4 <HAL_RCC_OscConfig+0x38c>
 80057c6:	4b26      	ldr	r3, [pc, #152]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ca:	4a25      	ldr	r2, [pc, #148]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d2:	e01c      	b.n	800580e <HAL_RCC_OscConfig+0x3c6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d10c      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3ae>
 80057dc:	4b20      	ldr	r3, [pc, #128]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f4:	e00b      	b.n	800580e <HAL_RCC_OscConfig+0x3c6>
 80057f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a19      	ldr	r2, [pc, #100]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6713      	str	r3, [r2, #112]	@ 0x70
 8005802:	4b17      	ldr	r3, [pc, #92]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	4a16      	ldr	r2, [pc, #88]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d015      	beq.n	8005842 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005816:	f7fb fbef 	bl	8000ff8 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581c:	e00a      	b.n	8005834 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fb fbeb 	bl	8000ff8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e12b      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <HAL_RCC_OscConfig+0x418>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ee      	beq.n	800581e <HAL_RCC_OscConfig+0x3d6>
 8005840:	e01c      	b.n	800587c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005842:	f7fb fbd9 	bl	8000ff8 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005848:	e012      	b.n	8005870 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fb fbd5 	bl	8000ff8 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005858:	4293      	cmp	r3, r2
 800585a:	d909      	bls.n	8005870 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e115      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
 8005860:	40023800 	.word	0x40023800
 8005864:	42470e80 	.word	0x42470e80
 8005868:	0800a4ec 	.word	0x0800a4ec
 800586c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005870:	4b88      	ldr	r3, [pc, #544]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005882:	4b84      	ldr	r3, [pc, #528]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	4a83      	ldr	r2, [pc, #524]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 8005888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x468>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d008      	beq.n	80058b0 <HAL_RCC_OscConfig+0x468>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d004      	beq.n	80058b0 <HAL_RCC_OscConfig+0x468>
 80058a6:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80058aa:	487b      	ldr	r0, [pc, #492]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 80058ac:	f7fb f9e0 	bl	8000c70 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80e8 	beq.w	8005a8a <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ba:	4b76      	ldr	r3, [pc, #472]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	f000 80a9 	beq.w	8005a1a <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f040 808d 	bne.w	80059ec <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_OscConfig+0x4a6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e2:	d004      	beq.n	80058ee <HAL_RCC_OscConfig+0x4a6>
 80058e4:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80058e8:	486b      	ldr	r0, [pc, #428]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 80058ea:	f7fb f9c1 	bl	8000c70 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d903      	bls.n	80058fe <HAL_RCC_OscConfig+0x4b6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80058fc:	d904      	bls.n	8005908 <HAL_RCC_OscConfig+0x4c0>
 80058fe:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005902:	4865      	ldr	r0, [pc, #404]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 8005904:	f7fb f9b4 	bl	8000c70 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	2b31      	cmp	r3, #49	@ 0x31
 800590e:	d904      	bls.n	800591a <HAL_RCC_OscConfig+0x4d2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005918:	d904      	bls.n	8005924 <HAL_RCC_OscConfig+0x4dc>
 800591a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800591e:	485e      	ldr	r0, [pc, #376]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 8005920:	f7fb f9a6 	bl	8000c70 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	2b02      	cmp	r3, #2
 800592a:	d010      	beq.n	800594e <HAL_RCC_OscConfig+0x506>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	2b04      	cmp	r3, #4
 8005932:	d00c      	beq.n	800594e <HAL_RCC_OscConfig+0x506>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	2b06      	cmp	r3, #6
 800593a:	d008      	beq.n	800594e <HAL_RCC_OscConfig+0x506>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	2b08      	cmp	r3, #8
 8005942:	d004      	beq.n	800594e <HAL_RCC_OscConfig+0x506>
 8005944:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8005948:	4853      	ldr	r0, [pc, #332]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 800594a:	f7fb f991 	bl	8000c70 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d903      	bls.n	800595e <HAL_RCC_OscConfig+0x516>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d904      	bls.n	8005968 <HAL_RCC_OscConfig+0x520>
 800595e:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8005962:	484d      	ldr	r0, [pc, #308]	@ (8005a98 <HAL_RCC_OscConfig+0x650>)
 8005964:	f7fb f984 	bl	8000c70 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b4c      	ldr	r3, [pc, #304]	@ (8005a9c <HAL_RCC_OscConfig+0x654>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596e:	f7fb fb43 	bl	8000ff8 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005976:	f7fb fb3f 	bl	8000ff8 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e081      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005988:	4b42      	ldr	r3, [pc, #264]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	019b      	lsls	r3, r3, #6
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	4936      	ldr	r1, [pc, #216]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059be:	4b37      	ldr	r3, [pc, #220]	@ (8005a9c <HAL_RCC_OscConfig+0x654>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c4:	f7fb fb18 	bl	8000ff8 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fb fb14 	bl	8000ff8 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e056      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059de:	4b2d      	ldr	r3, [pc, #180]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x584>
 80059ea:	e04e      	b.n	8005a8a <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b2b      	ldr	r3, [pc, #172]	@ (8005a9c <HAL_RCC_OscConfig+0x654>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f2:	f7fb fb01 	bl	8000ff8 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fb fafd 	bl	8000ff8 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e03f      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0c:	4b21      	ldr	r3, [pc, #132]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x5b2>
 8005a18:	e037      	b.n	8005a8a <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e032      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a26:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <HAL_RCC_OscConfig+0x64c>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d028      	beq.n	8005a86 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d121      	bne.n	8005a86 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d11a      	bne.n	8005a86 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40023800 	.word	0x40023800
 8005a98:	0800a4ec 	.word	0x0800a4ec
 8005a9c:	42470060 	.word	0x42470060

08005aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e174      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x24>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d904      	bls.n	8005ace <HAL_RCC_ClockConfig+0x2e>
 8005ac4:	f240 215a 	movw	r1, #602	@ 0x25a
 8005ac8:	487b      	ldr	r0, [pc, #492]	@ (8005cb8 <HAL_RCC_ClockConfig+0x218>)
 8005aca:	f7fb f8d1 	bl	8000c70 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d016      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d010      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d00d      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d007      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b07      	cmp	r3, #7
 8005afc:	d004      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x68>
 8005afe:	f240 215b 	movw	r1, #603	@ 0x25b
 8005b02:	486d      	ldr	r0, [pc, #436]	@ (8005cb8 <HAL_RCC_ClockConfig+0x218>)
 8005b04:	f7fb f8b4 	bl	8000c70 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b08:	4b6c      	ldr	r3, [pc, #432]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90c      	bls.n	8005b30 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b16:	4b69      	ldr	r3, [pc, #420]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b67      	ldr	r3, [pc, #412]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e136      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d049      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b48:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4a5c      	ldr	r2, [pc, #368]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005b4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b60:	4b57      	ldr	r3, [pc, #348]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4a56      	ldr	r2, [pc, #344]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005b66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d024      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b80      	cmp	r3, #128	@ 0x80
 8005b7a:	d020      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b90      	cmp	r3, #144	@ 0x90
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b8a:	d018      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2bb0      	cmp	r3, #176	@ 0xb0
 8005b92:	d014      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2bd0      	cmp	r3, #208	@ 0xd0
 8005ba2:	d00c      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2be0      	cmp	r3, #224	@ 0xe0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2bf0      	cmp	r3, #240	@ 0xf0
 8005bb2:	d004      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x11e>
 8005bb4:	f240 217e 	movw	r1, #638	@ 0x27e
 8005bb8:	483f      	ldr	r0, [pc, #252]	@ (8005cb8 <HAL_RCC_ClockConfig+0x218>)
 8005bba:	f7fb f859 	bl	8000c70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bbe:	4b40      	ldr	r3, [pc, #256]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	493d      	ldr	r1, [pc, #244]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d059      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
 8005bfc:	f240 2185 	movw	r1, #645	@ 0x285
 8005c00:	482d      	ldr	r0, [pc, #180]	@ (8005cb8 <HAL_RCC_ClockConfig+0x218>)
 8005c02:	f7fb f835 	bl	8000c70 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d119      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0bf      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d003      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c2e:	4b24      	ldr	r3, [pc, #144]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0af      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3e:	4b20      	ldr	r3, [pc, #128]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0a7      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f023 0203 	bic.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4919      	ldr	r1, [pc, #100]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c60:	f7fb f9ca 	bl	8000ff8 <HAL_GetTick>
 8005c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c68:	f7fb f9c6 	bl	8000ff8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e08f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7e:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <HAL_RCC_ClockConfig+0x220>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 020c 	and.w	r2, r3, #12
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d1eb      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d212      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9e:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca6:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <HAL_RCC_ClockConfig+0x21c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d007      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e072      	b.n	8005d9e <HAL_RCC_ClockConfig+0x2fe>
 8005cb8:	0800a4ec 	.word	0x0800a4ec
 8005cbc:	40023c00 	.word	0x40023c00
 8005cc0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d025      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d018      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x26a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce0:	d013      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x26a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cea:	d00e      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x26a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005cf4:	d009      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x26a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005cfe:	d004      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x26a>
 8005d00:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8005d04:	4828      	ldr	r0, [pc, #160]	@ (8005da8 <HAL_RCC_ClockConfig+0x308>)
 8005d06:	f7fa ffb3 	bl	8000c70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d0a:	4b28      	ldr	r3, [pc, #160]	@ (8005dac <HAL_RCC_ClockConfig+0x30c>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	4925      	ldr	r1, [pc, #148]	@ (8005dac <HAL_RCC_ClockConfig+0x30c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d026      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d018      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x2c2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d38:	d013      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x2c2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d42:	d00e      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x2c2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x2c2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005d56:	d004      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x2c2>
 8005d58:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8005d5c:	4812      	ldr	r0, [pc, #72]	@ (8005da8 <HAL_RCC_ClockConfig+0x308>)
 8005d5e:	f7fa ff87 	bl	8000c70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d62:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <HAL_RCC_ClockConfig+0x30c>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	@ (8005dac <HAL_RCC_ClockConfig+0x30c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_RCC_ClockConfig+0x30c>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	@ (8005db0 <HAL_RCC_ClockConfig+0x310>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <HAL_RCC_ClockConfig+0x314>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCC_ClockConfig+0x318>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fb f8ea 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0800a4ec 	.word	0x0800a4ec
 8005dac:	40023800 	.word	0x40023800
 8005db0:	0800a59c 	.word	0x0800a59c
 8005db4:	20000000 	.word	0x20000000
 8005db8:	20000004 	.word	0x20000004

08005dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc0:	b094      	sub	sp, #80	@ 0x50
 8005dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dd4:	4b79      	ldr	r3, [pc, #484]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d00d      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x40>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	f200 80e1 	bhi.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dee:	e0db      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df0:	4b73      	ldr	r3, [pc, #460]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005df4:	e0db      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df6:	4b73      	ldr	r3, [pc, #460]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dfa:	e0d8      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e06:	4b6d      	ldr	r3, [pc, #436]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d063      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e12:	4b6a      	ldr	r3, [pc, #424]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	0159      	lsls	r1, r3, #5
 8005e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e40:	0150      	lsls	r0, r2, #5
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4621      	mov	r1, r4
 8005e48:	1a51      	subs	r1, r2, r1
 8005e4a:	6139      	str	r1, [r7, #16]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e60:	4659      	mov	r1, fp
 8005e62:	018b      	lsls	r3, r1, #6
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	018a      	lsls	r2, r1, #6
 8005e6e:	4651      	mov	r1, sl
 8005e70:	ebb2 0801 	subs.w	r8, r2, r1
 8005e74:	4659      	mov	r1, fp
 8005e76:	eb63 0901 	sbc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	eb49 0303 	adc.w	r3, r9, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eae:	4629      	mov	r1, r5
 8005eb0:	024b      	lsls	r3, r1, #9
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eb8:	4621      	mov	r1, r4
 8005eba:	024a      	lsls	r2, r1, #9
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ecc:	f7fa f984 	bl	80001d8 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed8:	e058      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b38      	ldr	r3, [pc, #224]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	0159      	lsls	r1, r3, #5
 8005f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f06:	0150      	lsls	r0, r2, #5
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f12:	4649      	mov	r1, r9
 8005f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f30:	eb63 050b 	sbc.w	r5, r3, fp
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	00eb      	lsls	r3, r5, #3
 8005f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f42:	00e2      	lsls	r2, r4, #3
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	4643      	mov	r3, r8
 8005f4a:	18e3      	adds	r3, r4, r3
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	464b      	mov	r3, r9
 8005f50:	eb45 0303 	adc.w	r3, r5, r3
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f62:	4629      	mov	r1, r5
 8005f64:	028b      	lsls	r3, r1, #10
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	028a      	lsls	r2, r1, #10
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f76:	2200      	movs	r2, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	61fa      	str	r2, [r7, #28]
 8005f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f80:	f7fa f92a 	bl	80001d8 <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4613      	mov	r3, r2
 8005f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	3301      	adds	r3, #1
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005faa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3750      	adds	r7, #80	@ 0x50
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000000 	.word	0x20000000

08005fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fe4:	f7ff fff0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a9b      	lsrs	r3, r3, #10
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4903      	ldr	r1, [pc, #12]	@ (8006004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40023800 	.word	0x40023800
 8006004:	0800a5ac 	.word	0x0800a5ac

08006008 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d904      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006028:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 800602c:	4834      	ldr	r0, [pc, #208]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800602e:	f7fa fe1f 	bl	8000c70 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d066      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d903      	bls.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b07      	cmp	r3, #7
 8006058:	d904      	bls.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800605a:	f640 2104 	movw	r1, #2564	@ 0xa04
 800605e:	4828      	ldr	r0, [pc, #160]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006060:	f7fa fe06 	bl	8000c70 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b31      	cmp	r3, #49	@ 0x31
 800606a:	d904      	bls.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006074:	d904      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006076:	f640 2105 	movw	r1, #2565	@ 0xa05
 800607a:	4821      	ldr	r0, [pc, #132]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800607c:	f7fa fdf8 	bl	8000c70 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d903      	bls.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b3f      	cmp	r3, #63	@ 0x3f
 800608e:	d904      	bls.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006090:	f640 2107 	movw	r1, #2567	@ 0xa07
 8006094:	481a      	ldr	r0, [pc, #104]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006096:	f7fa fdeb 	bl	8000c70 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800609a:	4b1a      	ldr	r3, [pc, #104]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060a0:	f7fa ffaa 	bl	8000ff8 <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060a8:	f7fa ffa6 	bl	8000ff8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1b3      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060ba:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	019b      	lsls	r3, r3, #6
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	071b      	lsls	r3, r3, #28
 80060d8:	490b      	ldr	r1, [pc, #44]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060e0:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060e6:	f7fa ff87 	bl	8000ff8 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060ec:	e00e      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ee:	f7fa ff83 	bl	8000ff8 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d907      	bls.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e190      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006100:	0800a524 	.word	0x0800a524
 8006104:	42470068 	.word	0x42470068
 8006108:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800610c:	4b88      	ldr	r3, [pc, #544]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0ea      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8173 	beq.w	800640c <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612e:	f000 80a6 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800613a:	f000 80a0 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	4a7c      	ldr	r2, [pc, #496]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	f000 809a 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4a7a      	ldr	r2, [pc, #488]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006150:	4293      	cmp	r3, r2
 8006152:	f000 8094 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4a78      	ldr	r2, [pc, #480]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800615c:	4293      	cmp	r3, r2
 800615e:	f000 808e 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4a76      	ldr	r2, [pc, #472]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006168:	4293      	cmp	r3, r2
 800616a:	f000 8088 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	4a74      	ldr	r2, [pc, #464]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f000 8082 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	4a72      	ldr	r2, [pc, #456]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d07c      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4a70      	ldr	r2, [pc, #448]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d077      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	4a6f      	ldr	r2, [pc, #444]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d072      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	4a6d      	ldr	r2, [pc, #436]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d06d      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d068      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	4a6a      	ldr	r2, [pc, #424]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d063      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4a69      	ldr	r2, [pc, #420]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d05e      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	4a67      	ldr	r2, [pc, #412]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d059      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	4a66      	ldr	r2, [pc, #408]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d054      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4a64      	ldr	r2, [pc, #400]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04f      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	4a63      	ldr	r2, [pc, #396]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	4a61      	ldr	r2, [pc, #388]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	4a60      	ldr	r2, [pc, #384]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	4a5e      	ldr	r2, [pc, #376]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4a5d      	ldr	r2, [pc, #372]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a5b      	ldr	r2, [pc, #364]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	4a5a      	ldr	r2, [pc, #360]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a58      	ldr	r2, [pc, #352]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	4a57      	ldr	r2, [pc, #348]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	4a55      	ldr	r2, [pc, #340]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4a54      	ldr	r2, [pc, #336]	@ (8006398 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4a51      	ldr	r2, [pc, #324]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4a4f      	ldr	r2, [pc, #316]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	4a4e      	ldr	r2, [pc, #312]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006274:	f640 2137 	movw	r1, #2615	@ 0xa37
 8006278:	484c      	ldr	r0, [pc, #304]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800627a:	f7fa fcf9 	bl	8000c70 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	4b2b      	ldr	r3, [pc, #172]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	4a2a      	ldr	r2, [pc, #168]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628c:	6413      	str	r3, [r2, #64]	@ 0x40
 800628e:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800629a:	4b45      	ldr	r3, [pc, #276]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a44      	ldr	r2, [pc, #272]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062a6:	f7fa fea7 	bl	8000ff8 <HAL_GetTick>
 80062aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062ac:	e008      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fa fea3 	bl	8000ff8 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e0b0      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062c0:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f0      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062cc:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d073      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d06c      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062ea:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062f4:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062fa:	4b2e      	ldr	r3, [pc, #184]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006300:	4a0b      	ldr	r2, [pc, #44]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d158      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006312:	f7fa fe71 	bl	8000ff8 <HAL_GetTick>
 8006316:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006318:	e04e      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fa fe6d 	bl	8000ff8 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d945      	bls.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e078      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006330:	40023800 	.word	0x40023800
 8006334:	00020300 	.word	0x00020300
 8006338:	00030300 	.word	0x00030300
 800633c:	00040300 	.word	0x00040300
 8006340:	00050300 	.word	0x00050300
 8006344:	00060300 	.word	0x00060300
 8006348:	00070300 	.word	0x00070300
 800634c:	00080300 	.word	0x00080300
 8006350:	00090300 	.word	0x00090300
 8006354:	000a0300 	.word	0x000a0300
 8006358:	000b0300 	.word	0x000b0300
 800635c:	000c0300 	.word	0x000c0300
 8006360:	000d0300 	.word	0x000d0300
 8006364:	000e0300 	.word	0x000e0300
 8006368:	000f0300 	.word	0x000f0300
 800636c:	00100300 	.word	0x00100300
 8006370:	00110300 	.word	0x00110300
 8006374:	00120300 	.word	0x00120300
 8006378:	00130300 	.word	0x00130300
 800637c:	00140300 	.word	0x00140300
 8006380:	00150300 	.word	0x00150300
 8006384:	00160300 	.word	0x00160300
 8006388:	00170300 	.word	0x00170300
 800638c:	00180300 	.word	0x00180300
 8006390:	00190300 	.word	0x00190300
 8006394:	001a0300 	.word	0x001a0300
 8006398:	001b0300 	.word	0x001b0300
 800639c:	001c0300 	.word	0x001c0300
 80063a0:	001d0300 	.word	0x001d0300
 80063a4:	001e0300 	.word	0x001e0300
 80063a8:	001f0300 	.word	0x001f0300
 80063ac:	0800a524 	.word	0x0800a524
 80063b0:	40007000 	.word	0x40007000
 80063b4:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b8:	4b1c      	ldr	r3, [pc, #112]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0aa      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d0:	d10d      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80063d2:	4b16      	ldr	r3, [pc, #88]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e6:	4911      	ldr	r1, [pc, #68]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]
 80063ec:	e005      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80063ee:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063f4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063f8:	6093      	str	r3, [r2, #8]
 80063fa:	4b0c      	ldr	r3, [pc, #48]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80063fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006406:	4909      	ldr	r1, [pc, #36]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006408:	4313      	orrs	r3, r2
 800640a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7d1a      	ldrb	r2, [r3, #20]
 800641c:	4b04      	ldr	r3, [pc, #16]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800641e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	424711e0 	.word	0x424711e0

08006434 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d141      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006452:	4b25      	ldr	r3, [pc, #148]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006468:	d131      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800646a:	4b20      	ldr	r3, [pc, #128]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800646c:	617b      	str	r3, [r7, #20]
          break;
 800646e:	e031      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800647c:	d109      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006488:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006492:	4b15      	ldr	r3, [pc, #84]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800649c:	4a15      	ldr	r2, [pc, #84]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064a4:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064aa:	099b      	lsrs	r3, r3, #6
 80064ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064b8:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064be:	0f1b      	lsrs	r3, r3, #28
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	617b      	str	r3, [r7, #20]
          break;
 80064cc:	e002      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
          break;
 80064d2:	bf00      	nop
        }
      }
      break;
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80064d6:	bf00      	nop
    }
  }
  return frequency;
 80064d8:	697b      	ldr	r3, [r7, #20]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800
 80064ec:	00bb8000 	.word	0x00bb8000
 80064f0:	007a1200 	.word	0x007a1200
 80064f4:	00f42400 	.word	0x00f42400

080064f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e18c      	b.n	8006824 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a75      	ldr	r2, [pc, #468]	@ (80066e4 <HAL_SPI_Init+0x1ec>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_SPI_Init+0x4e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a73      	ldr	r2, [pc, #460]	@ (80066e8 <HAL_SPI_Init+0x1f0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_SPI_Init+0x4e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a72      	ldr	r2, [pc, #456]	@ (80066ec <HAL_SPI_Init+0x1f4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_SPI_Init+0x4e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a70      	ldr	r2, [pc, #448]	@ (80066f0 <HAL_SPI_Init+0x1f8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_SPI_Init+0x4e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6f      	ldr	r2, [pc, #444]	@ (80066f4 <HAL_SPI_Init+0x1fc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_SPI_Init+0x4e>
 800653c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8006540:	486d      	ldr	r0, [pc, #436]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006542:	f7fa fb95 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_SPI_Init+0x6a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006556:	d004      	beq.n	8006562 <HAL_SPI_Init+0x6a>
 8006558:	f240 1141 	movw	r1, #321	@ 0x141
 800655c:	4866      	ldr	r0, [pc, #408]	@ (80066f8 <HAL_SPI_Init+0x200>)
 800655e:	f7fa fb87 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <HAL_SPI_Init+0x90>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006572:	d009      	beq.n	8006588 <HAL_SPI_Init+0x90>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800657c:	d004      	beq.n	8006588 <HAL_SPI_Init+0x90>
 800657e:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8006582:	485d      	ldr	r0, [pc, #372]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006584:	f7fa fb74 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006590:	d008      	beq.n	80065a4 <HAL_SPI_Init+0xac>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <HAL_SPI_Init+0xac>
 800659a:	f240 1143 	movw	r1, #323	@ 0x143
 800659e:	4856      	ldr	r0, [pc, #344]	@ (80066f8 <HAL_SPI_Init+0x200>)
 80065a0:	f7fa fb66 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ac:	d00d      	beq.n	80065ca <HAL_SPI_Init+0xd2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_SPI_Init+0xd2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065be:	d004      	beq.n	80065ca <HAL_SPI_Init+0xd2>
 80065c0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80065c4:	484c      	ldr	r0, [pc, #304]	@ (80066f8 <HAL_SPI_Init+0x200>)
 80065c6:	f7fa fb53 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d020      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d01c      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d018      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	2b18      	cmp	r3, #24
 80065e8:	d014      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d010      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	2b28      	cmp	r3, #40	@ 0x28
 80065f8:	d00c      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	2b30      	cmp	r3, #48	@ 0x30
 8006600:	d008      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b38      	cmp	r3, #56	@ 0x38
 8006608:	d004      	beq.n	8006614 <HAL_SPI_Init+0x11c>
 800660a:	f240 1145 	movw	r1, #325	@ 0x145
 800660e:	483a      	ldr	r0, [pc, #232]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006610:	f7fa fb2e 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_SPI_Init+0x136>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	2b80      	cmp	r3, #128	@ 0x80
 8006622:	d004      	beq.n	800662e <HAL_SPI_Init+0x136>
 8006624:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8006628:	4833      	ldr	r0, [pc, #204]	@ (80066f8 <HAL_SPI_Init+0x200>)
 800662a:	f7fa fb21 	bl	8000c70 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_SPI_Init+0x150>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	2b10      	cmp	r3, #16
 800663c:	d004      	beq.n	8006648 <HAL_SPI_Init+0x150>
 800663e:	f240 1147 	movw	r1, #327	@ 0x147
 8006642:	482d      	ldr	r0, [pc, #180]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006644:	f7fa fb14 	bl	8000c70 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d155      	bne.n	80066fc <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_SPI_Init+0x172>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d004      	beq.n	800666a <HAL_SPI_Init+0x172>
 8006660:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8006664:	4824      	ldr	r0, [pc, #144]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006666:	f7fa fb03 	bl	8000c70 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <HAL_SPI_Init+0x18c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d004      	beq.n	8006684 <HAL_SPI_Init+0x18c>
 800667a:	f240 114b 	movw	r1, #331	@ 0x14b
 800667e:	481e      	ldr	r0, [pc, #120]	@ (80066f8 <HAL_SPI_Init+0x200>)
 8006680:	f7fa faf6 	bl	8000c70 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800668c:	d125      	bne.n	80066da <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d05d      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d059      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d055      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b18      	cmp	r3, #24
 80066ac:	d051      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d04d      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	2b28      	cmp	r3, #40	@ 0x28
 80066bc:	d049      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	2b30      	cmp	r3, #48	@ 0x30
 80066c4:	d045      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	2b38      	cmp	r3, #56	@ 0x38
 80066cc:	d041      	beq.n	8006752 <HAL_SPI_Init+0x25a>
 80066ce:	f240 114f 	movw	r1, #335	@ 0x14f
 80066d2:	4809      	ldr	r0, [pc, #36]	@ (80066f8 <HAL_SPI_Init+0x200>)
 80066d4:	f7fa facc 	bl	8000c70 <assert_failed>
 80066d8:	e03b      	b.n	8006752 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	61da      	str	r2, [r3, #28]
 80066e0:	e037      	b.n	8006752 <HAL_SPI_Init+0x25a>
 80066e2:	bf00      	nop
 80066e4:	40013000 	.word	0x40013000
 80066e8:	40003800 	.word	0x40003800
 80066ec:	40003c00 	.word	0x40003c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40015000 	.word	0x40015000
 80066f8:	0800a560 	.word	0x0800a560
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d01c      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	2b10      	cmp	r3, #16
 8006712:	d018      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	2b18      	cmp	r3, #24
 800671a:	d014      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	2b20      	cmp	r3, #32
 8006722:	d010      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b28      	cmp	r3, #40	@ 0x28
 800672a:	d00c      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b30      	cmp	r3, #48	@ 0x30
 8006732:	d008      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b38      	cmp	r3, #56	@ 0x38
 800673a:	d004      	beq.n	8006746 <HAL_SPI_Init+0x24e>
 800673c:	f240 1159 	movw	r1, #345	@ 0x159
 8006740:	483a      	ldr	r0, [pc, #232]	@ (800682c <HAL_SPI_Init+0x334>)
 8006742:	f7fa fa95 	bl	8000c70 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fa fac1 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006788:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d6:	ea42 0103 	orr.w	r1, r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	f003 0104 	and.w	r1, r3, #4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f8:	f003 0210 	and.w	r2, r3, #16
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006812:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	0800a560 	.word	0x0800a560

08006830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006830:	b084      	sub	sp, #16
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	f107 001c 	add.w	r0, r7, #28
 800683e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006842:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006846:	2b01      	cmp	r3, #1
 8006848:	d123      	bne.n	8006892 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800685e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006876:	2b01      	cmp	r3, #1
 8006878:	d105      	bne.n	8006886 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9dc 	bl	8006c44 <USB_CoreReset>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	e01b      	b.n	80068ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9d0 	bl	8006c44 <USB_CoreReset>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80068bc:	e005      	b.n	80068ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068ca:	7fbb      	ldrb	r3, [r7, #30]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10b      	bne.n	80068e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f043 0206 	orr.w	r2, r3, #6
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068f4:	b004      	add	sp, #16
 80068f6:	4770      	bx	lr

080068f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f043 0201 	orr.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d115      	bne.n	800698a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800696a:	200a      	movs	r0, #10
 800696c:	f7fa fb50 	bl	8001010 <HAL_Delay>
      ms += 10U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	330a      	adds	r3, #10
 8006974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f956 	bl	8006c28 <USB_GetMode>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d01e      	beq.n	80069c0 <USB_SetCurrentMode+0x84>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2bc7      	cmp	r3, #199	@ 0xc7
 8006986:	d9f0      	bls.n	800696a <USB_SetCurrentMode+0x2e>
 8006988:	e01a      	b.n	80069c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d115      	bne.n	80069bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800699c:	200a      	movs	r0, #10
 800699e:	f7fa fb37 	bl	8001010 <HAL_Delay>
      ms += 10U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	330a      	adds	r3, #10
 80069a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f93d 	bl	8006c28 <USB_GetMode>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <USB_SetCurrentMode+0x84>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80069b8:	d9f0      	bls.n	800699c <USB_SetCurrentMode+0x60>
 80069ba:	e001      	b.n	80069c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e005      	b.n	80069cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80069c4:	d101      	bne.n	80069ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ee:	d901      	bls.n	80069f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e01b      	b.n	8006a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	daf2      	bge.n	80069e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	019b      	lsls	r3, r3, #6
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a18:	d901      	bls.n	8006a1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e006      	b.n	8006a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d0f0      	beq.n	8006a0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a50:	d901      	bls.n	8006a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e018      	b.n	8006a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	daf2      	bge.n	8006a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2210      	movs	r2, #16
 8006a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a74:	d901      	bls.n	8006a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d0f0      	beq.n	8006a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	@ 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	71fb      	strb	r3, [r7, #7]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d123      	bne.n	8006b02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006aba:	88bb      	ldrh	r3, [r7, #4]
 8006abc:	3303      	adds	r3, #3
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e018      	b.n	8006afa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	031a      	lsls	r2, r3, #12
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d3e2      	bcc.n	8006ac8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3724      	adds	r7, #36	@ 0x24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b08b      	sub	sp, #44	@ 0x2c
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	089b      	lsrs	r3, r3, #2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b36:	2300      	movs	r3, #0
 8006b38:	623b      	str	r3, [r7, #32]
 8006b3a:	e014      	b.n	8006b66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	3301      	adds	r3, #1
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	3301      	adds	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	3301      	adds	r3, #1
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d3e6      	bcc.n	8006b3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b6e:	8bfb      	ldrh	r3, [r7, #30]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01e      	beq.n	8006bb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f107 0310 	add.w	r3, r7, #16
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	701a      	strb	r2, [r3, #0]
      i++;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ba6:	8bfb      	ldrh	r3, [r7, #30]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bac:	8bfb      	ldrh	r3, [r7, #30]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1ea      	bne.n	8006b88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	372c      	adds	r7, #44	@ 0x2c
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4013      	ands	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0301 	and.w	r3, r3, #1
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c5c:	d901      	bls.n	8006c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e01b      	b.n	8006c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	daf2      	bge.n	8006c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f043 0201 	orr.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c86:	d901      	bls.n	8006c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e006      	b.n	8006c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d0f0      	beq.n	8006c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca8:	b084      	sub	sp, #16
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cde:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d119      	bne.n	8006d32 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d10a      	bne.n	8006d1c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d14:	f043 0304 	orr.w	r3, r3, #4
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e014      	b.n	8006d46 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d2a:	f023 0304 	bic.w	r3, r3, #4
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	e009      	b.n	8006d46 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d46:	2110      	movs	r1, #16
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff fe43 	bl	80069d4 <USB_FlushTxFifo>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff fe6d 	bl	8006a38 <USB_FlushRxFifo>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e015      	b.n	8006d9a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2300      	movs	r3, #0
 8006d92:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3301      	adds	r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d9e:	461a      	mov	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d3e3      	bcc.n	8006d6e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2280      	movs	r2, #128	@ 0x80
 8006db8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8006df8 <USB_HostInit+0x150>)
 8006dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006dfc <USB_HostInit+0x154>)
 8006dc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f043 0210 	orr.w	r2, r3, #16
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <USB_HostInit+0x158>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006df4:	b004      	add	sp, #16
 8006df6:	4770      	bx	lr
 8006df8:	00600080 	.word	0x00600080
 8006dfc:	004000e0 	.word	0x004000e0
 8006e00:	a3200008 	.word	0xa3200008

08006e04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d107      	bne.n	8006e56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e52:	6053      	str	r3, [r2, #4]
 8006e54:	e00c      	b.n	8006e70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d107      	bne.n	8006e6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e62:	461a      	mov	r2, r3
 8006e64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006e68:	6053      	str	r3, [r2, #4]
 8006e6a:	e001      	b.n	8006e70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006e9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006eae:	2064      	movs	r0, #100	@ 0x64
 8006eb0:	f7fa f8ae 	bl	8001010 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ec2:	200a      	movs	r0, #10
 8006ec4:	f7fa f8a4 	bl	8001010 <HAL_Delay>

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ef6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <USB_DriveVbus+0x44>
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d106      	bne.n	8006f16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f20:	d109      	bne.n	8006f36 <USB_DriveVbus+0x64>
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	0c5b      	lsrs	r3, r3, #17
 8006f62:	f003 0303 	and.w	r3, r3, #3
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	b29b      	uxth	r3, r3
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	70fb      	strb	r3, [r7, #3]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70bb      	strb	r3, [r7, #2]
 8006faa:	4613      	mov	r3, r2
 8006fac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d867      	bhi.n	80070a2 <USB_HC_Init+0x10e>
 8006fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <USB_HC_Init+0x44>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08007065 	.word	0x08007065
 8006fe0:	08006fe9 	.word	0x08006fe9
 8006fe4:	08007027 	.word	0x08007027
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da51      	bge.n	80070a8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	440a      	add	r2, r1
 800701a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800701e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007022:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007024:	e040      	b.n	80070a8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4413      	add	r3, r2
 800702e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007032:	461a      	mov	r2, r3
 8007034:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007038:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800703a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800703e:	2b00      	cmp	r3, #0
 8007040:	da34      	bge.n	80070ac <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	440a      	add	r2, r1
 8007058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800705c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007060:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007062:	e023      	b.n	80070ac <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007070:	461a      	mov	r2, r3
 8007072:	f240 2325 	movw	r3, #549	@ 0x225
 8007076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800707c:	2b00      	cmp	r3, #0
 800707e:	da17      	bge.n	80070b0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	440a      	add	r2, r1
 8007096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800709a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800709e:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070a0:	e006      	b.n	80070b0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	77fb      	strb	r3, [r7, #31]
      break;
 80070a6:	e004      	b.n	80070b2 <USB_HC_Init+0x11e>
      break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <USB_HC_Init+0x11e>
      break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <USB_HC_Init+0x11e>
      break;
 80070b0:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070be:	461a      	mov	r2, r3
 80070c0:	2300      	movs	r3, #0
 80070c2:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070de:	f043 0302 	orr.w	r3, r3, #2
 80070e2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ea:	699a      	ldr	r2, [r3, #24]
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	2101      	movs	r1, #1
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	6939      	ldr	r1, [r7, #16]
 80070fa:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80070fe:	4313      	orrs	r3, r2
 8007100:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800710e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	da03      	bge.n	800711e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	e001      	b.n	8007122 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff ff0e 	bl	8006f44 <USB_GetHostSpeed>
 8007128:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800712a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800712e:	2b02      	cmp	r3, #2
 8007130:	d106      	bne.n	8007140 <USB_HC_Init+0x1ac>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d003      	beq.n	8007140 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e001      	b.n	8007144 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007144:	787b      	ldrb	r3, [r7, #1]
 8007146:	059b      	lsls	r3, r3, #22
 8007148:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800714c:	78bb      	ldrb	r3, [r7, #2]
 800714e:	02db      	lsls	r3, r3, #11
 8007150:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007154:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800715a:	049b      	lsls	r3, r3, #18
 800715c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007160:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007162:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007164:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007168:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	431a      	orrs	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	440a      	add	r2, r1
 800717a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800717e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007182:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007184:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007188:	2b03      	cmp	r3, #3
 800718a:	d003      	beq.n	8007194 <USB_HC_Init+0x200>
 800718c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10f      	bne.n	80071b4 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071b2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80071b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop

080071c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08c      	sub	sp, #48	@ 0x30
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80071d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071dc:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	799b      	ldrb	r3, [r3, #6]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d158      	bne.n	8007298 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80071e6:	2301      	movs	r3, #1
 80071e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	78db      	ldrb	r3, [r3, #3]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	8a92      	ldrh	r2, [r2, #20]
 80071f8:	fb03 f202 	mul.w	r2, r3, r2
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	61da      	str	r2, [r3, #28]
 8007200:	e079      	b.n	80072f6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	7c9b      	ldrb	r3, [r3, #18]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d130      	bne.n	800726c <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007210:	d918      	bls.n	8007244 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	8a9b      	ldrh	r3, [r3, #20]
 8007216:	461a      	mov	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d003      	beq.n	8007234 <USB_HC_StartXfer+0x74>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d103      	bne.n	800723c <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2202      	movs	r2, #2
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	e05c      	b.n	80072f6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2201      	movs	r2, #1
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	e058      	b.n	80072f6 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d007      	beq.n	8007264 <USB_HC_StartXfer+0xa4>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d003      	beq.n	8007264 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2204      	movs	r2, #4
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	e048      	b.n	80072f6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2203      	movs	r2, #3
 8007268:	60da      	str	r2, [r3, #12]
 800726a:	e044      	b.n	80072f6 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10d      	bne.n	800728e <USB_HC_StartXfer+0xce>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	8a92      	ldrh	r2, [r2, #20]
 800727a:	4293      	cmp	r3, r2
 800727c:	d907      	bls.n	800728e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800727e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	8a92      	ldrh	r2, [r2, #20]
 8007284:	fb03 f202 	mul.w	r2, r3, r2
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	61da      	str	r2, [r3, #28]
 800728c:	e033      	b.n	80072f6 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	61da      	str	r2, [r3, #28]
 8007296:	e02e      	b.n	80072f6 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d018      	beq.n	80072d2 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	8a92      	ldrh	r2, [r2, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	3b01      	subs	r3, #1
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	8a92      	ldrh	r2, [r2, #20]
 80072b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80072b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80072b8:	8b7b      	ldrh	r3, [r7, #26]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d90b      	bls.n	80072d6 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80072be:	8b7b      	ldrh	r3, [r7, #26]
 80072c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	8a92      	ldrh	r2, [r2, #20]
 80072c8:	fb03 f202 	mul.w	r2, r3, r2
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	61da      	str	r2, [r3, #28]
 80072d0:	e001      	b.n	80072d6 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80072d2:	2301      	movs	r3, #1
 80072d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	8a92      	ldrh	r2, [r2, #20]
 80072e4:	fb03 f202 	mul.w	r2, r3, r2
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61da      	str	r2, [r3, #28]
 80072ec:	e003      	b.n	80072f6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6a1a      	ldr	r2, [r3, #32]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007300:	04d9      	lsls	r1, r3, #19
 8007302:	4ba4      	ldr	r3, [pc, #656]	@ (8007594 <USB_HC_StartXfer+0x3d4>)
 8007304:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007306:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	7d9b      	ldrb	r3, [r3, #22]
 800730c:	075b      	lsls	r3, r3, #29
 800730e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007312:	69f9      	ldr	r1, [r7, #28]
 8007314:	0148      	lsls	r0, r1, #5
 8007316:	6a39      	ldr	r1, [r7, #32]
 8007318:	4401      	add	r1, r0
 800731a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800731e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007320:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6999      	ldr	r1, [r3, #24]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007338:	460a      	mov	r2, r1
 800733a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	440a      	add	r2, r1
 800736a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800736e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007372:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	7e7b      	ldrb	r3, [r7, #25]
 8007384:	075b      	lsls	r3, r3, #29
 8007386:	69f9      	ldr	r1, [r7, #28]
 8007388:	0148      	lsls	r0, r1, #5
 800738a:	6a39      	ldr	r1, [r7, #32]
 800738c:	4401      	add	r1, r0
 800738e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	799b      	ldrb	r3, [r3, #6]
 800739a:	2b01      	cmp	r3, #1
 800739c:	f040 80c4 	bne.w	8007528 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	7c5b      	ldrb	r3, [r3, #17]
 80073a4:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073aa:	4313      	orrs	r3, r2
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80073b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073bc:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	6a3a      	ldr	r2, [r7, #32]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80073dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	79db      	ldrb	r3, [r3, #7]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d123      	bne.n	800742e <USB_HC_StartXfer+0x26e>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	78db      	ldrb	r3, [r3, #3]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d11f      	bne.n	800742e <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	440a      	add	r2, r1
 8007404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800740c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	440a      	add	r2, r1
 8007424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800742c:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	7c9b      	ldrb	r3, [r3, #18]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d003      	beq.n	800743e <USB_HC_StartXfer+0x27e>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	7c9b      	ldrb	r3, [r3, #18]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d117      	bne.n	800746e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007442:	2b01      	cmp	r3, #1
 8007444:	d113      	bne.n	800746e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	78db      	ldrb	r3, [r3, #3]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d10f      	bne.n	800746e <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	4413      	add	r3, r2
 8007456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	440a      	add	r2, r1
 8007464:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800746c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	7c9b      	ldrb	r3, [r3, #18]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d163      	bne.n	800753e <USB_HC_StartXfer+0x37e>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	78db      	ldrb	r3, [r3, #3]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d15f      	bne.n	800753e <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	3b01      	subs	r3, #1
 8007484:	2b03      	cmp	r3, #3
 8007486:	d859      	bhi.n	800753c <USB_HC_StartXfer+0x37c>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <USB_HC_StartXfer+0x2d0>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074c3 	.word	0x080074c3
 8007498:	080074e5 	.word	0x080074e5
 800749c:	08007507 	.word	0x08007507
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074be:	6053      	str	r3, [r2, #4]
          break;
 80074c0:	e03d      	b.n	800753e <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074dc:	f043 030e 	orr.w	r3, r3, #14
 80074e0:	6053      	str	r3, [r2, #4]
          break;
 80074e2:	e02c      	b.n	800753e <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007502:	6053      	str	r3, [r2, #4]
          break;
 8007504:	e01b      	b.n	800753e <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007524:	6053      	str	r3, [r2, #4]
          break;
 8007526:	e00a      	b.n	800753e <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007534:	461a      	mov	r2, r3
 8007536:	2300      	movs	r3, #0
 8007538:	6053      	str	r3, [r2, #4]
 800753a:	e000      	b.n	800753e <USB_HC_StartXfer+0x37e>
          break;
 800753c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	4413      	add	r3, r2
 8007546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007554:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	e003      	b.n	8007570 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800756e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007576:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007584:	461a      	mov	r2, r3
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	e055      	b.n	8007640 <USB_HC_StartXfer+0x480>
 8007594:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	78db      	ldrb	r3, [r3, #3]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d14e      	bne.n	800763e <USB_HC_StartXfer+0x47e>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d04a      	beq.n	800763e <USB_HC_StartXfer+0x47e>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	79db      	ldrb	r3, [r3, #7]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d146      	bne.n	800763e <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	7c9b      	ldrb	r3, [r3, #18]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d831      	bhi.n	800761c <USB_HC_StartXfer+0x45c>
 80075b8:	a201      	add	r2, pc, #4	@ (adr r2, 80075c0 <USB_HC_StartXfer+0x400>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	080075d1 	.word	0x080075d1
 80075cc:	080075f5 	.word	0x080075f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	3303      	adds	r3, #3
 80075d6:	089b      	lsrs	r3, r3, #2
 80075d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075da:	8afa      	ldrh	r2, [r7, #22]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d91c      	bls.n	8007620 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	f043 0220 	orr.w	r2, r3, #32
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80075f2:	e015      	b.n	8007620 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	3303      	adds	r3, #3
 80075fa:	089b      	lsrs	r3, r3, #2
 80075fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075fe:	8afa      	ldrh	r2, [r7, #22]
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	b29b      	uxth	r3, r3
 800760a:	429a      	cmp	r2, r3
 800760c:	d90a      	bls.n	8007624 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	619a      	str	r2, [r3, #24]
        }
        break;
 800761a:	e003      	b.n	8007624 <USB_HC_StartXfer+0x464>

      default:
        break;
 800761c:	bf00      	nop
 800761e:	e002      	b.n	8007626 <USB_HC_StartXfer+0x466>
        break;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <USB_HC_StartXfer+0x466>
        break;
 8007624:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6999      	ldr	r1, [r3, #24]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	785a      	ldrb	r2, [r3, #1]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	b29b      	uxth	r3, r3
 8007634:	2000      	movs	r0, #0
 8007636:	9000      	str	r0, [sp, #0]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fa2b 	bl	8006a94 <USB_WritePacket>
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	b29b      	uxth	r3, r3
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800766a:	b480      	push	{r7}
 800766c:	b089      	sub	sp, #36	@ 0x24
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0c9b      	lsrs	r3, r3, #18
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	0fdb      	lsrs	r3, r3, #31
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	0fdb      	lsrs	r3, r3, #31
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d10d      	bne.n	80076ec <USB_HC_Halt+0x82>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <USB_HC_Halt+0x82>
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d002      	beq.n	80076e8 <USB_HC_Halt+0x7e>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d101      	bne.n	80076ec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e0d8      	b.n	800789e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <USB_HC_Halt+0x8e>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d173      	bne.n	80077e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	440a      	add	r2, r1
 800770e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007712:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007716:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d14a      	bne.n	80077ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d133      	bne.n	8007798 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800774a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800774e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800776a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800776e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3301      	adds	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800777c:	d82e      	bhi.n	80077dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007794:	d0ec      	beq.n	8007770 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007796:	e081      	b.n	800789c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077b8:	e070      	b.n	800789c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077da:	e05f      	b.n	800789c <USB_HC_Halt+0x232>
            break;
 80077dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077de:	e05d      	b.n	800789c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d133      	bne.n	8007878 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800782e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800784e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	3301      	adds	r3, #1
 8007854:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800785c:	d81d      	bhi.n	800789a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007874:	d0ec      	beq.n	8007850 <USB_HC_Halt+0x1e6>
 8007876:	e011      	b.n	800789c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	440a      	add	r2, r1
 800788e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007892:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	e000      	b.n	800789c <USB_HC_Halt+0x232>
          break;
 800789a:	bf00      	nop
    }
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3724      	adds	r7, #36	@ 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b088      	sub	sp, #32
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff f82b 	bl	800691a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078c4:	2110      	movs	r1, #16
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff f884 	bl	80069d4 <USB_FlushTxFifo>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff f8ae 	bl	8006a38 <USB_FlushRxFifo>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e01f      	b.n	800792c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007902:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800790a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007912:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	4413      	add	r3, r2
 800791c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007920:	461a      	mov	r2, r3
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	3301      	adds	r3, #1
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b0f      	cmp	r3, #15
 8007930:	d9dc      	bls.n	80078ec <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007932:	2300      	movs	r3, #0
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	e034      	b.n	80079a2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800794e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007956:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800795e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796c:	461a      	mov	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800797e:	d80c      	bhi.n	800799a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007992:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007996:	d0ec      	beq.n	8007972 <USB_StopHost+0xc8>
 8007998:	e000      	b.n	800799c <USB_StopHost+0xf2>
        break;
 800799a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	3301      	adds	r3, #1
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b0f      	cmp	r3, #15
 80079a6:	d9c7      	bls.n	8007938 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 33ff 	mov.w	r3, #4294967295
 80079b4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fe ff9a 	bl	80068f8 <USB_EnableGlobalInt>

  return ret;
 80079c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80079ce:	b590      	push	{r4, r7, lr}
 80079d0:	b089      	sub	sp, #36	@ 0x24
 80079d2:	af04      	add	r7, sp, #16
 80079d4:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80079d6:	2301      	movs	r3, #1
 80079d8:	2202      	movs	r2, #2
 80079da:	2102      	movs	r1, #2
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fc86 	bl	80082ee <USBH_FindInterface>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2bff      	cmp	r3, #255	@ 0xff
 80079ea:	d002      	beq.n	80079f2 <USBH_CDC_InterfaceInit+0x24>
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d901      	bls.n	80079f6 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80079f2:	2302      	movs	r3, #2
 80079f4:	e13d      	b.n	8007c72 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc5b 	bl	80082b6 <USBH_SelectInterface>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e131      	b.n	8007c72 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007a14:	2050      	movs	r0, #80	@ 0x50
 8007a16:	f002 fb65 	bl	800a0e4 <malloc>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e11f      	b.n	8007c72 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a32:	2250      	movs	r2, #80	@ 0x50
 8007a34:	2100      	movs	r1, #0
 8007a36:	68b8      	ldr	r0, [r7, #8]
 8007a38:	f002 fc12 	bl	800a260 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	211a      	movs	r1, #26
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b25b      	sxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da15      	bge.n	8007a80 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	211a      	movs	r1, #26
 8007a5a:	fb01 f303 	mul.w	r3, r1, r3
 8007a5e:	4413      	add	r3, r2
 8007a60:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a64:	781a      	ldrb	r2, [r3, #0]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	211a      	movs	r1, #26
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007a7a:	881a      	ldrh	r2, [r3, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 ffbf 	bl	8009a0a <USBH_AllocPipe>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	7819      	ldrb	r1, [r3, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	7858      	ldrb	r0, [r3, #1]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	8952      	ldrh	r2, [r2, #10]
 8007aac:	9202      	str	r2, [sp, #8]
 8007aae:	2203      	movs	r2, #3
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 ff77 	bl	80099ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 fa86 	bl	8009fd8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007acc:	2300      	movs	r3, #0
 8007ace:	2200      	movs	r2, #0
 8007ad0:	210a      	movs	r1, #10
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fc0b 	bl	80082ee <USBH_FindInterface>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2bff      	cmp	r3, #255	@ 0xff
 8007ae0:	d002      	beq.n	8007ae8 <USBH_CDC_InterfaceInit+0x11a>
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d901      	bls.n	8007aec <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e0c2      	b.n	8007c72 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	211a      	movs	r1, #26
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	4413      	add	r3, r2
 8007af8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da16      	bge.n	8007b32 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	211a      	movs	r1, #26
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	4413      	add	r3, r2
 8007b10:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	211a      	movs	r1, #26
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b2a:	881a      	ldrh	r2, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	835a      	strh	r2, [r3, #26]
 8007b30:	e015      	b.n	8007b5e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	211a      	movs	r1, #26
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	211a      	movs	r1, #26
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	211a      	movs	r1, #26
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da16      	bge.n	8007ba4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	211a      	movs	r1, #26
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b86:	781a      	ldrb	r2, [r3, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	211a      	movs	r1, #26
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007b9c:	881a      	ldrh	r2, [r3, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	835a      	strh	r2, [r3, #26]
 8007ba2:	e015      	b.n	8007bd0 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	211a      	movs	r1, #26
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	211a      	movs	r1, #26
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007bca:	881a      	ldrh	r2, [r3, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	7b9b      	ldrb	r3, [r3, #14]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 ff17 	bl	8009a0a <USBH_AllocPipe>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	7bdb      	ldrb	r3, [r3, #15]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 ff0d 	bl	8009a0a <USBH_AllocPipe>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	7b59      	ldrb	r1, [r3, #13]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	7b98      	ldrb	r0, [r3, #14]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	8b12      	ldrh	r2, [r2, #24]
 8007c10:	9202      	str	r2, [sp, #8]
 8007c12:	2202      	movs	r2, #2
 8007c14:	9201      	str	r2, [sp, #4]
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4623      	mov	r3, r4
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fec5 	bl	80099ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7b19      	ldrb	r1, [r3, #12]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	7bd8      	ldrb	r0, [r3, #15]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	8b52      	ldrh	r2, [r2, #26]
 8007c3a:	9202      	str	r2, [sp, #8]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	9201      	str	r2, [sp, #4]
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4623      	mov	r3, r4
 8007c44:	4602      	mov	r2, r0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 feb0 	bl	80099ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	7b5b      	ldrb	r3, [r3, #13]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f002 f9bb 	bl	8009fd8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	7b1b      	ldrb	r3, [r3, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f002 f9b4 	bl	8009fd8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00e      	beq.n	8007cb2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fea5 	bl	80099ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fed0 	bl	8009a4c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	7b1b      	ldrb	r3, [r3, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7b1b      	ldrb	r3, [r3, #12]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fe92 	bl	80099ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	7b1b      	ldrb	r3, [r3, #12]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 febd 	bl	8009a4c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	7b5b      	ldrb	r3, [r3, #13]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	7b5b      	ldrb	r3, [r3, #13]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fe7f 	bl	80099ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	7b5b      	ldrb	r3, [r3, #13]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 feaa 	bl	8009a4c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f002 f9ee 	bl	800a0f4 <free>
    phost->pActiveClass->pData = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d1e:	2200      	movs	r2, #0
 8007d20:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3340      	adds	r3, #64	@ 0x40
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8b2 	bl	8007eae <GetLineCoding>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d877      	bhi.n	8007e80 <USBH_CDC_Process+0x114>
 8007d90:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <USBH_CDC_Process+0x2c>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007dad 	.word	0x08007dad
 8007d9c:	08007db3 	.word	0x08007db3
 8007da0:	08007de3 	.word	0x08007de3
 8007da4:	08007e57 	.word	0x08007e57
 8007da8:	08007e65 	.word	0x08007e65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
      break;
 8007db0:	e06d      	b.n	8007e8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f897 	bl	8007eec <SetLineCoding>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007dd0:	e058      	b.n	8007e84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d055      	beq.n	8007e84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007de0:	e050      	b.n	8007e84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	3340      	adds	r3, #64	@ 0x40
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f860 	bl	8007eae <GetLineCoding>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d126      	bne.n	8007e46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d13b      	bne.n	8007e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d133      	bne.n	8007e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d12b      	bne.n	8007e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d124      	bne.n	8007e88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f958 	bl	80080f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e44:	e020      	b.n	8007e88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d01d      	beq.n	8007e88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e54:	e018      	b.n	8007e88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f867 	bl	8007f2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f8da 	bl	8008016 <CDC_ProcessReception>
      break;
 8007e62:	e014      	b.n	8007e8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f81a 	bl	8008ea0 <USBH_ClrFeature>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007e7e:	e005      	b.n	8007e8c <USBH_CDC_Process+0x120>

    default:
      break;
 8007e80:	bf00      	nop
 8007e82:	e004      	b.n	8007e8e <USBH_CDC_Process+0x122>
      break;
 8007e84:	bf00      	nop
 8007e86:	e002      	b.n	8007e8e <USBH_CDC_Process+0x122>
      break;
 8007e88:	bf00      	nop
 8007e8a:	e000      	b.n	8007e8e <USBH_CDC_Process+0x122>
      break;
 8007e8c:	bf00      	nop

  }

  return status;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	22a1      	movs	r2, #161	@ 0xa1
 8007ebc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2221      	movs	r2, #33	@ 0x21
 8007ec2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2207      	movs	r2, #7
 8007ed4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2207      	movs	r2, #7
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fb14 	bl	800950a <USBH_CtlReq>
 8007ee2:	4603      	mov	r3, r0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2221      	movs	r2, #33	@ 0x21
 8007efa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2207      	movs	r2, #7
 8007f12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2207      	movs	r2, #7
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 faf5 	bl	800950a <USBH_CtlReq>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af02      	add	r7, sp, #8
 8007f30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d002      	beq.n	8007f50 <CDC_ProcessTransmission+0x26>
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d023      	beq.n	8007f96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007f4e:	e05e      	b.n	800800e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	8b12      	ldrh	r2, [r2, #24]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d90b      	bls.n	8007f74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8b1a      	ldrh	r2, [r3, #24]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	7b5b      	ldrb	r3, [r3, #13]
 8007f68:	2001      	movs	r0, #1
 8007f6a:	9000      	str	r0, [sp, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fcda 	bl	8009926 <USBH_BulkSendData>
 8007f72:	e00b      	b.n	8007f8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	7b5b      	ldrb	r3, [r3, #13]
 8007f82:	2001      	movs	r0, #1
 8007f84:	9000      	str	r0, [sp, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fccd 	bl	8009926 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007f94:	e03b      	b.n	800800e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	7b5b      	ldrb	r3, [r3, #13]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fff1 	bl	8009f84 <USBH_LL_GetURBState>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d128      	bne.n	8007ffe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	8b12      	ldrh	r2, [r2, #24]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d90e      	bls.n	8007fd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	8b12      	ldrh	r2, [r2, #24]
 8007fc0:	1a9a      	subs	r2, r3, r2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	8b12      	ldrh	r2, [r2, #24]
 8007fce:	441a      	add	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	61da      	str	r2, [r3, #28]
 8007fd4:	e002      	b.n	8007fdc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007fec:	e00e      	b.n	800800c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f868 	bl	80080cc <USBH_CDC_TransmitCallback>
      break;
 8007ffc:	e006      	b.n	800800c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d103      	bne.n	800800c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800800c:	bf00      	nop
  }
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008028:	2300      	movs	r3, #0
 800802a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008032:	2b03      	cmp	r3, #3
 8008034:	d002      	beq.n	800803c <CDC_ProcessReception+0x26>
 8008036:	2b04      	cmp	r3, #4
 8008038:	d00e      	beq.n	8008058 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800803a:	e043      	b.n	80080c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6a19      	ldr	r1, [r3, #32]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	8b5a      	ldrh	r2, [r3, #26]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	7b1b      	ldrb	r3, [r3, #12]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fc91 	bl	8009970 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2204      	movs	r2, #4
 8008052:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008056:	e035      	b.n	80080c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	7b1b      	ldrb	r3, [r3, #12]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 ff90 	bl	8009f84 <USBH_LL_GetURBState>
 8008064:	4603      	mov	r3, r0
 8008066:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008068:	7cfb      	ldrb	r3, [r7, #19]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d129      	bne.n	80080c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	7b1b      	ldrb	r3, [r3, #12]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 fef3 	bl	8009e60 <USBH_LL_GetLastXferSize>
 800807a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	429a      	cmp	r2, r3
 8008084:	d016      	beq.n	80080b4 <CDC_ProcessReception+0x9e>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	8b5b      	ldrh	r3, [r3, #26]
 800808a:	461a      	mov	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4293      	cmp	r3, r2
 8008090:	d110      	bne.n	80080b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1ad2      	subs	r2, r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	441a      	add	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2203      	movs	r2, #3
 80080ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80080b2:	e006      	b.n	80080c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f80f 	bl	80080e0 <USBH_CDC_ReceiveCallback>
      break;
 80080c2:	bf00      	nop
  }
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800811c:	2302      	movs	r3, #2
 800811e:	e029      	b.n	8008174 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	79fa      	ldrb	r2, [r7, #7]
 8008124:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f81f 	bl	800817c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f001 fdc3 	bl	8009cf8 <USBH_LL_Init>

  return USBH_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e009      	b.n	80081a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	33e0      	adds	r3, #224	@ 0xe0
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	2200      	movs	r2, #0
 800819a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b0f      	cmp	r3, #15
 80081a6:	d9f2      	bls.n	800818e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e009      	b.n	80081c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c8:	d3f1      	bcc.n	80081ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2240      	movs	r2, #64	@ 0x40
 80081ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	331c      	adds	r3, #28
 800821a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f002 f81d 	bl	800a260 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800822c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f002 f814 	bl	800a260 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800823e:	2212      	movs	r2, #18
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f002 f80c 	bl	800a260 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800824e:	223e      	movs	r2, #62	@ 0x3e
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f002 f804 	bl	800a260 <memset>

  return USBH_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d016      	beq.n	80082a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10e      	bne.n	800829e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008286:	1c59      	adds	r1, r3, #1
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	33de      	adds	r3, #222	@ 0xde
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
 800829c:	e004      	b.n	80082a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800829e:	2302      	movs	r3, #2
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	e001      	b.n	80082a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80082a4:	2302      	movs	r3, #2
 80082a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d204      	bcs.n	80082dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80082da:	e001      	b.n	80082e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80082dc:	2302      	movs	r3, #2
 80082de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b087      	sub	sp, #28
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	461a      	mov	r2, r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	70fb      	strb	r3, [r7, #3]
 8008300:	460b      	mov	r3, r1
 8008302:	70bb      	strb	r3, [r7, #2]
 8008304:	4613      	mov	r3, r2
 8008306:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008316:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008318:	e025      	b.n	8008366 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	221a      	movs	r2, #26
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	3308      	adds	r3, #8
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	3302      	adds	r3, #2
 800832a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	795b      	ldrb	r3, [r3, #5]
 8008330:	78fa      	ldrb	r2, [r7, #3]
 8008332:	429a      	cmp	r2, r3
 8008334:	d002      	beq.n	800833c <USBH_FindInterface+0x4e>
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2bff      	cmp	r3, #255	@ 0xff
 800833a:	d111      	bne.n	8008360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008340:	78ba      	ldrb	r2, [r7, #2]
 8008342:	429a      	cmp	r2, r3
 8008344:	d002      	beq.n	800834c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008346:	78bb      	ldrb	r3, [r7, #2]
 8008348:	2bff      	cmp	r3, #255	@ 0xff
 800834a:	d109      	bne.n	8008360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008350:	787a      	ldrb	r2, [r7, #1]
 8008352:	429a      	cmp	r2, r3
 8008354:	d002      	beq.n	800835c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008356:	787b      	ldrb	r3, [r7, #1]
 8008358:	2bff      	cmp	r3, #255	@ 0xff
 800835a:	d101      	bne.n	8008360 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	e006      	b.n	800836e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	3301      	adds	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d9d6      	bls.n	800831a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800836c:	23ff      	movs	r3, #255	@ 0xff
}
 800836e:	4618      	mov	r0, r3
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 fcf4 	bl	8009d70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008388:	2101      	movs	r1, #1
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fe0d 	bl	8009faa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af04      	add	r7, sp, #16
 80083a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2203      	movs	r2, #3
 80083bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b0b      	cmp	r3, #11
 80083c6:	f200 81bb 	bhi.w	8008740 <USBH_Process+0x3a4>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <USBH_Process+0x34>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008401 	.word	0x08008401
 80083d4:	08008433 	.word	0x08008433
 80083d8:	0800849b 	.word	0x0800849b
 80083dc:	080086db 	.word	0x080086db
 80083e0:	08008741 	.word	0x08008741
 80083e4:	0800853b 	.word	0x0800853b
 80083e8:	08008681 	.word	0x08008681
 80083ec:	08008571 	.word	0x08008571
 80083f0:	08008591 	.word	0x08008591
 80083f4:	080085af 	.word	0x080085af
 80083f8:	080085f3 	.word	0x080085f3
 80083fc:	080086c3 	.word	0x080086c3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 819b 	beq.w	8008744 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008414:	20c8      	movs	r0, #200	@ 0xc8
 8008416:	f001 fe12 	bl	800a03e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fd05 	bl	8009e2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008430:	e188      	b.n	8008744 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008438:	2b01      	cmp	r3, #1
 800843a:	d107      	bne.n	800844c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800844a:	e18a      	b.n	8008762 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008456:	d914      	bls.n	8008482 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800845e:	3301      	adds	r3, #1
 8008460:	b2da      	uxtb	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800846e:	2b03      	cmp	r3, #3
 8008470:	d903      	bls.n	800847a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	220d      	movs	r2, #13
 8008476:	701a      	strb	r2, [r3, #0]
      break;
 8008478:	e173      	b.n	8008762 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
      break;
 8008480:	e16f      	b.n	8008762 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008488:	f103 020a 	add.w	r2, r3, #10
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008492:	200a      	movs	r0, #10
 8008494:	f001 fdd3 	bl	800a03e <USBH_Delay>
      break;
 8008498:	e163      	b.n	8008762 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084aa:	2104      	movs	r1, #4
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80084b0:	2064      	movs	r0, #100	@ 0x64
 80084b2:	f001 fdc4 	bl	800a03e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fc90 	bl	8009ddc <USBH_LL_GetSpeed>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2205      	movs	r2, #5
 80084ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80084cc:	2100      	movs	r1, #0
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 fa9b 	bl	8009a0a <USBH_AllocPipe>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80084dc:	2180      	movs	r1, #128	@ 0x80
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fa93 	bl	8009a0a <USBH_AllocPipe>
 80084e4:	4603      	mov	r3, r0
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	7919      	ldrb	r1, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008500:	9202      	str	r2, [sp, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	9201      	str	r2, [sp, #4]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	4603      	mov	r3, r0
 800850a:	2280      	movs	r2, #128	@ 0x80
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fa4d 	bl	80099ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7959      	ldrb	r1, [r3, #5]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008526:	9202      	str	r2, [sp, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4603      	mov	r3, r0
 8008530:	2200      	movs	r2, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fa3a 	bl	80099ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008538:	e113      	b.n	8008762 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f916 	bl	800876c <USBH_HandleEnum>
 8008540:	4603      	mov	r3, r0
 8008542:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	f040 80fd 	bne.w	8008748 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800855c:	2b01      	cmp	r3, #1
 800855e:	d103      	bne.n	8008568 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2208      	movs	r2, #8
 8008564:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008566:	e0ef      	b.n	8008748 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2207      	movs	r2, #7
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e0eb      	b.n	8008748 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80e8 	beq.w	800874c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008582:	2101      	movs	r1, #1
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2208      	movs	r2, #8
 800858c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800858e:	e0dd      	b.n	800874c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc3a 	bl	8008e12 <USBH_SetCfg>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f040 80d5 	bne.w	8008750 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2209      	movs	r2, #9
 80085aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085ac:	e0d0      	b.n	8008750 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d016      	beq.n	80085ea <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80085bc:	2101      	movs	r1, #1
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc4a 	bl	8008e58 <USBH_SetFeature>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d103      	bne.n	80085d8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	220a      	movs	r2, #10
 80085d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085d6:	e0bd      	b.n	8008754 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b03      	cmp	r3, #3
 80085de:	f040 80b9 	bne.w	8008754 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	220a      	movs	r2, #10
 80085e6:	701a      	strb	r2, [r3, #0]
      break;
 80085e8:	e0b4      	b.n	8008754 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	220a      	movs	r2, #10
 80085ee:	701a      	strb	r2, [r3, #0]
      break;
 80085f0:	e0b0      	b.n	8008754 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80ad 	beq.w	8008758 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
 800860a:	e016      	b.n	800863a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800860c:	7bfa      	ldrb	r2, [r7, #15]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32de      	adds	r2, #222	@ 0xde
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	791a      	ldrb	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800861e:	429a      	cmp	r2, r3
 8008620:	d108      	bne.n	8008634 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008622:	7bfa      	ldrb	r2, [r7, #15]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	32de      	adds	r2, #222	@ 0xde
 8008628:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008632:	e005      	b.n	8008640 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	3301      	adds	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0e5      	beq.n	800860c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2206      	movs	r2, #6
 8008660:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008668:	2103      	movs	r1, #3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800866e:	e073      	b.n	8008758 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	220d      	movs	r2, #13
 8008674:	701a      	strb	r2, [r3, #0]
      break;
 8008676:	e06f      	b.n	8008758 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	220d      	movs	r2, #13
 800867c:	701a      	strb	r2, [r3, #0]
      break;
 800867e:	e06b      	b.n	8008758 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	220b      	movs	r2, #11
 80086a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086a8:	e058      	b.n	800875c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d154      	bne.n	800875c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	220d      	movs	r2, #13
 80086b6:	701a      	strb	r2, [r3, #0]
      break;
 80086b8:	e050      	b.n	800875c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	220d      	movs	r2, #13
 80086be:	701a      	strb	r2, [r3, #0]
      break;
 80086c0:	e04c      	b.n	800875c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d049      	beq.n	8008760 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	4798      	blx	r3
      }
      break;
 80086d8:	e042      	b.n	8008760 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fd4a 	bl	800817c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d009      	beq.n	8008706 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008716:	2105      	movs	r1, #5
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d107      	bne.n	8008738 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fe22 	bl	800837a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008736:	e014      	b.n	8008762 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fb19 	bl	8009d70 <USBH_LL_Start>
      break;
 800873e:	e010      	b.n	8008762 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008740:	bf00      	nop
 8008742:	e00e      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008744:	bf00      	nop
 8008746:	e00c      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008748:	bf00      	nop
 800874a:	e00a      	b.n	8008762 <USBH_Process+0x3c6>
    break;
 800874c:	bf00      	nop
 800874e:	e008      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008750:	bf00      	nop
 8008752:	e006      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008754:	bf00      	nop
 8008756:	e004      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008758:	bf00      	nop
 800875a:	e002      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <USBH_Process+0x3c6>
      break;
 8008760:	bf00      	nop
  }
  return USBH_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af04      	add	r7, sp, #16
 8008772:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008778:	2301      	movs	r3, #1
 800877a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b07      	cmp	r3, #7
 8008782:	f200 81bd 	bhi.w	8008b00 <USBH_HandleEnum+0x394>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USBH_HandleEnum+0x20>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087ad 	.word	0x080087ad
 8008790:	08008867 	.word	0x08008867
 8008794:	080088d1 	.word	0x080088d1
 8008798:	0800895b 	.word	0x0800895b
 800879c:	080089c5 	.word	0x080089c5
 80087a0:	08008a35 	.word	0x08008a35
 80087a4:	08008a7b 	.word	0x08008a7b
 80087a8:	08008ac1 	.word	0x08008ac1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80087ac:	2108      	movs	r1, #8
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa4c 	bl	8008c4c <USBH_Get_DevDesc>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d12e      	bne.n	800881c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7919      	ldrb	r1, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	9201      	str	r2, [sp, #4]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4603      	mov	r3, r0
 80087ec:	2280      	movs	r2, #128	@ 0x80
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f8dc 	bl	80099ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7959      	ldrb	r1, [r3, #5]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008808:	9202      	str	r2, [sp, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	9201      	str	r2, [sp, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4603      	mov	r3, r0
 8008812:	2200      	movs	r2, #0
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f8c9 	bl	80099ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800881a:	e173      	b.n	8008b04 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b03      	cmp	r3, #3
 8008820:	f040 8170 	bne.w	8008b04 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800882a:	3301      	adds	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800883a:	2b03      	cmp	r3, #3
 800883c:	d903      	bls.n	8008846 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	220d      	movs	r2, #13
 8008842:	701a      	strb	r2, [r3, #0]
      break;
 8008844:	e15e      	b.n	8008b04 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f8fd 	bl	8009a4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f8f7 	bl	8009a4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
      break;
 8008864:	e14e      	b.n	8008b04 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008866:	2112      	movs	r1, #18
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9ef 	bl	8008c4c <USBH_Get_DevDesc>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800887e:	e143      	b.n	8008b08 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b03      	cmp	r3, #3
 8008884:	f040 8140 	bne.w	8008b08 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800888e:	3301      	adds	r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d903      	bls.n	80088aa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	220d      	movs	r2, #13
 80088a6:	701a      	strb	r2, [r3, #0]
      break;
 80088a8:	e12e      	b.n	8008b08 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	795b      	ldrb	r3, [r3, #5]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 f8cb 	bl	8009a4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	791b      	ldrb	r3, [r3, #4]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f8c5 	bl	8009a4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
      break;
 80088ce:	e11b      	b.n	8008b08 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80088d0:	2101      	movs	r1, #1
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa79 	bl	8008dca <USBH_SetAddress>
 80088d8:	4603      	mov	r3, r0
 80088da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d130      	bne.n	8008944 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80088e2:	2002      	movs	r0, #2
 80088e4:	f001 fbab 	bl	800a03e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2203      	movs	r2, #3
 80088f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7919      	ldrb	r1, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800890a:	9202      	str	r2, [sp, #8]
 800890c:	2200      	movs	r2, #0
 800890e:	9201      	str	r2, [sp, #4]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4603      	mov	r3, r0
 8008914:	2280      	movs	r2, #128	@ 0x80
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 f848 	bl	80099ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7959      	ldrb	r1, [r3, #5]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008930:	9202      	str	r2, [sp, #8]
 8008932:	2200      	movs	r2, #0
 8008934:	9201      	str	r2, [sp, #4]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4603      	mov	r3, r0
 800893a:	2200      	movs	r2, #0
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f835 	bl	80099ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008942:	e0e3      	b.n	8008b0c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b03      	cmp	r3, #3
 8008948:	f040 80e0 	bne.w	8008b0c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	220d      	movs	r2, #13
 8008950:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
      break;
 8008958:	e0d8      	b.n	8008b0c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800895a:	2109      	movs	r1, #9
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f9a1 	bl	8008ca4 <USBH_Get_CfgDesc>
 8008962:	4603      	mov	r3, r0
 8008964:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2204      	movs	r2, #4
 8008970:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008972:	e0cd      	b.n	8008b10 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b03      	cmp	r3, #3
 8008978:	f040 80ca 	bne.w	8008b10 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008982:	3301      	adds	r3, #1
 8008984:	b2da      	uxtb	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008992:	2b03      	cmp	r3, #3
 8008994:	d903      	bls.n	800899e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	220d      	movs	r2, #13
 800899a:	701a      	strb	r2, [r3, #0]
      break;
 800899c:	e0b8      	b.n	8008b10 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	795b      	ldrb	r3, [r3, #5]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 f851 	bl	8009a4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	791b      	ldrb	r3, [r3, #4]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 f84b 	bl	8009a4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	701a      	strb	r2, [r3, #0]
      break;
 80089c2:	e0a5      	b.n	8008b10 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f969 	bl	8008ca4 <USBH_Get_CfgDesc>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2205      	movs	r2, #5
 80089e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089e2:	e097      	b.n	8008b14 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	f040 8094 	bne.w	8008b14 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089f2:	3301      	adds	r3, #1
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d903      	bls.n	8008a0e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	220d      	movs	r2, #13
 8008a0a:	701a      	strb	r2, [r3, #0]
      break;
 8008a0c:	e082      	b.n	8008b14 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	795b      	ldrb	r3, [r3, #5]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f819 	bl	8009a4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	791b      	ldrb	r3, [r3, #4]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f813 	bl	8009a4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
      break;
 8008a32:	e06f      	b.n	8008b14 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d019      	beq.n	8008a72 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a4a:	23ff      	movs	r3, #255	@ 0xff
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f953 	bl	8008cf8 <USBH_Get_StringDesc>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2206      	movs	r2, #6
 8008a60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a62:	e059      	b.n	8008b18 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d156      	bne.n	8008b18 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	705a      	strb	r2, [r3, #1]
      break;
 8008a70:	e052      	b.n	8008b18 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2206      	movs	r2, #6
 8008a76:	705a      	strb	r2, [r3, #1]
      break;
 8008a78:	e04e      	b.n	8008b18 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d019      	beq.n	8008ab8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a90:	23ff      	movs	r3, #255	@ 0xff
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f930 	bl	8008cf8 <USBH_Get_StringDesc>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2207      	movs	r2, #7
 8008aa6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008aa8:	e038      	b.n	8008b1c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d135      	bne.n	8008b1c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2207      	movs	r2, #7
 8008ab4:	705a      	strb	r2, [r3, #1]
      break;
 8008ab6:	e031      	b.n	8008b1c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2207      	movs	r2, #7
 8008abc:	705a      	strb	r2, [r3, #1]
      break;
 8008abe:	e02d      	b.n	8008b1c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d017      	beq.n	8008afa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ad6:	23ff      	movs	r3, #255	@ 0xff
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f90d 	bl	8008cf8 <USBH_Get_StringDesc>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008aec:	e018      	b.n	8008b20 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d115      	bne.n	8008b20 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
      break;
 8008af8:	e012      	b.n	8008b20 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
      break;
 8008afe:	e00f      	b.n	8008b20 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008b00:	bf00      	nop
 8008b02:	e00e      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b04:	bf00      	nop
 8008b06:	e00c      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e00a      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e008      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b10:	bf00      	nop
 8008b12:	e006      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b14:	bf00      	nop
 8008b16:	e004      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b18:	bf00      	nop
 8008b1a:	e002      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e000      	b.n	8008b22 <USBH_HandleEnum+0x3b6>
      break;
 8008b20:	bf00      	nop
  }
  return Status;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f804 	bl	8008b6e <USBH_HandleSof>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b0b      	cmp	r3, #11
 8008b7e:	d10a      	bne.n	8008b96 <USBH_HandleSof+0x28>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
  }
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008bae:	bf00      	nop
}
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008bca:	bf00      	nop
}
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f8be 	bl	8009da6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	791b      	ldrb	r3, [r3, #4]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 ff0b 	bl	8009a4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	795b      	ldrb	r3, [r3, #5]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 ff05 	bl	8009a4c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c5e:	d901      	bls.n	8008c64 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e01b      	b.n	8008c9c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c74:	2100      	movs	r1, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f872 	bl	8008d60 <USBH_GetDescriptor>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c8c:	887a      	ldrh	r2, [r7, #2]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f929 	bl	8008ee8 <USBH_ParseDevDesc>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	331c      	adds	r3, #28
 8008cb4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008cb6:	887b      	ldrh	r3, [r7, #2]
 8008cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cbc:	d901      	bls.n	8008cc2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e016      	b.n	8008cf0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008cc2:	887b      	ldrh	r3, [r7, #2]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f846 	bl	8008d60 <USBH_GetDescriptor>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d107      	bne.n	8008cee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008cde:	887b      	ldrh	r3, [r7, #2]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9af 	bl	8009048 <USBH_ParseCfgDesc>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	607a      	str	r2, [r7, #4]
 8008d02:	461a      	mov	r2, r3
 8008d04:	460b      	mov	r3, r1
 8008d06:	72fb      	strb	r3, [r7, #11]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008d0c:	893b      	ldrh	r3, [r7, #8]
 8008d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d12:	d802      	bhi.n	8008d1a <USBH_Get_StringDesc+0x22>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e01c      	b.n	8008d58 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008d26:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d2e:	893b      	ldrh	r3, [r7, #8]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	460b      	mov	r3, r1
 8008d34:	2100      	movs	r1, #0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f812 	bl	8008d60 <USBH_GetDescriptor>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d107      	bne.n	8008d56 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d4c:	893a      	ldrh	r2, [r7, #8]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fb8d 	bl	8009470 <USBH_ParseStringDesc>
  }

  return status;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	72fb      	strb	r3, [r7, #11]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	789b      	ldrb	r3, [r3, #2]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d11c      	bne.n	8008db4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
 8008d7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2206      	movs	r2, #6
 8008d8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	893a      	ldrh	r2, [r7, #8]
 8008d90:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008d92:	893b      	ldrh	r3, [r7, #8]
 8008d94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d9c:	d104      	bne.n	8008da8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f240 4209 	movw	r2, #1033	@ 0x409
 8008da4:	829a      	strh	r2, [r3, #20]
 8008da6:	e002      	b.n	8008dae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8b3a      	ldrh	r2, [r7, #24]
 8008db2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008db4:	8b3b      	ldrh	r3, [r7, #24]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fba5 	bl	800950a <USBH_CtlReq>
 8008dc0:	4603      	mov	r3, r0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	789b      	ldrb	r3, [r3, #2]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d10f      	bne.n	8008dfe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2205      	movs	r2, #5
 8008de8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb81 	bl	800950a <USBH_CtlReq>
 8008e08:	4603      	mov	r3, r0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	789b      	ldrb	r3, [r3, #2]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10e      	bne.n	8008e44 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2209      	movs	r2, #9
 8008e30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	887a      	ldrh	r2, [r7, #2]
 8008e36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fb5e 	bl	800950a <USBH_CtlReq>
 8008e4e:	4603      	mov	r3, r0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	789b      	ldrb	r3, [r3, #2]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10f      	bne.n	8008e8c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2203      	movs	r2, #3
 8008e76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb3a 	bl	800950a <USBH_CtlReq>
 8008e96:	4603      	mov	r3, r0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	789b      	ldrb	r3, [r3, #2]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d10f      	bne.n	8008ed4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fb16 	bl	800950a <USBH_CtlReq>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008efc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e094      	b.n	8009036 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781a      	ldrb	r2, [r3, #0]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	785a      	ldrb	r2, [r3, #1]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3302      	adds	r3, #2
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3303      	adds	r3, #3
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	791a      	ldrb	r2, [r3, #4]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	795a      	ldrb	r2, [r3, #5]
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	799a      	ldrb	r2, [r3, #6]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	79da      	ldrb	r2, [r3, #7]
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d11b      	bne.n	8008fa2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	79db      	ldrb	r3, [r3, #7]
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	dc0f      	bgt.n	8008f92 <USBH_ParseDevDesc+0xaa>
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	db0f      	blt.n	8008f96 <USBH_ParseDevDesc+0xae>
 8008f76:	3b08      	subs	r3, #8
 8008f78:	4a32      	ldr	r2, [pc, #200]	@ (8009044 <USBH_ParseDevDesc+0x15c>)
 8008f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bf14      	ite	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	2300      	moveq	r3, #0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <USBH_ParseDevDesc+0xb6>
 8008f90:	e001      	b.n	8008f96 <USBH_ParseDevDesc+0xae>
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d003      	beq.n	8008f9e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2208      	movs	r2, #8
 8008f9a:	71da      	strb	r2, [r3, #7]
        break;
 8008f9c:	e000      	b.n	8008fa0 <USBH_ParseDevDesc+0xb8>
        break;
 8008f9e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008fa0:	e00e      	b.n	8008fc0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d107      	bne.n	8008fbc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	79db      	ldrb	r3, [r3, #7]
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d005      	beq.n	8008fc0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	71da      	strb	r2, [r3, #7]
 8008fba:	e001      	b.n	8008fc0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d936      	bls.n	8009034 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3309      	adds	r3, #9
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	330a      	adds	r3, #10
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	330b      	adds	r3, #11
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	330d      	adds	r3, #13
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	b29b      	uxth	r3, r3
 800900c:	4313      	orrs	r3, r2
 800900e:	b29a      	uxth	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	7b9a      	ldrb	r2, [r3, #14]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	7bda      	ldrb	r2, [r3, #15]
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	7c1a      	ldrb	r2, [r3, #16]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	7c5a      	ldrb	r2, [r3, #17]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
}
 8009036:	4618      	mov	r0, r3
 8009038:	371c      	adds	r7, #28
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	01000101 	.word	0x01000101

08009048 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08c      	sub	sp, #48	@ 0x30
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800905c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	e0da      	b.n	8009230 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800907e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b09      	cmp	r3, #9
 8009084:	d002      	beq.n	800908c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	2209      	movs	r2, #9
 800908a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	785a      	ldrb	r2, [r3, #1]
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	3302      	adds	r3, #2
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	3303      	adds	r3, #3
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4313      	orrs	r3, r2
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b6:	bf28      	it	cs
 80090b8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	791a      	ldrb	r2, [r3, #4]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	795a      	ldrb	r2, [r3, #5]
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	799a      	ldrb	r2, [r3, #6]
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	79da      	ldrb	r2, [r3, #7]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	7a1a      	ldrb	r2, [r3, #8]
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	f240 809d 	bls.w	800922c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80090f2:	2309      	movs	r3, #9
 80090f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090fa:	e081      	b.n	8009200 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090fc:	f107 0316 	add.w	r3, r7, #22
 8009100:	4619      	mov	r1, r3
 8009102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009104:	f000 f9e7 	bl	80094d6 <USBH_GetNextDesc>
 8009108:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	2b04      	cmp	r3, #4
 8009110:	d176      	bne.n	8009200 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b09      	cmp	r3, #9
 8009118:	d002      	beq.n	8009120 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800911a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911c:	2209      	movs	r2, #9
 800911e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009124:	221a      	movs	r2, #26
 8009126:	fb02 f303 	mul.w	r3, r2, r3
 800912a:	3308      	adds	r3, #8
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	4413      	add	r3, r2
 8009130:	3302      	adds	r3, #2
 8009132:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009136:	69f8      	ldr	r0, [r7, #28]
 8009138:	f000 f87e 	bl	8009238 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009146:	e043      	b.n	80091d0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009148:	f107 0316 	add.w	r3, r7, #22
 800914c:	4619      	mov	r1, r3
 800914e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009150:	f000 f9c1 	bl	80094d6 <USBH_GetNextDesc>
 8009154:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b05      	cmp	r3, #5
 800915c:	d138      	bne.n	80091d0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	795b      	ldrb	r3, [r3, #5]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d113      	bne.n	800918e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800916a:	2b02      	cmp	r3, #2
 800916c:	d003      	beq.n	8009176 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	2b03      	cmp	r3, #3
 8009174:	d10b      	bne.n	800918e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	79db      	ldrb	r3, [r3, #7]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <USBH_ParseCfgDesc+0x14e>
 800917e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b09      	cmp	r3, #9
 8009184:	d007      	beq.n	8009196 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	2209      	movs	r2, #9
 800918a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800918c:	e003      	b.n	8009196 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	2207      	movs	r2, #7
 8009192:	701a      	strb	r2, [r3, #0]
 8009194:	e000      	b.n	8009198 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009196:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800919c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091a0:	3201      	adds	r2, #1
 80091a2:	00d2      	lsls	r2, r2, #3
 80091a4:	211a      	movs	r1, #26
 80091a6:	fb01 f303 	mul.w	r3, r1, r3
 80091aa:	4413      	add	r3, r2
 80091ac:	3308      	adds	r3, #8
 80091ae:	6a3a      	ldr	r2, [r7, #32]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80091b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f870 	bl	80092a0 <USBH_ParseEPDesc>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80091c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091ca:	3301      	adds	r3, #1
 80091cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	791b      	ldrb	r3, [r3, #4]
 80091d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091d8:	429a      	cmp	r2, r3
 80091da:	d204      	bcs.n	80091e6 <USBH_ParseCfgDesc+0x19e>
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	885a      	ldrh	r2, [r3, #2]
 80091e0:	8afb      	ldrh	r3, [r7, #22]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d8b0      	bhi.n	8009148 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	791b      	ldrb	r3, [r3, #4]
 80091ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d201      	bcs.n	80091f6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e01c      	b.n	8009230 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80091f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091fa:	3301      	adds	r3, #1
 80091fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009204:	2b01      	cmp	r3, #1
 8009206:	d805      	bhi.n	8009214 <USBH_ParseCfgDesc+0x1cc>
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	885a      	ldrh	r2, [r3, #2]
 800920c:	8afb      	ldrh	r3, [r7, #22]
 800920e:	429a      	cmp	r2, r3
 8009210:	f63f af74 	bhi.w	80090fc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b02      	cmp	r3, #2
 800921a:	bf28      	it	cs
 800921c:	2302      	movcs	r3, #2
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009224:	429a      	cmp	r2, r3
 8009226:	d201      	bcs.n	800922c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009228:	2303      	movs	r3, #3
 800922a:	e001      	b.n	8009230 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800922c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009230:	4618      	mov	r0, r3
 8009232:	3730      	adds	r7, #48	@ 0x30
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	785a      	ldrb	r2, [r3, #1]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	789a      	ldrb	r2, [r3, #2]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	78da      	ldrb	r2, [r3, #3]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	3304      	adds	r3, #4
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b02      	cmp	r3, #2
 800926a:	bf28      	it	cs
 800926c:	2302      	movcs	r3, #2
 800926e:	b2da      	uxtb	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	795a      	ldrb	r2, [r3, #5]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	799a      	ldrb	r2, [r3, #6]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	79da      	ldrb	r2, [r3, #7]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	7a1a      	ldrb	r2, [r3, #8]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	721a      	strb	r2, [r3, #8]
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	785a      	ldrb	r2, [r3, #1]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	789a      	ldrb	r2, [r3, #2]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	78da      	ldrb	r2, [r3, #3]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3304      	adds	r3, #4
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3305      	adds	r3, #5
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	799a      	ldrb	r2, [r3, #6]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	889b      	ldrh	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d009      	beq.n	800930e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80092fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009302:	d804      	bhi.n	800930e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800930c:	d901      	bls.n	8009312 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800930e:	2303      	movs	r3, #3
 8009310:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009318:	2b00      	cmp	r3, #0
 800931a:	d136      	bne.n	800938a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	78db      	ldrb	r3, [r3, #3]
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d108      	bne.n	800933a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	889b      	ldrh	r3, [r3, #4]
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	f240 8097 	bls.w	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009334:	2303      	movs	r3, #3
 8009336:	75fb      	strb	r3, [r7, #23]
 8009338:	e093      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	78db      	ldrb	r3, [r3, #3]
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d107      	bne.n	8009356 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	889b      	ldrh	r3, [r3, #4]
 800934a:	2b40      	cmp	r3, #64	@ 0x40
 800934c:	f240 8089 	bls.w	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009350:	2303      	movs	r3, #3
 8009352:	75fb      	strb	r3, [r7, #23]
 8009354:	e085      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	78db      	ldrb	r3, [r3, #3]
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b01      	cmp	r3, #1
 8009360:	d005      	beq.n	800936e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	78db      	ldrb	r3, [r3, #3]
 8009366:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800936a:	2b03      	cmp	r3, #3
 800936c:	d10a      	bne.n	8009384 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	799b      	ldrb	r3, [r3, #6]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <USBH_ParseEPDesc+0xde>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	799b      	ldrb	r3, [r3, #6]
 800937a:	2b10      	cmp	r3, #16
 800937c:	d970      	bls.n	8009460 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800937e:	2303      	movs	r3, #3
 8009380:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009382:	e06d      	b.n	8009460 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009384:	2303      	movs	r3, #3
 8009386:	75fb      	strb	r3, [r7, #23]
 8009388:	e06b      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009390:	2b01      	cmp	r3, #1
 8009392:	d13c      	bne.n	800940e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	78db      	ldrb	r3, [r3, #3]
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d005      	beq.n	80093ac <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	78db      	ldrb	r3, [r3, #3]
 80093a4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	889b      	ldrh	r3, [r3, #4]
 80093b0:	2b40      	cmp	r3, #64	@ 0x40
 80093b2:	d956      	bls.n	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093b4:	2303      	movs	r3, #3
 80093b6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093b8:	e053      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	78db      	ldrb	r3, [r3, #3]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d10e      	bne.n	80093e4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	799b      	ldrb	r3, [r3, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80093d2:	2b10      	cmp	r3, #16
 80093d4:	d803      	bhi.n	80093de <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80093da:	2b40      	cmp	r3, #64	@ 0x40
 80093dc:	d941      	bls.n	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093de:	2303      	movs	r3, #3
 80093e0:	75fb      	strb	r3, [r7, #23]
 80093e2:	e03e      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	78db      	ldrb	r3, [r3, #3]
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d10b      	bne.n	8009408 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	799b      	ldrb	r3, [r3, #6]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <USBH_ParseEPDesc+0x162>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	889b      	ldrh	r3, [r3, #4]
 80093fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009400:	d32f      	bcc.n	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009402:	2303      	movs	r3, #3
 8009404:	75fb      	strb	r3, [r7, #23]
 8009406:	e02c      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009408:	2303      	movs	r3, #3
 800940a:	75fb      	strb	r3, [r7, #23]
 800940c:	e029      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009414:	2b02      	cmp	r3, #2
 8009416:	d120      	bne.n	800945a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	78db      	ldrb	r3, [r3, #3]
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	889b      	ldrh	r3, [r3, #4]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d01a      	beq.n	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800942c:	2303      	movs	r3, #3
 800942e:	75fb      	strb	r3, [r7, #23]
 8009430:	e017      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	78db      	ldrb	r3, [r3, #3]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d10a      	bne.n	8009454 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	799b      	ldrb	r3, [r3, #6]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <USBH_ParseEPDesc+0x1ae>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	889b      	ldrh	r3, [r3, #4]
 800944a:	2b08      	cmp	r3, #8
 800944c:	d909      	bls.n	8009462 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800944e:	2303      	movs	r3, #3
 8009450:	75fb      	strb	r3, [r7, #23]
 8009452:	e006      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009454:	2303      	movs	r3, #3
 8009456:	75fb      	strb	r3, [r7, #23]
 8009458:	e003      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800945a:	2303      	movs	r3, #3
 800945c:	75fb      	strb	r3, [r7, #23]
 800945e:	e000      	b.n	8009462 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009460:	bf00      	nop
  }

  return status;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
}
 8009464:	4618      	mov	r0, r3
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d120      	bne.n	80094ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	1e9a      	subs	r2, r3, #2
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	4293      	cmp	r3, r2
 8009492:	bf28      	it	cs
 8009494:	4613      	movcs	r3, r2
 8009496:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3302      	adds	r3, #2
 800949c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800949e:	2300      	movs	r3, #0
 80094a0:	82fb      	strh	r3, [r7, #22]
 80094a2:	e00b      	b.n	80094bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094a4:	8afb      	ldrh	r3, [r7, #22]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	781a      	ldrb	r2, [r3, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094b6:	8afb      	ldrh	r3, [r7, #22]
 80094b8:	3302      	adds	r3, #2
 80094ba:	82fb      	strh	r3, [r7, #22]
 80094bc:	8afa      	ldrh	r2, [r7, #22]
 80094be:	8abb      	ldrh	r3, [r7, #20]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3ef      	bcc.n	80094a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  }
}
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7812      	ldrb	r2, [r2, #0]
 80094e8:	4413      	add	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094fc:	68fb      	ldr	r3, [r7, #12]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b086      	sub	sp, #24
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	4613      	mov	r3, r2
 8009516:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009518:	2301      	movs	r3, #1
 800951a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	789b      	ldrb	r3, [r3, #2]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d002      	beq.n	800952a <USBH_CtlReq+0x20>
 8009524:	2b02      	cmp	r3, #2
 8009526:	d00f      	beq.n	8009548 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009528:	e027      	b.n	800957a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	88fa      	ldrh	r2, [r7, #6]
 8009534:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2202      	movs	r2, #2
 8009540:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
      break;
 8009546:	e018      	b.n	800957a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f81b 	bl	8009584 <USBH_HandleControl>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <USBH_CtlReq+0x54>
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d106      	bne.n	800956c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	761a      	strb	r2, [r3, #24]
      break;
 800956a:	e005      	b.n	8009578 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d102      	bne.n	8009578 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	709a      	strb	r2, [r3, #2]
      break;
 8009578:	bf00      	nop
  }
  return status;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af02      	add	r7, sp, #8
 800958a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800958c:	2301      	movs	r3, #1
 800958e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009590:	2300      	movs	r3, #0
 8009592:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7e1b      	ldrb	r3, [r3, #24]
 8009598:	3b01      	subs	r3, #1
 800959a:	2b0a      	cmp	r3, #10
 800959c:	f200 8156 	bhi.w	800984c <USBH_HandleControl+0x2c8>
 80095a0:	a201      	add	r2, pc, #4	@ (adr r2, 80095a8 <USBH_HandleControl+0x24>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	080095ef 	.word	0x080095ef
 80095b0:	08009659 	.word	0x08009659
 80095b4:	0800967f 	.word	0x0800967f
 80095b8:	080096b7 	.word	0x080096b7
 80095bc:	080096e1 	.word	0x080096e1
 80095c0:	08009733 	.word	0x08009733
 80095c4:	08009755 	.word	0x08009755
 80095c8:	08009791 	.word	0x08009791
 80095cc:	080097b7 	.word	0x080097b7
 80095d0:	080097f5 	.word	0x080097f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f103 0110 	add.w	r1, r3, #16
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	795b      	ldrb	r3, [r3, #5]
 80095de:	461a      	mov	r2, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f943 	bl	800986c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2202      	movs	r2, #2
 80095ea:	761a      	strb	r2, [r3, #24]
      break;
 80095ec:	e139      	b.n	8009862 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	795b      	ldrb	r3, [r3, #5]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fcc5 	bl	8009f84 <USBH_LL_GetURBState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d11e      	bne.n	8009642 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800960c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	8adb      	ldrh	r3, [r3, #22]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009616:	7b7b      	ldrb	r3, [r7, #13]
 8009618:	2b80      	cmp	r3, #128	@ 0x80
 800961a:	d103      	bne.n	8009624 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2203      	movs	r2, #3
 8009620:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009622:	e115      	b.n	8009850 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2205      	movs	r2, #5
 8009628:	761a      	strb	r2, [r3, #24]
      break;
 800962a:	e111      	b.n	8009850 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800962c:	7b7b      	ldrb	r3, [r7, #13]
 800962e:	2b80      	cmp	r3, #128	@ 0x80
 8009630:	d103      	bne.n	800963a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2209      	movs	r2, #9
 8009636:	761a      	strb	r2, [r3, #24]
      break;
 8009638:	e10a      	b.n	8009850 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2207      	movs	r2, #7
 800963e:	761a      	strb	r2, [r3, #24]
      break;
 8009640:	e106      	b.n	8009850 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d003      	beq.n	8009650 <USBH_HandleControl+0xcc>
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b02      	cmp	r3, #2
 800964c:	f040 8100 	bne.w	8009850 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	220b      	movs	r2, #11
 8009654:	761a      	strb	r2, [r3, #24]
      break;
 8009656:	e0fb      	b.n	8009850 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6899      	ldr	r1, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	899a      	ldrh	r2, [r3, #12]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	791b      	ldrb	r3, [r3, #4]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f93a 	bl	80098ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2204      	movs	r2, #4
 800967a:	761a      	strb	r2, [r3, #24]
      break;
 800967c:	e0f1      	b.n	8009862 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	791b      	ldrb	r3, [r3, #4]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fc7d 	bl	8009f84 <USBH_LL_GetURBState>
 800968a:	4603      	mov	r3, r0
 800968c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d102      	bne.n	800969a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2209      	movs	r2, #9
 8009698:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	2b05      	cmp	r3, #5
 800969e:	d102      	bne.n	80096a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096a0:	2303      	movs	r3, #3
 80096a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096a4:	e0d6      	b.n	8009854 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	f040 80d3 	bne.w	8009854 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	220b      	movs	r2, #11
 80096b2:	761a      	strb	r2, [r3, #24]
      break;
 80096b4:	e0ce      	b.n	8009854 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6899      	ldr	r1, [r3, #8]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	899a      	ldrh	r2, [r3, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	795b      	ldrb	r3, [r3, #5]
 80096c2:	2001      	movs	r0, #1
 80096c4:	9000      	str	r0, [sp, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8ea 	bl	80098a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2206      	movs	r2, #6
 80096dc:	761a      	strb	r2, [r3, #24]
      break;
 80096de:	e0c0      	b.n	8009862 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	795b      	ldrb	r3, [r3, #5]
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc4c 	bl	8009f84 <USBH_LL_GetURBState>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d103      	bne.n	80096fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2207      	movs	r2, #7
 80096fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096fc:	e0ac      	b.n	8009858 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b05      	cmp	r3, #5
 8009702:	d105      	bne.n	8009710 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	220c      	movs	r2, #12
 8009708:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800970a:	2303      	movs	r3, #3
 800970c:	73fb      	strb	r3, [r7, #15]
      break;
 800970e:	e0a3      	b.n	8009858 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d103      	bne.n	800971e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2205      	movs	r2, #5
 800971a:	761a      	strb	r2, [r3, #24]
      break;
 800971c:	e09c      	b.n	8009858 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b04      	cmp	r3, #4
 8009722:	f040 8099 	bne.w	8009858 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	220b      	movs	r2, #11
 800972a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800972c:	2302      	movs	r3, #2
 800972e:	73fb      	strb	r3, [r7, #15]
      break;
 8009730:	e092      	b.n	8009858 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	791b      	ldrb	r3, [r3, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f8d5 	bl	80098ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009746:	b29a      	uxth	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2208      	movs	r2, #8
 8009750:	761a      	strb	r2, [r3, #24]

      break;
 8009752:	e086      	b.n	8009862 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fc12 	bl	8009f84 <USBH_LL_GetURBState>
 8009760:	4603      	mov	r3, r0
 8009762:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d105      	bne.n	8009776 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	220d      	movs	r2, #13
 800976e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009774:	e072      	b.n	800985c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d103      	bne.n	8009784 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	220b      	movs	r2, #11
 8009780:	761a      	strb	r2, [r3, #24]
      break;
 8009782:	e06b      	b.n	800985c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b05      	cmp	r3, #5
 8009788:	d168      	bne.n	800985c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800978a:	2303      	movs	r3, #3
 800978c:	73fb      	strb	r3, [r7, #15]
      break;
 800978e:	e065      	b.n	800985c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	795b      	ldrb	r3, [r3, #5]
 8009794:	2201      	movs	r2, #1
 8009796:	9200      	str	r2, [sp, #0]
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f87f 	bl	80098a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220a      	movs	r2, #10
 80097b2:	761a      	strb	r2, [r3, #24]
      break;
 80097b4:	e055      	b.n	8009862 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	795b      	ldrb	r3, [r3, #5]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fbe1 	bl	8009f84 <USBH_LL_GetURBState>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d105      	bne.n	80097d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	220d      	movs	r2, #13
 80097d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097d6:	e043      	b.n	8009860 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d103      	bne.n	80097e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2209      	movs	r2, #9
 80097e2:	761a      	strb	r2, [r3, #24]
      break;
 80097e4:	e03c      	b.n	8009860 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d139      	bne.n	8009860 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	220b      	movs	r2, #11
 80097f0:	761a      	strb	r2, [r3, #24]
      break;
 80097f2:	e035      	b.n	8009860 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	7e5b      	ldrb	r3, [r3, #25]
 80097f8:	3301      	adds	r3, #1
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	765a      	strb	r2, [r3, #25]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	7e5b      	ldrb	r3, [r3, #25]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d806      	bhi.n	8009816 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009814:	e025      	b.n	8009862 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800981c:	2106      	movs	r1, #6
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	795b      	ldrb	r3, [r3, #5]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f90c 	bl	8009a4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	791b      	ldrb	r3, [r3, #4]
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f906 	bl	8009a4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	73fb      	strb	r3, [r7, #15]
      break;
 800984a:	e00a      	b.n	8009862 <USBH_HandleControl+0x2de>

    default:
      break;
 800984c:	bf00      	nop
 800984e:	e008      	b.n	8009862 <USBH_HandleControl+0x2de>
      break;
 8009850:	bf00      	nop
 8009852:	e006      	b.n	8009862 <USBH_HandleControl+0x2de>
      break;
 8009854:	bf00      	nop
 8009856:	e004      	b.n	8009862 <USBH_HandleControl+0x2de>
      break;
 8009858:	bf00      	nop
 800985a:	e002      	b.n	8009862 <USBH_HandleControl+0x2de>
      break;
 800985c:	bf00      	nop
 800985e:	e000      	b.n	8009862 <USBH_HandleControl+0x2de>
      break;
 8009860:	bf00      	nop
  }

  return status;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af04      	add	r7, sp, #16
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800987a:	79f9      	ldrb	r1, [r7, #7]
 800987c:	2300      	movs	r3, #0
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	2308      	movs	r3, #8
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	2300      	movs	r3, #0
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2300      	movs	r3, #0
 800988e:	2200      	movs	r2, #0
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 fb46 	bl	8009f22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af04      	add	r7, sp, #16
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4611      	mov	r1, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	460b      	mov	r3, r1
 80098b0:	80fb      	strh	r3, [r7, #6]
 80098b2:	4613      	mov	r3, r2
 80098b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098c4:	7979      	ldrb	r1, [r7, #5]
 80098c6:	7e3b      	ldrb	r3, [r7, #24]
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	2301      	movs	r3, #1
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	2200      	movs	r2, #0
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fb21 	bl	8009f22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b088      	sub	sp, #32
 80098ee:	af04      	add	r7, sp, #16
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	4611      	mov	r1, r2
 80098f6:	461a      	mov	r2, r3
 80098f8:	460b      	mov	r3, r1
 80098fa:	80fb      	strh	r3, [r7, #6]
 80098fc:	4613      	mov	r3, r2
 80098fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009900:	7979      	ldrb	r1, [r7, #5]
 8009902:	2300      	movs	r3, #0
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	9302      	str	r3, [sp, #8]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	2301      	movs	r3, #1
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	2300      	movs	r3, #0
 8009914:	2201      	movs	r2, #1
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 fb03 	bl	8009f22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800991c:	2300      	movs	r3, #0

}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b088      	sub	sp, #32
 800992a:	af04      	add	r7, sp, #16
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	4611      	mov	r1, r2
 8009932:	461a      	mov	r2, r3
 8009934:	460b      	mov	r3, r1
 8009936:	80fb      	strh	r3, [r7, #6]
 8009938:	4613      	mov	r3, r2
 800993a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800994a:	7979      	ldrb	r1, [r7, #5]
 800994c:	7e3b      	ldrb	r3, [r7, #24]
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	88fb      	ldrh	r3, [r7, #6]
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	2301      	movs	r3, #1
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2302      	movs	r3, #2
 800995e:	2200      	movs	r2, #0
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fade 	bl	8009f22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af04      	add	r7, sp, #16
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4611      	mov	r1, r2
 800997c:	461a      	mov	r2, r3
 800997e:	460b      	mov	r3, r1
 8009980:	80fb      	strh	r3, [r7, #6]
 8009982:	4613      	mov	r3, r2
 8009984:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009986:	7979      	ldrb	r1, [r7, #5]
 8009988:	2300      	movs	r3, #0
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	9302      	str	r3, [sp, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	2301      	movs	r3, #1
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	2302      	movs	r3, #2
 800999a:	2201      	movs	r2, #1
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 fac0 	bl	8009f22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af04      	add	r7, sp, #16
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	4608      	mov	r0, r1
 80099b6:	4611      	mov	r1, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	70fb      	strb	r3, [r7, #3]
 80099be:	460b      	mov	r3, r1
 80099c0:	70bb      	strb	r3, [r7, #2]
 80099c2:	4613      	mov	r3, r2
 80099c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099c6:	7878      	ldrb	r0, [r7, #1]
 80099c8:	78ba      	ldrb	r2, [r7, #2]
 80099ca:	78f9      	ldrb	r1, [r7, #3]
 80099cc:	8b3b      	ldrh	r3, [r7, #24]
 80099ce:	9302      	str	r3, [sp, #8]
 80099d0:	7d3b      	ldrb	r3, [r7, #20]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	7c3b      	ldrb	r3, [r7, #16]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4603      	mov	r3, r0
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa53 	bl	8009e86 <USBH_LL_OpenPipe>

  return USBH_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa72 	bl	8009ee4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f836 	bl	8009a88 <USBH_GetFreePipe>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a20:	89fb      	ldrh	r3, [r7, #14]
 8009a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00a      	beq.n	8009a40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	33e0      	adds	r3, #224	@ 0xe0
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	b2db      	uxtb	r3, r3
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	2b0f      	cmp	r3, #15
 8009a5c:	d80d      	bhi.n	8009a7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	33e0      	adds	r3, #224	@ 0xe0
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	33e0      	adds	r3, #224	@ 0xe0
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
 8009a98:	e00f      	b.n	8009aba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	33e0      	adds	r3, #224	@ 0xe0
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	e007      	b.n	8009ac4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	73fb      	strb	r3, [r7, #15]
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b0f      	cmp	r3, #15
 8009abe:	d9ec      	bls.n	8009a9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	490e      	ldr	r1, [pc, #56]	@ (8009b10 <MX_USB_HOST_Init+0x40>)
 8009ad8:	480e      	ldr	r0, [pc, #56]	@ (8009b14 <MX_USB_HOST_Init+0x44>)
 8009ada:	f7fe fb15 	bl	8008108 <USBH_Init>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ae4:	f7f7 f8be 	bl	8000c64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ae8:	490b      	ldr	r1, [pc, #44]	@ (8009b18 <MX_USB_HOST_Init+0x48>)
 8009aea:	480a      	ldr	r0, [pc, #40]	@ (8009b14 <MX_USB_HOST_Init+0x44>)
 8009aec:	f7fe fbb9 	bl	8008262 <USBH_RegisterClass>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009af6:	f7f7 f8b5 	bl	8000c64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009afa:	4806      	ldr	r0, [pc, #24]	@ (8009b14 <MX_USB_HOST_Init+0x44>)
 8009afc:	f7fe fc3d 	bl	800837a <USBH_Start>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b06:	f7f7 f8ad 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b0a:	bf00      	nop
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	08009b31 	.word	0x08009b31
 8009b14:	20000224 	.word	0x20000224
 8009b18:	2000000c 	.word	0x2000000c

08009b1c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b20:	4802      	ldr	r0, [pc, #8]	@ (8009b2c <MX_USB_HOST_Process+0x10>)
 8009b22:	f7fe fc3b 	bl	800839c <USBH_Process>
}
 8009b26:	bf00      	nop
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000224 	.word	0x20000224

08009b30 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d819      	bhi.n	8009b78 <USBH_UserProcess+0x48>
 8009b44:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <USBH_UserProcess+0x1c>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b61 	.word	0x08009b61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b60:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <USBH_UserProcess+0x58>)
 8009b62:	2203      	movs	r2, #3
 8009b64:	701a      	strb	r2, [r3, #0]
  break;
 8009b66:	e008      	b.n	8009b7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b68:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <USBH_UserProcess+0x58>)
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	701a      	strb	r2, [r3, #0]
  break;
 8009b6e:	e004      	b.n	8009b7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009b70:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <USBH_UserProcess+0x58>)
 8009b72:	2201      	movs	r2, #1
 8009b74:	701a      	strb	r2, [r3, #0]
  break;
 8009b76:	e000      	b.n	8009b7a <USBH_UserProcess+0x4a>

  default:
  break;
 8009b78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	200005fc 	.word	0x200005fc

08009b8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	@ 0x28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b94:	f107 0314 	add.w	r3, r7, #20
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	609a      	str	r2, [r3, #8]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bac:	d147      	bne.n	8009c3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bae:	2300      	movs	r3, #0
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	4b25      	ldr	r3, [pc, #148]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	4a24      	ldr	r2, [pc, #144]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009bb8:	f043 0301 	orr.w	r3, r3, #1
 8009bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bbe:	4b22      	ldr	r3, [pc, #136]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009bca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009bd8:	f107 0314 	add.w	r3, r7, #20
 8009bdc:	4619      	mov	r1, r3
 8009bde:	481b      	ldr	r0, [pc, #108]	@ (8009c4c <HAL_HCD_MspInit+0xc0>)
 8009be0:	f7f8 f908 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009be4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bea:	2302      	movs	r3, #2
 8009bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bf6:	230a      	movs	r3, #10
 8009bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bfa:	f107 0314 	add.w	r3, r7, #20
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4812      	ldr	r0, [pc, #72]	@ (8009c4c <HAL_HCD_MspInit+0xc0>)
 8009c02:	f7f8 f8f7 	bl	8001df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c06:	4b10      	ldr	r3, [pc, #64]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c10:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c22:	4b09      	ldr	r3, [pc, #36]	@ (8009c48 <HAL_HCD_MspInit+0xbc>)
 8009c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	2043      	movs	r0, #67	@ 0x43
 8009c34:	f7f8 f88e 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c38:	2043      	movs	r0, #67	@ 0x43
 8009c3a:	f7f8 f8b7 	bl	8001dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c3e:	bf00      	nop
 8009c40:	3728      	adds	r7, #40	@ 0x28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	40023800 	.word	0x40023800
 8009c4c:	40020000 	.word	0x40020000

08009c50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe ff73 	bl	8008b4a <USBH_LL_IncTimer>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe ffab 	bl	8008bd6 <USBH_LL_Connect>
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe ffb4 	bl	8008c04 <USBH_LL_Disconnect>
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe ff65 	bl	8008b9e <USBH_LL_PortEnabled>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe ff65 	bl	8008bba <USBH_LL_PortDisabled>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d12a      	bne.n	8009d60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d0a:	4a18      	ldr	r2, [pc, #96]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a15      	ldr	r2, [pc, #84]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d16:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d1a:	4b14      	ldr	r3, [pc, #80]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d22:	4b12      	ldr	r3, [pc, #72]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d24:	2208      	movs	r2, #8
 8009d26:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d28:	4b10      	ldr	r3, [pc, #64]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d34:	4b0d      	ldr	r3, [pc, #52]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d36:	2202      	movs	r2, #2
 8009d38:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d40:	480a      	ldr	r0, [pc, #40]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d42:	f7f8 fb1b 	bl	800237c <HAL_HCD_Init>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d4c:	f7f6 ff8a 	bl	8000c64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d50:	4806      	ldr	r0, [pc, #24]	@ (8009d6c <USBH_LL_Init+0x74>)
 8009d52:	f7f8 ff87 	bl	8002c64 <HAL_HCD_GetCurrentFrame>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fe fee6 	bl	8008b2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000600 	.word	0x20000600

08009d70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7f8 fef4 	bl	8002b74 <HAL_HCD_Start>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 f95e 	bl	800a054 <USBH_Get_USB_Status>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f8 fefc 	bl	8002bba <HAL_HCD_Stop>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f943 	bl	800a054 <USBH_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f8 ff46 	bl	8002c80 <HAL_HCD_GetCurrentSpeed>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d00c      	beq.n	8009e14 <USBH_LL_GetSpeed+0x38>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d80d      	bhi.n	8009e1a <USBH_LL_GetSpeed+0x3e>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <USBH_LL_GetSpeed+0x2c>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d003      	beq.n	8009e0e <USBH_LL_GetSpeed+0x32>
 8009e06:	e008      	b.n	8009e1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0c:	e008      	b.n	8009e20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]
    break;
 8009e12:	e005      	b.n	8009e20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e14:	2302      	movs	r3, #2
 8009e16:	73fb      	strb	r3, [r7, #15]
    break;
 8009e18:	e002      	b.n	8009e20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1e:	bf00      	nop
  }
  return  speed;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f8 fed7 	bl	8002bf4 <HAL_HCD_ResetPort>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 f901 	bl	800a054 <USBH_Get_USB_Status>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e72:	78fa      	ldrb	r2, [r7, #3]
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7f8 fedf 	bl	8002c3a <HAL_HCD_HC_GetXferCount>
 8009e7c:	4603      	mov	r3, r0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b089      	sub	sp, #36	@ 0x24
 8009e8a:	af04      	add	r7, sp, #16
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	4608      	mov	r0, r1
 8009e90:	4611      	mov	r1, r2
 8009e92:	461a      	mov	r2, r3
 8009e94:	4603      	mov	r3, r0
 8009e96:	70fb      	strb	r3, [r7, #3]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70bb      	strb	r3, [r7, #2]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009eae:	787c      	ldrb	r4, [r7, #1]
 8009eb0:	78ba      	ldrb	r2, [r7, #2]
 8009eb2:	78f9      	ldrb	r1, [r7, #3]
 8009eb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009eb6:	9302      	str	r3, [sp, #8]
 8009eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	f7f8 facb 	bl	8002460 <HAL_HCD_HC_Init>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f8bf 	bl	800a054 <USBH_Get_USB_Status>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd90      	pop	{r4, r7, pc}

08009ee4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f8 fb64 	bl	80025d0 <HAL_HCD_HC_Halt>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 f8a0 	bl	800a054 <USBH_Get_USB_Status>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f22:	b590      	push	{r4, r7, lr}
 8009f24:	b089      	sub	sp, #36	@ 0x24
 8009f26:	af04      	add	r7, sp, #16
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	461a      	mov	r2, r3
 8009f30:	4603      	mov	r3, r0
 8009f32:	70fb      	strb	r3, [r7, #3]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70bb      	strb	r3, [r7, #2]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f4a:	787c      	ldrb	r4, [r7, #1]
 8009f4c:	78ba      	ldrb	r2, [r7, #2]
 8009f4e:	78f9      	ldrb	r1, [r7, #3]
 8009f50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4623      	mov	r3, r4
 8009f66:	f7f8 fb57 	bl	8002618 <HAL_HCD_HC_SubmitRequest>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f86f 	bl	800a054 <USBH_Get_USB_Status>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f8 fe38 	bl	8002c10 <HAL_HCD_HC_GetURBState>
 8009fa0:	4603      	mov	r3, r0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d103      	bne.n	8009fc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f872 	bl	800a0ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fc8:	20c8      	movs	r0, #200	@ 0xc8
 8009fca:	f7f7 f821 	bl	8001010 <HAL_Delay>
  return USBH_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009ff0:	78fa      	ldrb	r2, [r7, #3]
 8009ff2:	68f9      	ldr	r1, [r7, #12]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	3317      	adds	r3, #23
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	68f9      	ldr	r1, [r7, #12]
 800a00a:	4613      	mov	r3, r2
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	333c      	adds	r3, #60	@ 0x3c
 800a016:	78ba      	ldrb	r2, [r7, #2]
 800a018:	701a      	strb	r2, [r3, #0]
 800a01a:	e009      	b.n	800a030 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a01c:	78fa      	ldrb	r2, [r7, #3]
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	4613      	mov	r3, r2
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	333d      	adds	r3, #61	@ 0x3d
 800a02c:	78ba      	ldrb	r2, [r7, #2]
 800a02e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7f6 ffe2 	bl	8001010 <HAL_Delay>
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d817      	bhi.n	800a098 <USBH_Get_USB_Status+0x44>
 800a068:	a201      	add	r2, pc, #4	@ (adr r2, 800a070 <USBH_Get_USB_Status+0x1c>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a087 	.word	0x0800a087
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a093 	.word	0x0800a093
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
    break;
 800a084:	e00b      	b.n	800a09e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a086:	2302      	movs	r3, #2
 800a088:	73fb      	strb	r3, [r7, #15]
    break;
 800a08a:	e008      	b.n	800a09e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
    break;
 800a090:	e005      	b.n	800a09e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a092:	2302      	movs	r3, #2
 800a094:	73fb      	strb	r3, [r7, #15]
    break;
 800a096:	e002      	b.n	800a09e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a098:	2302      	movs	r3, #2
 800a09a:	73fb      	strb	r3, [r7, #15]
    break;
 800a09c:	bf00      	nop
  }
  return usb_status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
 800a0c4:	e001      	b.n	800a0ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4803      	ldr	r0, [pc, #12]	@ (800a0e0 <MX_DriverVbusFS+0x34>)
 800a0d2:	f7f8 f927 	bl	8002324 <HAL_GPIO_WritePin>
}
 800a0d6:	bf00      	nop
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	40020800 	.word	0x40020800

0800a0e4 <malloc>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	@ (800a0f0 <malloc+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f000 b82d 	b.w	800a148 <_malloc_r>
 800a0ee:	bf00      	nop
 800a0f0:	2000002c 	.word	0x2000002c

0800a0f4 <free>:
 800a0f4:	4b02      	ldr	r3, [pc, #8]	@ (800a100 <free+0xc>)
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f000 b8f5 	b.w	800a2e8 <_free_r>
 800a0fe:	bf00      	nop
 800a100:	2000002c 	.word	0x2000002c

0800a104 <sbrk_aligned>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4e0f      	ldr	r6, [pc, #60]	@ (800a144 <sbrk_aligned+0x40>)
 800a108:	460c      	mov	r4, r1
 800a10a:	6831      	ldr	r1, [r6, #0]
 800a10c:	4605      	mov	r5, r0
 800a10e:	b911      	cbnz	r1, 800a116 <sbrk_aligned+0x12>
 800a110:	f000 f8ae 	bl	800a270 <_sbrk_r>
 800a114:	6030      	str	r0, [r6, #0]
 800a116:	4621      	mov	r1, r4
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f8a9 	bl	800a270 <_sbrk_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d103      	bne.n	800a12a <sbrk_aligned+0x26>
 800a122:	f04f 34ff 	mov.w	r4, #4294967295
 800a126:	4620      	mov	r0, r4
 800a128:	bd70      	pop	{r4, r5, r6, pc}
 800a12a:	1cc4      	adds	r4, r0, #3
 800a12c:	f024 0403 	bic.w	r4, r4, #3
 800a130:	42a0      	cmp	r0, r4
 800a132:	d0f8      	beq.n	800a126 <sbrk_aligned+0x22>
 800a134:	1a21      	subs	r1, r4, r0
 800a136:	4628      	mov	r0, r5
 800a138:	f000 f89a 	bl	800a270 <_sbrk_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d1f2      	bne.n	800a126 <sbrk_aligned+0x22>
 800a140:	e7ef      	b.n	800a122 <sbrk_aligned+0x1e>
 800a142:	bf00      	nop
 800a144:	200009e0 	.word	0x200009e0

0800a148 <_malloc_r>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	1ccd      	adds	r5, r1, #3
 800a14e:	f025 0503 	bic.w	r5, r5, #3
 800a152:	3508      	adds	r5, #8
 800a154:	2d0c      	cmp	r5, #12
 800a156:	bf38      	it	cc
 800a158:	250c      	movcc	r5, #12
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	4606      	mov	r6, r0
 800a15e:	db01      	blt.n	800a164 <_malloc_r+0x1c>
 800a160:	42a9      	cmp	r1, r5
 800a162:	d904      	bls.n	800a16e <_malloc_r+0x26>
 800a164:	230c      	movs	r3, #12
 800a166:	6033      	str	r3, [r6, #0]
 800a168:	2000      	movs	r0, #0
 800a16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a244 <_malloc_r+0xfc>
 800a172:	f000 f869 	bl	800a248 <__malloc_lock>
 800a176:	f8d8 3000 	ldr.w	r3, [r8]
 800a17a:	461c      	mov	r4, r3
 800a17c:	bb44      	cbnz	r4, 800a1d0 <_malloc_r+0x88>
 800a17e:	4629      	mov	r1, r5
 800a180:	4630      	mov	r0, r6
 800a182:	f7ff ffbf 	bl	800a104 <sbrk_aligned>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	4604      	mov	r4, r0
 800a18a:	d158      	bne.n	800a23e <_malloc_r+0xf6>
 800a18c:	f8d8 4000 	ldr.w	r4, [r8]
 800a190:	4627      	mov	r7, r4
 800a192:	2f00      	cmp	r7, #0
 800a194:	d143      	bne.n	800a21e <_malloc_r+0xd6>
 800a196:	2c00      	cmp	r4, #0
 800a198:	d04b      	beq.n	800a232 <_malloc_r+0xea>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	4639      	mov	r1, r7
 800a19e:	4630      	mov	r0, r6
 800a1a0:	eb04 0903 	add.w	r9, r4, r3
 800a1a4:	f000 f864 	bl	800a270 <_sbrk_r>
 800a1a8:	4581      	cmp	r9, r0
 800a1aa:	d142      	bne.n	800a232 <_malloc_r+0xea>
 800a1ac:	6821      	ldr	r1, [r4, #0]
 800a1ae:	1a6d      	subs	r5, r5, r1
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7ff ffa6 	bl	800a104 <sbrk_aligned>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d03a      	beq.n	800a232 <_malloc_r+0xea>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	442b      	add	r3, r5
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	bb62      	cbnz	r2, 800a224 <_malloc_r+0xdc>
 800a1ca:	f8c8 7000 	str.w	r7, [r8]
 800a1ce:	e00f      	b.n	800a1f0 <_malloc_r+0xa8>
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	1b52      	subs	r2, r2, r5
 800a1d4:	d420      	bmi.n	800a218 <_malloc_r+0xd0>
 800a1d6:	2a0b      	cmp	r2, #11
 800a1d8:	d917      	bls.n	800a20a <_malloc_r+0xc2>
 800a1da:	1961      	adds	r1, r4, r5
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	6025      	str	r5, [r4, #0]
 800a1e0:	bf18      	it	ne
 800a1e2:	6059      	strne	r1, [r3, #4]
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	bf08      	it	eq
 800a1e8:	f8c8 1000 	streq.w	r1, [r8]
 800a1ec:	5162      	str	r2, [r4, r5]
 800a1ee:	604b      	str	r3, [r1, #4]
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 f82f 	bl	800a254 <__malloc_unlock>
 800a1f6:	f104 000b 	add.w	r0, r4, #11
 800a1fa:	1d23      	adds	r3, r4, #4
 800a1fc:	f020 0007 	bic.w	r0, r0, #7
 800a200:	1ac2      	subs	r2, r0, r3
 800a202:	bf1c      	itt	ne
 800a204:	1a1b      	subne	r3, r3, r0
 800a206:	50a3      	strne	r3, [r4, r2]
 800a208:	e7af      	b.n	800a16a <_malloc_r+0x22>
 800a20a:	6862      	ldr	r2, [r4, #4]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	bf0c      	ite	eq
 800a210:	f8c8 2000 	streq.w	r2, [r8]
 800a214:	605a      	strne	r2, [r3, #4]
 800a216:	e7eb      	b.n	800a1f0 <_malloc_r+0xa8>
 800a218:	4623      	mov	r3, r4
 800a21a:	6864      	ldr	r4, [r4, #4]
 800a21c:	e7ae      	b.n	800a17c <_malloc_r+0x34>
 800a21e:	463c      	mov	r4, r7
 800a220:	687f      	ldr	r7, [r7, #4]
 800a222:	e7b6      	b.n	800a192 <_malloc_r+0x4a>
 800a224:	461a      	mov	r2, r3
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	42a3      	cmp	r3, r4
 800a22a:	d1fb      	bne.n	800a224 <_malloc_r+0xdc>
 800a22c:	2300      	movs	r3, #0
 800a22e:	6053      	str	r3, [r2, #4]
 800a230:	e7de      	b.n	800a1f0 <_malloc_r+0xa8>
 800a232:	230c      	movs	r3, #12
 800a234:	6033      	str	r3, [r6, #0]
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f80c 	bl	800a254 <__malloc_unlock>
 800a23c:	e794      	b.n	800a168 <_malloc_r+0x20>
 800a23e:	6005      	str	r5, [r0, #0]
 800a240:	e7d6      	b.n	800a1f0 <_malloc_r+0xa8>
 800a242:	bf00      	nop
 800a244:	200009e4 	.word	0x200009e4

0800a248 <__malloc_lock>:
 800a248:	4801      	ldr	r0, [pc, #4]	@ (800a250 <__malloc_lock+0x8>)
 800a24a:	f000 b84b 	b.w	800a2e4 <__retarget_lock_acquire_recursive>
 800a24e:	bf00      	nop
 800a250:	20000b24 	.word	0x20000b24

0800a254 <__malloc_unlock>:
 800a254:	4801      	ldr	r0, [pc, #4]	@ (800a25c <__malloc_unlock+0x8>)
 800a256:	f000 b846 	b.w	800a2e6 <__retarget_lock_release_recursive>
 800a25a:	bf00      	nop
 800a25c:	20000b24 	.word	0x20000b24

0800a260 <memset>:
 800a260:	4402      	add	r2, r0
 800a262:	4603      	mov	r3, r0
 800a264:	4293      	cmp	r3, r2
 800a266:	d100      	bne.n	800a26a <memset+0xa>
 800a268:	4770      	bx	lr
 800a26a:	f803 1b01 	strb.w	r1, [r3], #1
 800a26e:	e7f9      	b.n	800a264 <memset+0x4>

0800a270 <_sbrk_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d06      	ldr	r5, [pc, #24]	@ (800a28c <_sbrk_r+0x1c>)
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	602b      	str	r3, [r5, #0]
 800a27c:	f7f6 fde4 	bl	8000e48 <_sbrk>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_sbrk_r+0x1a>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	b103      	cbz	r3, 800a28a <_sbrk_r+0x1a>
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	20000b20 	.word	0x20000b20

0800a290 <__errno>:
 800a290:	4b01      	ldr	r3, [pc, #4]	@ (800a298 <__errno+0x8>)
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	2000002c 	.word	0x2000002c

0800a29c <__libc_init_array>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	4d0d      	ldr	r5, [pc, #52]	@ (800a2d4 <__libc_init_array+0x38>)
 800a2a0:	4c0d      	ldr	r4, [pc, #52]	@ (800a2d8 <__libc_init_array+0x3c>)
 800a2a2:	1b64      	subs	r4, r4, r5
 800a2a4:	10a4      	asrs	r4, r4, #2
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	42a6      	cmp	r6, r4
 800a2aa:	d109      	bne.n	800a2c0 <__libc_init_array+0x24>
 800a2ac:	4d0b      	ldr	r5, [pc, #44]	@ (800a2dc <__libc_init_array+0x40>)
 800a2ae:	4c0c      	ldr	r4, [pc, #48]	@ (800a2e0 <__libc_init_array+0x44>)
 800a2b0:	f000 f864 	bl	800a37c <_init>
 800a2b4:	1b64      	subs	r4, r4, r5
 800a2b6:	10a4      	asrs	r4, r4, #2
 800a2b8:	2600      	movs	r6, #0
 800a2ba:	42a6      	cmp	r6, r4
 800a2bc:	d105      	bne.n	800a2ca <__libc_init_array+0x2e>
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c4:	4798      	blx	r3
 800a2c6:	3601      	adds	r6, #1
 800a2c8:	e7ee      	b.n	800a2a8 <__libc_init_array+0xc>
 800a2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ce:	4798      	blx	r3
 800a2d0:	3601      	adds	r6, #1
 800a2d2:	e7f2      	b.n	800a2ba <__libc_init_array+0x1e>
 800a2d4:	0800a5bc 	.word	0x0800a5bc
 800a2d8:	0800a5bc 	.word	0x0800a5bc
 800a2dc:	0800a5bc 	.word	0x0800a5bc
 800a2e0:	0800a5c0 	.word	0x0800a5c0

0800a2e4 <__retarget_lock_acquire_recursive>:
 800a2e4:	4770      	bx	lr

0800a2e6 <__retarget_lock_release_recursive>:
 800a2e6:	4770      	bx	lr

0800a2e8 <_free_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	d041      	beq.n	800a374 <_free_r+0x8c>
 800a2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2f4:	1f0c      	subs	r4, r1, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bfb8      	it	lt
 800a2fa:	18e4      	addlt	r4, r4, r3
 800a2fc:	f7ff ffa4 	bl	800a248 <__malloc_lock>
 800a300:	4a1d      	ldr	r2, [pc, #116]	@ (800a378 <_free_r+0x90>)
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	b933      	cbnz	r3, 800a314 <_free_r+0x2c>
 800a306:	6063      	str	r3, [r4, #4]
 800a308:	6014      	str	r4, [r2, #0]
 800a30a:	4628      	mov	r0, r5
 800a30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a310:	f7ff bfa0 	b.w	800a254 <__malloc_unlock>
 800a314:	42a3      	cmp	r3, r4
 800a316:	d908      	bls.n	800a32a <_free_r+0x42>
 800a318:	6820      	ldr	r0, [r4, #0]
 800a31a:	1821      	adds	r1, r4, r0
 800a31c:	428b      	cmp	r3, r1
 800a31e:	bf01      	itttt	eq
 800a320:	6819      	ldreq	r1, [r3, #0]
 800a322:	685b      	ldreq	r3, [r3, #4]
 800a324:	1809      	addeq	r1, r1, r0
 800a326:	6021      	streq	r1, [r4, #0]
 800a328:	e7ed      	b.n	800a306 <_free_r+0x1e>
 800a32a:	461a      	mov	r2, r3
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	b10b      	cbz	r3, 800a334 <_free_r+0x4c>
 800a330:	42a3      	cmp	r3, r4
 800a332:	d9fa      	bls.n	800a32a <_free_r+0x42>
 800a334:	6811      	ldr	r1, [r2, #0]
 800a336:	1850      	adds	r0, r2, r1
 800a338:	42a0      	cmp	r0, r4
 800a33a:	d10b      	bne.n	800a354 <_free_r+0x6c>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	4401      	add	r1, r0
 800a340:	1850      	adds	r0, r2, r1
 800a342:	4283      	cmp	r3, r0
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	d1e0      	bne.n	800a30a <_free_r+0x22>
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	6053      	str	r3, [r2, #4]
 800a34e:	4408      	add	r0, r1
 800a350:	6010      	str	r0, [r2, #0]
 800a352:	e7da      	b.n	800a30a <_free_r+0x22>
 800a354:	d902      	bls.n	800a35c <_free_r+0x74>
 800a356:	230c      	movs	r3, #12
 800a358:	602b      	str	r3, [r5, #0]
 800a35a:	e7d6      	b.n	800a30a <_free_r+0x22>
 800a35c:	6820      	ldr	r0, [r4, #0]
 800a35e:	1821      	adds	r1, r4, r0
 800a360:	428b      	cmp	r3, r1
 800a362:	bf04      	itt	eq
 800a364:	6819      	ldreq	r1, [r3, #0]
 800a366:	685b      	ldreq	r3, [r3, #4]
 800a368:	6063      	str	r3, [r4, #4]
 800a36a:	bf04      	itt	eq
 800a36c:	1809      	addeq	r1, r1, r0
 800a36e:	6021      	streq	r1, [r4, #0]
 800a370:	6054      	str	r4, [r2, #4]
 800a372:	e7ca      	b.n	800a30a <_free_r+0x22>
 800a374:	bd38      	pop	{r3, r4, r5, pc}
 800a376:	bf00      	nop
 800a378:	200009e4 	.word	0x200009e4

0800a37c <_init>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	bf00      	nop
 800a380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a382:	bc08      	pop	{r3}
 800a384:	469e      	mov	lr, r3
 800a386:	4770      	bx	lr

0800a388 <_fini>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	bf00      	nop
 800a38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	469e      	mov	lr, r3
 800a392:	4770      	bx	lr
