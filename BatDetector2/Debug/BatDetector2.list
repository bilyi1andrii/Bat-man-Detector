
BatDetector2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a73c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaf4  0800aaf4  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaf4  0800aaf4  0000baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aafc  0800aafc  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab00  0800ab00  0000bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800ab04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000007c  0800ab80  0000c07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800ab80  0000cb28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017796  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000452a  00000000  00000000  00023842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  00029088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b60f  00000000  00000000  00029ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da89  00000000  00000000  000454e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b821  00000000  00000000  00062f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  000fe78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  000fe840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001038d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001229  00000000  00000000  0010392e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00104b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a8bc 	.word	0x0800a8bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	0800a8bc 	.word	0x0800a8bc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f000 fdff 	bl	800112c <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fc00 	bl	8000d38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f001 f8bd 	bl	80016c8 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fbf0 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000098 	.word	0x20000098
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 fc35 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	@ 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	4b5b      	ldr	r3, [pc, #364]	@ (800077c <MX_GPIO_Init+0x188>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a5a      	ldr	r2, [pc, #360]	@ (800077c <MX_GPIO_Init+0x188>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b58      	ldr	r3, [pc, #352]	@ (800077c <MX_GPIO_Init+0x188>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	4b54      	ldr	r3, [pc, #336]	@ (800077c <MX_GPIO_Init+0x188>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a53      	ldr	r2, [pc, #332]	@ (800077c <MX_GPIO_Init+0x188>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b51      	ldr	r3, [pc, #324]	@ (800077c <MX_GPIO_Init+0x188>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b4d      	ldr	r3, [pc, #308]	@ (800077c <MX_GPIO_Init+0x188>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a4c      	ldr	r2, [pc, #304]	@ (800077c <MX_GPIO_Init+0x188>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b4a      	ldr	r3, [pc, #296]	@ (800077c <MX_GPIO_Init+0x188>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b46      	ldr	r3, [pc, #280]	@ (800077c <MX_GPIO_Init+0x188>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a45      	ldr	r2, [pc, #276]	@ (800077c <MX_GPIO_Init+0x188>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b43      	ldr	r3, [pc, #268]	@ (800077c <MX_GPIO_Init+0x188>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b3f      	ldr	r3, [pc, #252]	@ (800077c <MX_GPIO_Init+0x188>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a3e      	ldr	r2, [pc, #248]	@ (800077c <MX_GPIO_Init+0x188>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <MX_GPIO_Init+0x188>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b38      	ldr	r3, [pc, #224]	@ (800077c <MX_GPIO_Init+0x188>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a37      	ldr	r2, [pc, #220]	@ (800077c <MX_GPIO_Init+0x188>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b35      	ldr	r3, [pc, #212]	@ (800077c <MX_GPIO_Init+0x188>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4832      	ldr	r0, [pc, #200]	@ (8000780 <MX_GPIO_Init+0x18c>)
 80006b8:	f001 fe5e 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4830      	ldr	r0, [pc, #192]	@ (8000784 <MX_GPIO_Init+0x190>)
 80006c2:	f001 fe59 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80006c6:	2200      	movs	r2, #0
 80006c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80006cc:	482e      	ldr	r0, [pc, #184]	@ (8000788 <MX_GPIO_Init+0x194>)
 80006ce:	f001 fe53 	bl	8002378 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80006d2:	2304      	movs	r3, #4
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4826      	ldr	r0, [pc, #152]	@ (8000780 <MX_GPIO_Init+0x18c>)
 80006e6:	f001 fbaf 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006ea:	2308      	movs	r3, #8
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	481f      	ldr	r0, [pc, #124]	@ (8000780 <MX_GPIO_Init+0x18c>)
 8000702:	f001 fba1 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000706:	2332      	movs	r3, #50	@ 0x32
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800070a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4819      	ldr	r0, [pc, #100]	@ (8000780 <MX_GPIO_Init+0x18c>)
 800071c:	f001 fb94 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4813      	ldr	r0, [pc, #76]	@ (8000784 <MX_GPIO_Init+0x190>)
 8000738:	f001 fb86 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD13 PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 800073c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000740:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_GPIO_Init+0x194>)
 8000756:	f001 fb77 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800075a:	2320      	movs	r3, #32
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_GPIO_Init+0x194>)
 800076e:	f001 fb6b 	bl	8001e48 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00

0800078c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f003 ff41 	bl	8004650 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 fab0 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	@ (800086c <HAL_I2C_MspInit+0x84>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12c      	bne.n	8000864 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000826:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	2312      	movs	r3, #18
 800082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000838:	2304      	movs	r3, #4
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	@ (8000874 <HAL_I2C_MspInit+0x8c>)
 8000844:	f001 fb00 	bl	8001e48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 8000852:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_I2C_MspInit+0x88>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400

08000878 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_I2S2_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_I2S2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_I2S2_Init+0x50>)
 800089e:	4a0c      	ldr	r2, [pc, #48]	@ (80008d0 <MX_I2S2_Init+0x58>)
 80008a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_I2S2_Init+0x50>)
 80008b6:	f004 f893 	bl	80049e0 <HAL_I2S_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 fa3a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000134 	.word	0x20000134
 80008cc:	40003800 	.word	0x40003800
 80008d0:	00017700 	.word	0x00017700

080008d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008da:	4a14      	ldr	r2, [pc, #80]	@ (800092c <MX_I2S3_Init+0x58>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_I2S3_Init+0x54>)
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <MX_I2S3_Init+0x5c>)
 80008fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_I2S3_Init+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_I2S3_Init+0x54>)
 8000914:	f004 f864 	bl	80049e0 <HAL_I2S_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800091e:	f000 fa0b 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000017c 	.word	0x2000017c
 800092c:	40003c00 	.word	0x40003c00
 8000930:	00017700 	.word	0x00017700

08000934 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a59      	ldr	r2, [pc, #356]	@ (8000ab8 <HAL_I2S_MspInit+0x184>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d15b      	bne.n	8000a0e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	4b58      	ldr	r3, [pc, #352]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a57      	ldr	r2, [pc, #348]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b55      	ldr	r3, [pc, #340]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	4b51      	ldr	r3, [pc, #324]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a50      	ldr	r2, [pc, #320]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b4a      	ldr	r3, [pc, #296]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a49      	ldr	r2, [pc, #292]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b47      	ldr	r3, [pc, #284]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009ba:	2306      	movs	r3, #6
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 80009c6:	f001 fa3f 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 80009e6:	f001 fa2f 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fc:	2305      	movs	r3, #5
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <HAL_I2S_MspInit+0x190>)
 8000a08:	f001 fa1e 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a0c:	e04f      	b.n	8000aae <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <HAL_I2S_MspInit+0x194>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d14a      	bne.n	8000aae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a26      	ldr	r2, [pc, #152]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_I2S_MspInit+0x188>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4811      	ldr	r0, [pc, #68]	@ (8000acc <HAL_I2S_MspInit+0x198>)
 8000a88:	f001 f9de 	bl	8001e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a8c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_I2S_MspInit+0x18c>)
 8000aaa:	f001 f9cd 	bl	8001e48 <HAL_GPIO_Init>
}
 8000aae:	bf00      	nop
 8000ab0:	3738      	adds	r7, #56	@ 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40003c00 	.word	0x40003c00
 8000acc:	40020000 	.word	0x40020000

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0ca      	sub	sp, #296	@ 0x128
 8000ad4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fa93 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f8a5 	bl	8000c28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ade:	f000 f90b 	bl	8000cf8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f7ff fd87 	bl	80005f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae6:	f7ff fe51 	bl	800078c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000aea:	f7ff fec5 	bl	8000878 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000aee:	f7ff fef1 	bl	80008d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000af2:	f000 f933 	bl	8000d5c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000af6:	f009 f815 	bl	8009b24 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000afa:	f7ff fce5 	bl	80004c8 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  #define NUM_TAPS 32
  float32_t highPassCoeffs[NUM_TAPS] = {
 8000afe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 fe4a 	bl	800a7a0 <memset>
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <main+0x12c>)
 8000b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b12:	4b3b      	ldr	r3, [pc, #236]	@ (8000c00 <main+0x130>)
 8000b14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b18:	4b3a      	ldr	r3, [pc, #232]	@ (8000c04 <main+0x134>)
 8000b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c08 <main+0x138>)
 8000b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b24:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <main+0x134>)
 8000b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000b2a:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <main+0x130>)
 8000b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b30:	4b32      	ldr	r3, [pc, #200]	@ (8000bfc <main+0x12c>)
 8000b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b36:	4b35      	ldr	r3, [pc, #212]	@ (8000c0c <main+0x13c>)
 8000b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b3c:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <main+0x140>)
 8000b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000b42:	4b34      	ldr	r3, [pc, #208]	@ (8000c14 <main+0x144>)
 8000b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000b48:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <main+0x148>)
 8000b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <main+0x144>)
 8000b50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <main+0x140>)
 8000b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <main+0x13c>)
 8000b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  };
  arm_fir_instance_f32 S;
  float32_t firStateF32[NUM_TAPS + 1];

  // Initialize FIR instance
  arm_fir_init_f32(&S, NUM_TAPS, highPassCoeffs, firStateF32, 1);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8000b68:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	9100      	str	r1, [sp, #0]
 8000b70:	2120      	movs	r1, #32
 8000b72:	f009 fae1 	bl	800a138 <arm_fir_init_f32>
  while (1)
  {

    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000b76:	4829      	ldr	r0, [pc, #164]	@ (8000c1c <main+0x14c>)
 8000b78:	f000 fc36 	bl	80013e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	4826      	ldr	r0, [pc, #152]	@ (8000c1c <main+0x14c>)
 8000b82:	f000 fd09 	bl	8001598 <HAL_ADC_PollForConversion>
	  float32_t inputSample = (float32_t)HAL_ADC_GetValue(&hadc1);
 8000b86:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <main+0x14c>)
 8000b88:	f000 fd91 	bl	80016ae <HAL_ADC_GetValue>
 8000b8c:	ee07 0a90 	vmov	s15, r0
 8000b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000b9c:	edc3 7a00 	vstr	s15, [r3]
	  float32_t outputSample;

	  // Apply the FIR filter
	  arm_fir_f32(&S, &inputSample, &outputSample, 1);
 8000ba0:	1d3a      	adds	r2, r7, #4
 8000ba2:	f107 0108 	add.w	r1, r7, #8
 8000ba6:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8000baa:	2301      	movs	r3, #1
 8000bac:	f009 fad6 	bl	800a15c <arm_fir_f32>

	  uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000bb0:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <main+0x14c>)
 8000bb2:	f000 fd7c 	bl	80016ae <HAL_ADC_GetValue>
 8000bb6:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	  if (adcValue > 500.0f)
 8000bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000c20 <main+0x150>
 8000bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	dd06      	ble.n	8000be2 <main+0x112>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bda:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <main+0x154>)
 8000bdc:	f001 fbcc 	bl	8002378 <HAL_GPIO_WritePin>
 8000be0:	e005      	b.n	8000bee <main+0x11e>
	      }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <main+0x154>)
 8000bea:	f001 fbc5 	bl	8002378 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(100);
 8000bee:	2064      	movs	r0, #100	@ 0x64
 8000bf0:	f000 fa78 	bl	80010e4 <HAL_Delay>

	  /* USER CODE END WHILE */
	  MX_USB_HOST_Process();
 8000bf4:	f008 ffbc 	bl	8009b70 <MX_USB_HOST_Process>
  {
 8000bf8:	e7bd      	b.n	8000b76 <main+0xa6>
 8000bfa:	bf00      	nop
 8000bfc:	bc102de0 	.word	0xbc102de0
 8000c00:	bc28c155 	.word	0xbc28c155
 8000c04:	bc3c6a7f 	.word	0xbc3c6a7f
 8000c08:	bc463f14 	.word	0xbc463f14
 8000c0c:	3c102de0 	.word	0x3c102de0
 8000c10:	3c28c155 	.word	0x3c28c155
 8000c14:	3c3c6a7f 	.word	0x3c3c6a7f
 8000c18:	3c463f14 	.word	0x3c463f14
 8000c1c:	20000098 	.word	0x20000098
 8000c20:	43fa0000 	.word	0x43fa0000
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	@ 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f009 fdb2 	bl	800a7a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <SystemClock_Config+0xc8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <SystemClock_Config+0xc8>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <SystemClock_Config+0xc8>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c9c:	23c0      	movs	r3, #192	@ 0xc0
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fbf5 	bl	800549c <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb8:	f000 f83e 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 ff0b 	bl	8005af4 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ce4:	f000 f828 	bl	8000d38 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	@ 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000d12:	23c8      	movs	r3, #200	@ 0xc8
 8000d14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000d16:	2305      	movs	r3, #5
 8000d18:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 f99b 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d2c:	f000 f804 	bl	8000d38 <Error_Handler>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f005 fbcd 	bl	800654c <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f7ff ffbe 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001c4 	.word	0x200001c4
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	@ (8000e4c <HAL_SPI_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e22:	23e0      	movs	r3, #224	@ 0xe0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_SPI_MspInit+0x8c>)
 8000e3e:	f001 f803 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e96:	2007      	movs	r0, #7
 8000e98:	f000 ff66 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f8d1 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f001 fd4b 	bl	80029a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000600 	.word	0x20000600

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f009 fc40 	bl	800a7d0 <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20020000 	.word	0x20020000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	2000021c 	.word	0x2000021c
 8000f84:	20000b28 	.word	0x20000b28

08000f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb0:	f7ff ffea 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f009 fbff 	bl	800a7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fd77 	bl	8000ad0 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ff0:	0800ab04 	.word	0x0800ab04
  ldr r2, =_sbss
 8000ff4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ff8:	20000b28 	.word	0x20000b28

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 fe9d 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff ff10 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fee4 	bl	8001e30 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 fe92 	bl	8001da8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000220 	.word	0x20000220

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000220 	.word	0x20000220

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e14e      	b.n	80013e0 <HAL_ADC_Init+0x2b4>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a90      	ldr	r2, [pc, #576]	@ (8001388 <HAL_ADC_Init+0x25c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d004      	beq.n	8001156 <HAL_ADC_Init+0x2a>
 800114c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8001150:	488e      	ldr	r0, [pc, #568]	@ (800138c <HAL_ADC_Init+0x260>)
 8001152:	f7ff fdf7 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <HAL_ADC_Init+0x5a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001166:	d00e      	beq.n	8001186 <HAL_ADC_Init+0x5a>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001170:	d009      	beq.n	8001186 <HAL_ADC_Init+0x5a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800117a:	d004      	beq.n	8001186 <HAL_ADC_Init+0x5a>
 800117c:	f240 1143 	movw	r1, #323	@ 0x143
 8001180:	4882      	ldr	r0, [pc, #520]	@ (800138c <HAL_ADC_Init+0x260>)
 8001182:	f7ff fddf 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <HAL_ADC_Init+0x8a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001196:	d00e      	beq.n	80011b6 <HAL_ADC_Init+0x8a>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80011a0:	d009      	beq.n	80011b6 <HAL_ADC_Init+0x8a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80011aa:	d004      	beq.n	80011b6 <HAL_ADC_Init+0x8a>
 80011ac:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80011b0:	4876      	ldr	r0, [pc, #472]	@ (800138c <HAL_ADC_Init+0x260>)
 80011b2:	f7ff fdc7 	bl	8000d44 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <HAL_ADC_Init+0xa4>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d004      	beq.n	80011d0 <HAL_ADC_Init+0xa4>
 80011c6:	f240 1145 	movw	r1, #325	@ 0x145
 80011ca:	4870      	ldr	r0, [pc, #448]	@ (800138c <HAL_ADC_Init+0x260>)
 80011cc:	f7ff fdba 	bl	8000d44 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7e1b      	ldrb	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <HAL_ADC_Init+0xbe>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e1b      	ldrb	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d004      	beq.n	80011ea <HAL_ADC_Init+0xbe>
 80011e0:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80011e4:	4869      	ldr	r0, [pc, #420]	@ (800138c <HAL_ADC_Init+0x260>)
 80011e6:	f7ff fdad 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d054      	beq.n	800129c <HAL_ADC_Init+0x170>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fa:	d04f      	beq.n	800129c <HAL_ADC_Init+0x170>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001204:	d04a      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800120e:	d045      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001218:	d040      	beq.n	800129c <HAL_ADC_Init+0x170>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8001222:	d03b      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800122c:	d036      	beq.n	800129c <HAL_ADC_Init+0x170>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8001236:	d031      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001240:	d02c      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001246:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 800124a:	d027      	beq.n	800129c <HAL_ADC_Init+0x170>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8001254:	d022      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 800125e:	d01d      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001264:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8001268:	d018      	beq.n	800129c <HAL_ADC_Init+0x170>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126e:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8001272:	d013      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 800127c:	d00e      	beq.n	800129c <HAL_ADC_Init+0x170>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001286:	d009      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128c:	4a40      	ldr	r2, [pc, #256]	@ (8001390 <HAL_ADC_Init+0x264>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d004      	beq.n	800129c <HAL_ADC_Init+0x170>
 8001292:	f240 1147 	movw	r1, #327	@ 0x147
 8001296:	483d      	ldr	r0, [pc, #244]	@ (800138c <HAL_ADC_Init+0x260>)
 8001298:	f7ff fd54 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <HAL_ADC_Init+0x18c>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012ac:	d004      	beq.n	80012b8 <HAL_ADC_Init+0x18c>
 80012ae:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80012b2:	4836      	ldr	r0, [pc, #216]	@ (800138c <HAL_ADC_Init+0x260>)
 80012b4:	f7ff fd46 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_ADC_Init+0x19c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d904      	bls.n	80012d2 <HAL_ADC_Init+0x1a6>
 80012c8:	f240 1149 	movw	r1, #329	@ 0x149
 80012cc:	482f      	ldr	r0, [pc, #188]	@ (800138c <HAL_ADC_Init+0x260>)
 80012ce:	f7ff fd39 	bl	8000d44 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <HAL_ADC_Init+0x1c4>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d004      	beq.n	80012f0 <HAL_ADC_Init+0x1c4>
 80012e6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80012ea:	4828      	ldr	r0, [pc, #160]	@ (800138c <HAL_ADC_Init+0x260>)
 80012ec:	f7ff fd2a 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00c      	beq.n	8001312 <HAL_ADC_Init+0x1e6>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_ADC_Init+0x1e6>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d004      	beq.n	8001312 <HAL_ADC_Init+0x1e6>
 8001308:	f240 114b 	movw	r1, #331	@ 0x14b
 800130c:	481f      	ldr	r0, [pc, #124]	@ (800138c <HAL_ADC_Init+0x260>)
 800130e:	f7ff fd19 	bl	8000d44 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <HAL_ADC_Init+0x204>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d004      	beq.n	8001330 <HAL_ADC_Init+0x204>
 8001326:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800132a:	4818      	ldr	r0, [pc, #96]	@ (800138c <HAL_ADC_Init+0x260>)
 800132c:	f7ff fd0a 	bl	8000d44 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <HAL_ADC_Init+0x264>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d017      	beq.n	800136a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <HAL_ADC_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800134a:	d00e      	beq.n	800136a <HAL_ADC_Init+0x23e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001354:	d009      	beq.n	800136a <HAL_ADC_Init+0x23e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800135e:	d004      	beq.n	800136a <HAL_ADC_Init+0x23e>
 8001360:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <HAL_ADC_Init+0x260>)
 8001366:	f7ff fced 	bl	8000d44 <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	d110      	bne.n	8001394 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f8fa 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001386:	e005      	b.n	8001394 <HAL_ADC_Init+0x268>
 8001388:	40012000 	.word	0x40012000
 800138c:	0800a8d4 	.word	0x0800a8d4
 8001390:	0f000001 	.word	0x0f000001
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	d118      	bne.n	80013d2 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	f043 0202 	orr.w	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fafd 	bl	80019b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	f023 0303 	bic.w	r3, r3, #3
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <HAL_ADC_Start+0x26>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d004      	beq.n	800140e <HAL_ADC_Start+0x26>
 8001404:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001408:	485e      	ldr	r0, [pc, #376]	@ (8001584 <HAL_ADC_Start+0x19c>)
 800140a:	f7ff fc9b 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <HAL_ADC_Start+0x56>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800141e:	d00e      	beq.n	800143e <HAL_ADC_Start+0x56>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001428:	d009      	beq.n	800143e <HAL_ADC_Start+0x56>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001432:	d004      	beq.n	800143e <HAL_ADC_Start+0x56>
 8001434:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8001438:	4852      	ldr	r0, [pc, #328]	@ (8001584 <HAL_ADC_Start+0x19c>)
 800143a:	f7ff fc83 	bl	8000d44 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_ADC_Start+0x64>
 8001448:	2302      	movs	r3, #2
 800144a:	e097      	b.n	800157c <HAL_ADC_Start+0x194>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d018      	beq.n	8001494 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001472:	4b45      	ldr	r3, [pc, #276]	@ (8001588 <HAL_ADC_Start+0x1a0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a45      	ldr	r2, [pc, #276]	@ (800158c <HAL_ADC_Start+0x1a4>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	0c9a      	lsrs	r2, r3, #18
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001486:	e002      	b.n	800148e <HAL_ADC_Start+0xa6>
    {
      counter--;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3b01      	subs	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d15f      	bne.n	8001562 <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f023 0206 	bic.w	r2, r3, #6
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_ADC_Start+0x1a8>)
 8001500:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800150a:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <HAL_ADC_Start+0x150>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d129      	bne.n	800157a <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e020      	b.n	800157a <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <HAL_ADC_Start+0x1ac>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11b      	bne.n	800157a <HAL_ADC_Start+0x192>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d114      	bne.n	800157a <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e00b      	b.n	800157a <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	0800a8d4 	.word	0x0800a8d4
 8001588:	20000000 	.word	0x20000000
 800158c:	431bde83 	.word	0x431bde83
 8001590:	40012300 	.word	0x40012300
 8001594:	40012000 	.word	0x40012000

08001598 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b4:	d113      	bne.n	80015de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015c4:	d10b      	bne.n	80015de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f043 0220 	orr.w	r2, r3, #32
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e063      	b.n	80016a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80015de:	f7ff fd75 	bl	80010cc <HAL_GetTick>
 80015e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015e4:	e021      	b.n	800162a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d01d      	beq.n	800162a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_PollForConversion+0x6c>
 80015f4:	f7ff fd6a 	bl	80010cc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d212      	bcs.n	800162a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d00b      	beq.n	800162a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f043 0204 	orr.w	r2, r3, #4
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e03d      	b.n	80016a6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b02      	cmp	r3, #2
 8001636:	d1d6      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0212 	mvn.w	r2, #18
 8001640:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d123      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11f      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800167c:	2b00      	cmp	r3, #0
 800167e:	d111      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d909      	bls.n	80016f2 <HAL_ADC_ConfigChannel+0x2a>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a72      	ldr	r2, [pc, #456]	@ (80018ac <HAL_ADC_ConfigChannel+0x1e4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d004      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x2a>
 80016e8:	f240 618b 	movw	r1, #1675	@ 0x68b
 80016ec:	4870      	ldr	r0, [pc, #448]	@ (80018b0 <HAL_ADC_ConfigChannel+0x1e8>)
 80016ee:	f7ff fb29 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x3a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d904      	bls.n	800170c <HAL_ADC_ConfigChannel+0x44>
 8001702:	f240 618c 	movw	r1, #1676	@ 0x68c
 8001706:	486a      	ldr	r0, [pc, #424]	@ (80018b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001708:	f7ff fb1c 	bl	8000d44 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d01c      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d018      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d014      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d010      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d00c      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d008      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b07      	cmp	r3, #7
 800174a:	d004      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x8e>
 800174c:	f240 618d 	movw	r1, #1677	@ 0x68d
 8001750:	4857      	ldr	r0, [pc, #348]	@ (80018b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001752:	f7ff faf7 	bl	8000d44 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x9c>
 8001760:	2302      	movs	r3, #2
 8001762:	e118      	b.n	8001996 <HAL_ADC_ConfigChannel+0x2ce>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d925      	bls.n	80017c0 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68d9      	ldr	r1, [r3, #12]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	3b1e      	subs	r3, #30
 800178a:	2207      	movs	r2, #7
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43da      	mvns	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	400a      	ands	r2, r1
 8001798:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68d9      	ldr	r1, [r3, #12]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4403      	add	r3, r0
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	409a      	lsls	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e022      	b.n	8001806 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6919      	ldr	r1, [r3, #16]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	2207      	movs	r2, #7
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4403      	add	r3, r0
 80017fc:	409a      	lsls	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b06      	cmp	r3, #6
 800180c:	d824      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b05      	subs	r3, #5
 8001820:	221f      	movs	r2, #31
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	400a      	ands	r2, r1
 800182e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b05      	subs	r3, #5
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34
 8001856:	e051      	b.n	80018fc <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d829      	bhi.n	80018b4 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b23      	subs	r3, #35	@ 0x23
 8001872:	221f      	movs	r2, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b23      	subs	r3, #35	@ 0x23
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018a8:	e028      	b.n	80018fc <HAL_ADC_ConfigChannel+0x234>
 80018aa:	bf00      	nop
 80018ac:	10000012 	.word	0x10000012
 80018b0:	0800a8d4 	.word	0x0800a8d4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b41      	subs	r3, #65	@ 0x41
 80018c6:	221f      	movs	r2, #31
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43da      	mvns	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	400a      	ands	r2, r1
 80018d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b41      	subs	r3, #65	@ 0x41
 80018f0:	fa00 f203 	lsl.w	r2, r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_ADC_ConfigChannel+0x2d8>)
 80018fe:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a27      	ldr	r2, [pc, #156]	@ (80019a4 <HAL_ADC_ConfigChannel+0x2dc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10f      	bne.n	800192a <HAL_ADC_ConfigChannel+0x262>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b12      	cmp	r3, #18
 8001910:	d10b      	bne.n	800192a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_ADC_ConfigChannel+0x2dc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d12b      	bne.n	800198c <HAL_ADC_ConfigChannel+0x2c4>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_ADC_ConfigChannel+0x2e0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_ADC_ConfigChannel+0x27e>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b11      	cmp	r3, #17
 8001944:	d122      	bne.n	800198c <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a11      	ldr	r2, [pc, #68]	@ (80019a8 <HAL_ADC_ConfigChannel+0x2e0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_ADC_ConfigChannel+0x2e4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_ADC_ConfigChannel+0x2e8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800197e:	e002      	b.n	8001986 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3b01      	subs	r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012300 	.word	0x40012300
 80019a4:	40012000 	.word	0x40012000
 80019a8:	10000012 	.word	0x10000012
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019bc:	4b7f      	ldr	r3, [pc, #508]	@ (8001bbc <ADC_Init+0x208>)
 80019be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	021a      	lsls	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc0 <ADC_Init+0x20c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e00f      	b.n	8001ab2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0202 	bic.w	r2, r2, #2
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e1b      	ldrb	r3, [r3, #24]
 8001acc:	005a      	lsls	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d028      	beq.n	8001b32 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <ADC_Init+0x13c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d904      	bls.n	8001afa <ADC_Init+0x146>
 8001af0:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8001af4:	4833      	ldr	r0, [pc, #204]	@ (8001bc4 <ADC_Init+0x210>)
 8001af6:	f7ff f925 	bl	8000d44 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b08:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b18:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	3b01      	subs	r3, #1
 8001b26:	035a      	lsls	r2, r3, #13
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	e007      	b.n	8001b42 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b40:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	051a      	lsls	r2, r3, #20
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b84:	025a      	lsls	r2, r3, #9
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	029a      	lsls	r2, r3, #10
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012300 	.word	0x40012300
 8001bc0:	0f000001 	.word	0x0f000001
 8001bc4:	0800a8d4 	.word	0x0800a8d4

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	@ (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	@ (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	@ 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	@ 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d00f      	beq.n	8001d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d00c      	beq.n	8001d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d009      	beq.n	8001d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d006      	beq.n	8001d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d003      	beq.n	8001d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d8e:	2190      	movs	r1, #144	@ 0x90
 8001d90:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d92:	f7fe ffd7 	bl	8000d44 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff16 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800a90c 	.word	0x0800a90c

08001da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d903      	bls.n	8001dc8 <HAL_NVIC_SetPriority+0x20>
 8001dc0:	21a8      	movs	r1, #168	@ 0xa8
 8001dc2:	480e      	ldr	r0, [pc, #56]	@ (8001dfc <HAL_NVIC_SetPriority+0x54>)
 8001dc4:	f7fe ffbe 	bl	8000d44 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d903      	bls.n	8001dd6 <HAL_NVIC_SetPriority+0x2e>
 8001dce:	21a9      	movs	r1, #169	@ 0xa9
 8001dd0:	480a      	ldr	r0, [pc, #40]	@ (8001dfc <HAL_NVIC_SetPriority+0x54>)
 8001dd2:	f7fe ffb7 	bl	8000d44 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd6:	f7ff ff1b 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff ff6b 	bl	8001cbc <NVIC_EncodePriority>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff3a 	bl	8001c68 <__NVIC_SetPriority>
}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0800a90c 	.word	0x0800a90c

08001e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da03      	bge.n	8001e1a <HAL_NVIC_EnableIRQ+0x1a>
 8001e12:	21bc      	movs	r1, #188	@ 0xbc
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_NVIC_EnableIRQ+0x2c>)
 8001e16:	f7fe ff95 	bl	8000d44 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff04 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0800a90c 	.word	0x0800a90c

08001e30 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff73 	bl	8001d24 <SysTick_Config>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <HAL_GPIO_Init+0xe4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a31      	ldr	r2, [pc, #196]	@ (8001f30 <HAL_GPIO_Init+0xe8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_GPIO_Init+0xec>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00f      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_GPIO_Init+0xf0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00b      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	@ (8001f3c <HAL_GPIO_Init+0xf4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <HAL_GPIO_Init+0xf8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x4e>
 8001e8e:	21ac      	movs	r1, #172	@ 0xac
 8001e90:	482c      	ldr	r0, [pc, #176]	@ (8001f44 <HAL_GPIO_Init+0xfc>)
 8001e92:	f7fe ff57 	bl	8000d44 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_GPIO_Init+0x62>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d303      	bcc.n	8001eb2 <HAL_GPIO_Init+0x6a>
 8001eaa:	21ad      	movs	r1, #173	@ 0xad
 8001eac:	4825      	ldr	r0, [pc, #148]	@ (8001f44 <HAL_GPIO_Init+0xfc>)
 8001eae:	f7fe ff49 	bl	8000d44 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d035      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b11      	cmp	r3, #17
 8001ec8:	d02d      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d029      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001ee2:	d020      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001eec:	d01b      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001ef6:	d016      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001f00:	d011      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001f0a:	d00c      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0xde>
 8001f1e:	21ae      	movs	r1, #174	@ 0xae
 8001f20:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <HAL_GPIO_Init+0xfc>)
 8001f22:	f7fe ff0f 	bl	8000d44 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e20b      	b.n	8002344 <HAL_GPIO_Init+0x4fc>
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	0800a948 	.word	0x0800a948
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 81ec 	bne.w	800233e <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d144      	bne.n	8002008 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00f      	beq.n	8001fa6 <HAL_GPIO_Init+0x15e>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_GPIO_Init+0x15e>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x15e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x15e>
 8001f9e:	21c0      	movs	r1, #192	@ 0xc0
 8001fa0:	4884      	ldr	r0, [pc, #528]	@ (80021b4 <HAL_GPIO_Init+0x36c>)
 8001fa2:	f7fe fecf 	bl	8000d44 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 0201 	and.w	r2, r3, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b03      	cmp	r3, #3
 8002012:	d027      	beq.n	8002064 <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 800202c:	21d1      	movs	r1, #209	@ 0xd1
 800202e:	4861      	ldr	r0, [pc, #388]	@ (80021b4 <HAL_GPIO_Init+0x36c>)
 8002030:	f7fe fe88 	bl	8000d44 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80a3 	bne.w	80021b8 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d077      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d073      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d067      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d05f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d05b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d057      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d053      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d04f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d04b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d047      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d043      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d03f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d03b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d037      	beq.n	800216a <HAL_GPIO_Init+0x322>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d033      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d02f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d02b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d027      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d023      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d01f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b07      	cmp	r3, #7
 8002130:	d01b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b08      	cmp	r3, #8
 8002138:	d017      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b0a      	cmp	r3, #10
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b09      	cmp	r3, #9
 8002148:	d00f      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b09      	cmp	r3, #9
 8002150:	d00b      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x322>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x322>
 8002162:	21de      	movs	r1, #222	@ 0xde
 8002164:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <HAL_GPIO_Init+0x36c>)
 8002166:	f7fe fded 	bl	8000d44 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	69b9      	ldr	r1, [r7, #24]
 80021ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021b2:	e001      	b.n	80021b8 <HAL_GPIO_Init+0x370>
 80021b4:	0800a948 	.word	0x0800a948
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a2 	beq.w	800233e <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b56      	ldr	r3, [pc, #344]	@ (8002358 <HAL_GPIO_Init+0x510>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	4a55      	ldr	r2, [pc, #340]	@ (8002358 <HAL_GPIO_Init+0x510>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002208:	6453      	str	r3, [r2, #68]	@ 0x44
 800220a:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_GPIO_Init+0x510>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a51      	ldr	r2, [pc, #324]	@ (800235c <HAL_GPIO_Init+0x514>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a48      	ldr	r2, [pc, #288]	@ (8002360 <HAL_GPIO_Init+0x518>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x42e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a47      	ldr	r2, [pc, #284]	@ (8002364 <HAL_GPIO_Init+0x51c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x42a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a46      	ldr	r2, [pc, #280]	@ (8002368 <HAL_GPIO_Init+0x520>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x426>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a45      	ldr	r2, [pc, #276]	@ (800236c <HAL_GPIO_Init+0x524>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x422>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a44      	ldr	r2, [pc, #272]	@ (8002370 <HAL_GPIO_Init+0x528>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x41e>
 8002262:	2304      	movs	r3, #4
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x430>
 8002266:	2307      	movs	r3, #7
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x430>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x430>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x430>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x430>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4934      	ldr	r1, [pc, #208]	@ (800235c <HAL_GPIO_Init+0x514>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a23      	ldr	r2, [pc, #140]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a19      	ldr	r2, [pc, #100]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a0e      	ldr	r2, [pc, #56]	@ (8002374 <HAL_GPIO_Init+0x52c>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f adfe 	bls.w	8001f48 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d104      	bne.n	8002398 <HAL_GPIO_WritePin+0x20>
 800238e:	f240 119d 	movw	r1, #413	@ 0x19d
 8002392:	480e      	ldr	r0, [pc, #56]	@ (80023cc <HAL_GPIO_WritePin+0x54>)
 8002394:	f7fe fcd6 	bl	8000d44 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_WritePin+0x36>
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d004      	beq.n	80023ae <HAL_GPIO_WritePin+0x36>
 80023a4:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80023a8:	4808      	ldr	r0, [pc, #32]	@ (80023cc <HAL_GPIO_WritePin+0x54>)
 80023aa:	f7fe fccb 	bl	8000d44 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80023ae:	787b      	ldrb	r3, [r7, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	0800a948 	.word	0x0800a948

080023d0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e062      	b.n	80024a8 <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ea:	d003      	beq.n	80023f4 <HAL_HCD_Init+0x24>
 80023ec:	217b      	movs	r1, #123	@ 0x7b
 80023ee:	4830      	ldr	r0, [pc, #192]	@ (80024b0 <HAL_HCD_Init+0xe0>)
 80023f0:	f7fe fca8 	bl	8000d44 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f007 fbe6 	bl	8009be0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002422:	d102      	bne.n	800242a <HAL_HCD_Init+0x5a>
  {
    hhcd->Init.dma_enable = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fa9d 	bl	800696e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7c1a      	ldrb	r2, [r3, #16]
 800243c:	f88d 2000 	strb.w	r2, [sp]
 8002440:	3304      	adds	r3, #4
 8002442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002444:	f004 fa1e 	bl	8006884 <USB_CoreInit>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_HCD_Init+0x8a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e026      	b.n	80024a8 <HAL_HCD_Init+0xd8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fa95 	bl	8006990 <USB_SetCurrentMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e017      	b.n	80024a8 <HAL_HCD_Init+0xd8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7c1a      	ldrb	r2, [r3, #16]
 8002480:	f88d 2000 	strb.w	r2, [sp]
 8002484:	3304      	adds	r3, #4
 8002486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002488:	f004 fc38 	bl	8006cfc <USB_HostInit>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_HCD_Init+0xce>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e004      	b.n	80024a8 <HAL_HCD_Init+0xd8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800a984 	.word	0x0800a984

080024b4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b08b      	sub	sp, #44	@ 0x2c
 80024b8:	af04      	add	r7, sp, #16
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	70fb      	strb	r3, [r7, #3]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70bb      	strb	r3, [r7, #2]
 80024ca:	4613      	mov	r3, r2
 80024cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80024ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024d0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_HCD_HC_Init+0x2c>
 80024dc:	2302      	movs	r3, #2
 80024de:	e09d      	b.n	800261c <HAL_HCD_HC_Init+0x168>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3319      	adds	r3, #25
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3314      	adds	r3, #20
 800250c:	787a      	ldrb	r2, [r7, #1]
 800250e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3315      	adds	r3, #21
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	@ 0x26
 8002534:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	78bb      	ldrb	r3, [r7, #2]
 800253e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002542:	b2d8      	uxtb	r0, r3
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	3316      	adds	r3, #22
 8002552:	4602      	mov	r2, r0
 8002554:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fbc8 	bl	8002cf0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002560:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0a      	bge.n	800257e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3317      	adds	r3, #23
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e009      	b.n	8002592 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3317      	adds	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fcfe 	bl	8006f98 <USB_GetHostSpeed>
 800259c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800259e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10b      	bne.n	80025be <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80025a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_HCD_HC_Init+0x10a>
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80025b8:	d901      	bls.n	80025be <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80025ba:	23bc      	movs	r3, #188	@ 0xbc
 80025bc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3318      	adds	r3, #24
 80025ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80025d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	b298      	uxth	r0, r3
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3328      	adds	r3, #40	@ 0x28
 80025e8:	4602      	mov	r2, r0
 80025ea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	787c      	ldrb	r4, [r7, #1]
 80025f6:	78ba      	ldrb	r2, [r7, #2]
 80025f8:	78f9      	ldrb	r1, [r7, #3]
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4623      	mov	r3, r4
 800260a:	f004 fced 	bl	8006fe8 <USB_HC_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}

08002624 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_HCD_HC_Halt+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e00f      	b.n	8002662 <HAL_HCD_HC_Halt+0x3e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f005 f833 	bl	80076be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	460b      	mov	r3, r1
 8002680:	70bb      	strb	r3, [r7, #2]
 8002682:	4613      	mov	r3, r2
 8002684:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3317      	adds	r3, #23
 8002696:	78ba      	ldrb	r2, [r7, #2]
 8002698:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3326      	adds	r3, #38	@ 0x26
 80026aa:	787a      	ldrb	r2, [r7, #1]
 80026ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ae:	7c3b      	ldrb	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d114      	bne.n	80026de <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	332a      	adds	r3, #42	@ 0x2a
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3319      	adds	r3, #25
 80026d8:	7f3a      	ldrb	r2, [r7, #28]
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e009      	b.n	80026f2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	332a      	adds	r3, #42	@ 0x2a
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	f200 8102 	bhi.w	80028fe <HAL_HCD_HC_SubmitRequest+0x292>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <HAL_HCD_HC_SubmitRequest+0x94>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	080028e9 	.word	0x080028e9
 8002708:	080027d5 	.word	0x080027d5
 800270c:	0800285f 	.word	0x0800285f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002710:	7c3b      	ldrb	r3, [r7, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 80f5 	bne.w	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002718:	78bb      	ldrb	r3, [r7, #2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12d      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800271e:	8b3b      	ldrh	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	333d      	adds	r3, #61	@ 0x3d
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333d      	adds	r3, #61	@ 0x3d
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	332a      	adds	r3, #42	@ 0x2a
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002762:	e0ce      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	332a      	adds	r3, #42	@ 0x2a
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
      break;
 8002778:	e0c3      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	331a      	adds	r3, #26
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 80b8 	bne.w	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	333c      	adds	r3, #60	@ 0x3c
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	332a      	adds	r3, #42	@ 0x2a
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
      break;
 80027bc:	e0a1      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	332a      	adds	r3, #42	@ 0x2a
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
      break;
 80027d2:	e096      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027d4:	78bb      	ldrb	r3, [r7, #2]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d120      	bne.n	800281c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	333d      	adds	r3, #61	@ 0x3d
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	332a      	adds	r3, #42	@ 0x2a
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002804:	e07e      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	332a      	adds	r3, #42	@ 0x2a
 8002816:	2202      	movs	r2, #2
 8002818:	701a      	strb	r2, [r3, #0]
      break;
 800281a:	e073      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	332a      	adds	r3, #42	@ 0x2a
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e05d      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	332a      	adds	r3, #42	@ 0x2a
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
      break;
 800285c:	e052      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	333d      	adds	r3, #61	@ 0x3d
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	332a      	adds	r3, #42	@ 0x2a
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800288e:	e039      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	332a      	adds	r3, #42	@ 0x2a
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
      break;
 80028a4:	e02e      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	333c      	adds	r3, #60	@ 0x3c
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	332a      	adds	r3, #42	@ 0x2a
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
      break;
 80028d0:	e018      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	332a      	adds	r3, #42	@ 0x2a
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
      break;
 80028e6:	e00d      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	332a      	adds	r3, #42	@ 0x2a
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e002      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80028fe:	bf00      	nop
 8002900:	e000      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002902:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	332c      	adds	r3, #44	@ 0x2c
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	8b39      	ldrh	r1, [r7, #24]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4403      	add	r3, r0
 8002928:	3334      	adds	r3, #52	@ 0x34
 800292a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334c      	adds	r3, #76	@ 0x4c
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3338      	adds	r3, #56	@ 0x38
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3315      	adds	r3, #21
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334d      	adds	r3, #77	@ 0x4d
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3310      	adds	r3, #16
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	1d19      	adds	r1, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	799b      	ldrb	r3, [r3, #6]
 8002996:	461a      	mov	r2, r3
 8002998:	f004 fc3c 	bl	8007214 <USB_HC_StartXfer>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop

080029a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 f95c 	bl	8006c7c <USB_GetMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80fb 	bne.w	8002bc2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 f91f 	bl	8006c14 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80f1 	beq.w	8002bc0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f916 	bl	8006c14 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f906 	bl	8006c14 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 f8f6 	bl	8006c14 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a32:	d104      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f8e6 	bl	8006c14 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 f8d8 	bl	8006c14 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a6e:	d120      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	6938      	ldr	r0, [r7, #16]
 8002a8e:	f003 ffcb 	bl	8006a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a92:	6938      	ldr	r0, [r7, #16]
 8002a94:	f003 fffa 	bl	8006a8c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7a5b      	ldrb	r3, [r3, #9]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d105      	bne.n	8002aac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f9d6 	bl	8006e58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f007 f915 	bl	8009cdc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 f8ac 	bl	8006c14 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac6:	d102      	bne.n	8002ace <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f001 fd4d 	bl	8004568 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 f89e 	bl	8006c14 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d106      	bne.n	8002af0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f007 f8de 	bl	8009ca4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2208      	movs	r2, #8
 8002aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f88d 	bl	8006c14 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b04:	d139      	bne.n	8002b7a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fdc6 	bl	800769c <USB_HC_ReadInterrupt>
 8002b10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e025      	b.n	8002b64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b42:	d106      	bne.n	8002b52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f905 	bl	8002d5a <HCD_HC_IN_IRQHandler>
 8002b50:	e005      	b.n	8002b5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff67 	bl	8003a2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	795b      	ldrb	r3, [r3, #5]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d3d3      	bcc.n	8002b18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 f848 	bl	8006c14 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d101      	bne.n	8002b92 <HAL_HCD_IRQHandler+0x1ea>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_HCD_IRQHandler+0x1ec>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 fbfe 	bl	80043aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0210 	orr.w	r2, r2, #16
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e000      	b.n	8002bc2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002bc0:	bf00      	nop
    }
  }
}
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_HCD_Start+0x16>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e013      	b.n	8002c06 <HAL_HCD_Start+0x3e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2101      	movs	r1, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 f99a 	bl	8006f26 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fea8 	bl	800694c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_HCD_Stop+0x16>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e00d      	b.n	8002c40 <HAL_HCD_Stop+0x32>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 fe64 	bl	80078fe <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 f93c 	bl	8006ed2 <USB_ResetPort>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334c      	adds	r3, #76	@ 0x4c
 8002c80:	781b      	ldrb	r3, [r3, #0]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3338      	adds	r3, #56	@ 0x38
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 f97e 	bl	8006fc6 <USB_GetCurrentFrame>
 8002cca:	4603      	mov	r3, r0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 f959 	bl	8006f98 <USB_GetHostSpeed>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	331a      	adds	r3, #26
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	331b      	adds	r3, #27
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3325      	adds	r3, #37	@ 0x25
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3324      	adds	r3, #36	@ 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 ff5e 	bl	8006c3a <USB_ReadChInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11a      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	2304      	movs	r3, #4
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334d      	adds	r3, #77	@ 0x4d
 8002daa:	2207      	movs	r2, #7
 8002dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 fc81 	bl	80076be <USB_HC_Halt>
 8002dbc:	e09e      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 ff37 	bl	8006c3a <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd6:	d11b      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 fc58 	bl	80076be <USB_HC_Halt>
 8002e0e:	e075      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 ff0e 	bl	8006c3a <USB_ReadChInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d11a      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2308      	movs	r3, #8
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334d      	adds	r3, #77	@ 0x4d
 8002e4a:	2206      	movs	r2, #6
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fc31 	bl	80076be <USB_HC_Halt>
 8002e5c:	e04e      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fee7 	bl	8006c3a <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d11b      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334d      	adds	r3, #77	@ 0x4d
 8002e9c:	2209      	movs	r2, #9
 8002e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fc08 	bl	80076be <USB_HC_Halt>
 8002eae:	e025      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 febe 	bl	8006c3a <USB_ReadChInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d119      	bne.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2207      	movs	r2, #7
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fbe1 	bl	80076be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fe98 	bl	8006c3a <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f14:	d112      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fbcd 	bl	80076be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f36:	6093      	str	r3, [r2, #8]
 8002f38:	f000 bd75 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fe78 	bl	8006c3a <USB_ReadChInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 8128 	bne.w	80031a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2320      	movs	r3, #32
 8002f66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	331b      	adds	r3, #27
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d119      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	799b      	ldrb	r3, [r3, #6]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01b      	beq.n	8002ff2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3330      	adds	r3, #48	@ 0x30
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	1ac9      	subs	r1, r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	3338      	adds	r3, #56	@ 0x38
 8002ff0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	@ 0x4d
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3344      	adds	r3, #68	@ 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2301      	movs	r3, #1
 800302a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3326      	adds	r3, #38	@ 0x26
 8003052:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d110      	bne.n	800307a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fb2c 	bl	80076be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2310      	movs	r3, #16
 8003076:	6093      	str	r3, [r2, #8]
 8003078:	e03d      	b.n	80030f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3326      	adds	r3, #38	@ 0x26
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d00a      	beq.n	80030a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3326      	adds	r3, #38	@ 0x26
 80030a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d127      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	0151      	lsls	r1, r2, #5
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	440a      	add	r2, r1
 80030bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	@ 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	@ 0x4c
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f006 fe01 	bl	8009cf8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	799b      	ldrb	r3, [r3, #6]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d13b      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3338      	adds	r3, #56	@ 0x38
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	3328      	adds	r3, #40	@ 0x28
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	440b      	add	r3, r1
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	3328      	adds	r3, #40	@ 0x28
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8470 	beq.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	333c      	adds	r3, #60	@ 0x3c
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2d8      	uxtb	r0, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	333c      	adds	r3, #60	@ 0x3c
 800316e:	4602      	mov	r2, r0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	f000 bc58 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	333c      	adds	r3, #60	@ 0x3c
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	f083 0301 	eor.w	r3, r3, #1
 800318e:	b2d8      	uxtb	r0, r3
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333c      	adds	r3, #60	@ 0x3c
 800319e:	4602      	mov	r2, r0
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	f000 bc40 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fd43 	bl	8006c3a <USB_ReadChInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d131      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	2320      	movs	r3, #32
 80031ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	331a      	adds	r3, #26
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 841f 	bne.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	331b      	adds	r3, #27
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334d      	adds	r3, #77	@ 0x4d
 800320c:	2203      	movs	r2, #3
 800320e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fa50 	bl	80076be <USB_HC_Halt>
 800321e:	f000 bc02 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fd05 	bl	8006c3a <USB_ReadChInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	f040 8305 	bne.w	8003846 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2302      	movs	r3, #2
 800324c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d114      	bne.n	800328e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334d      	adds	r3, #77	@ 0x4d
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	@ 0x4c
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e2cc      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d114      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e2ac      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d00b      	beq.n	80032fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	f040 80a6 	bne.w	8003448 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3344      	adds	r3, #68	@ 0x44
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3344      	adds	r3, #68	@ 0x44
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d943      	bls.n	80033d2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	331a      	adds	r3, #26
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d123      	bne.n	80033bc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	331c      	adds	r3, #28
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334c      	adds	r3, #76	@ 0x4c
 80033cc:	2204      	movs	r2, #4
 80033ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033d0:	e229      	b.n	8003826 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334c      	adds	r3, #76	@ 0x4c
 80033e2:	2202      	movs	r2, #2
 80033e4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3326      	adds	r3, #38	@ 0x26
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3326      	adds	r3, #38	@ 0x26
 800340c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800340e:	2b02      	cmp	r3, #2
 8003410:	f040 8209 	bne.w	8003826 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800342a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003432:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003446:	e1ee      	b.n	8003826 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b05      	cmp	r3, #5
 800345c:	f040 80c8 	bne.w	80035f0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	@ 0x4d
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	331b      	adds	r3, #27
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 81ce 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3326      	adds	r3, #38	@ 0x26
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d16b      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3348      	adds	r3, #72	@ 0x48
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	3348      	adds	r3, #72	@ 0x48
 80034c4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3348      	adds	r3, #72	@ 0x48
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d943      	bls.n	8003564 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3348      	adds	r3, #72	@ 0x48
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	331b      	adds	r3, #27
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3344      	adds	r3, #68	@ 0x44
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d809      	bhi.n	800352e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	331c      	adds	r3, #28
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334c      	adds	r3, #76	@ 0x4c
 800355e:	2204      	movs	r2, #4
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e014      	b.n	800358e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	334c      	adds	r3, #76	@ 0x4c
 8003574:	2202      	movs	r2, #2
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e009      	b.n	800358e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334c      	adds	r3, #76	@ 0x4c
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3326      	adds	r3, #38	@ 0x26
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3326      	adds	r3, #38	@ 0x26
 80035b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	f040 8136 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e11b      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334d      	adds	r3, #77	@ 0x4d
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b03      	cmp	r3, #3
 8003604:	f040 8081 	bne.w	800370a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334d      	adds	r3, #77	@ 0x4d
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	331b      	adds	r3, #27
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 80fa 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	440a      	add	r2, r1
 800365e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003666:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	440a      	add	r2, r1
 800367e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003686:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	440a      	add	r2, r1
 800369e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3326      	adds	r3, #38	@ 0x26
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3326      	adds	r3, #38	@ 0x26
 80036ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80a9 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e08e      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334d      	adds	r3, #77	@ 0x4d
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d143      	bne.n	80037a8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334d      	adds	r3, #77	@ 0x4d
 8003730:	2202      	movs	r2, #2
 8003732:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334c      	adds	r3, #76	@ 0x4c
 8003744:	2202      	movs	r2, #2
 8003746:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3326      	adds	r3, #38	@ 0x26
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3326      	adds	r3, #38	@ 0x26
 800376e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003770:	2b02      	cmp	r3, #2
 8003772:	d159      	bne.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800378a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003792:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a0:	461a      	mov	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e03f      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334d      	adds	r3, #77	@ 0x4d
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d126      	bne.n	800380c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334d      	adds	r3, #77	@ 0x4d
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3344      	adds	r3, #68	@ 0x44
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	3344      	adds	r3, #68	@ 0x44
 80037f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334c      	adds	r3, #76	@ 0x4c
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e00d      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	334d      	adds	r3, #77	@ 0x4d
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	f000 8100 	beq.w	8003a24 <HCD_HC_IN_IRQHandler+0xcca>
 8003824:	e000      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003826:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334c      	adds	r3, #76	@ 0x4c
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f006 fa5a 	bl	8009cf8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003844:	e0ef      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f003 f9f3 	bl	8006c3a <USB_ReadChInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d12f      	bne.n	80038be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386a:	461a      	mov	r2, r3
 800386c:	2340      	movs	r3, #64	@ 0x40
 800386e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	334d      	adds	r3, #77	@ 0x4d
 8003880:	2205      	movs	r2, #5
 8003882:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	331a      	adds	r3, #26
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	@ 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 ff01 	bl	80076be <USB_HC_Halt>
 80038bc:	e0b3      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 f9b7 	bl	8006c3a <USB_ReadChInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	f040 80a7 	bne.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3326      	adds	r3, #38	@ 0x26
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d11b      	bne.n	8003926 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3344      	adds	r3, #68	@ 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334d      	adds	r3, #77	@ 0x4d
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fecd 	bl	80076be <USB_HC_Halt>
 8003924:	e03f      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3326      	adds	r3, #38	@ 0x26
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3326      	adds	r3, #38	@ 0x26
 800394c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800394e:	2b02      	cmp	r3, #2
 8003950:	d129      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3344      	adds	r3, #68	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	799b      	ldrb	r3, [r3, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0xc2a>
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	331b      	adds	r3, #27
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d110      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334d      	adds	r3, #77	@ 0x4d
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fe8c 	bl	80076be <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	331b      	adds	r3, #27
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d129      	bne.n	8003a10 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	331b      	adds	r3, #27
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2310      	movs	r3, #16
 8003a20:	6093      	str	r3, [r2, #8]
 8003a22:	e000      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 f8f5 	bl	8006c3a <USB_ReadChInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d11b      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	2304      	movs	r3, #4
 8003a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334d      	adds	r3, #77	@ 0x4d
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 fe18 	bl	80076be <USB_HC_Halt>
 8003a8e:	f000 bc89 	b.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 f8cd 	bl	8006c3a <USB_ReadChInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 8082 	bne.w	8003bb0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2320      	movs	r3, #32
 8003abc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3319      	adds	r3, #25
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d124      	bne.n	8003b1e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3319      	adds	r3, #25
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334c      	adds	r3, #76	@ 0x4c
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	@ 0x4d
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fdd0 	bl	80076be <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	331a      	adds	r3, #26
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 8437 	bne.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	331b      	adds	r3, #27
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 842b 	bne.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3326      	adds	r3, #38	@ 0x26
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d009      	beq.n	8003b78 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	331b      	adds	r3, #27
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	334d      	adds	r3, #77	@ 0x4d
 8003b88:	2203      	movs	r2, #3
 8003b8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 fd92 	bl	80076be <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3344      	adds	r3, #68	@ 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e3f9      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 f83e 	bl	8006c3a <USB_ReadChInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d111      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fd69 	bl	80076be <USB_HC_Halt>
 8003bec:	e3da      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 f81f 	bl	8006c3a <USB_ReadChInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d168      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	3344      	adds	r3, #68	@ 0x44
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 f809 	bl	8006c3a <USB_ReadChInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d112      	bne.n	8003c58 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3319      	adds	r3, #25
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	461a      	mov	r2, r3
 8003c54:	2340      	movs	r3, #64	@ 0x40
 8003c56:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	331b      	adds	r3, #27
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	331b      	adds	r3, #27
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 fcf4 	bl	80076be <USB_HC_Halt>
 8003cd6:	e365      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f002 ffaa 	bl	8006c3a <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	d139      	bne.n	8003d64 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334d      	adds	r3, #77	@ 0x4d
 8003d00:	2205      	movs	r2, #5
 8003d02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	331a      	adds	r3, #26
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3319      	adds	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3344      	adds	r3, #68	@ 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fcb7 	bl	80076be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2340      	movs	r3, #64	@ 0x40
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	e31f      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 ff64 	bl	8006c3a <USB_ReadChInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11a      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	@ 0x4d
 8003d9e:	2206      	movs	r2, #6
 8003da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 fc87 	bl	80076be <USB_HC_Halt>
 8003db0:	e2f8      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 ff3d 	bl	8006c3a <USB_ReadChInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d144      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3344      	adds	r3, #68	@ 0x44
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	334d      	adds	r3, #77	@ 0x4d
 8003dee:	2204      	movs	r2, #4
 8003df0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	3319      	adds	r3, #25
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d114      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3318      	adds	r3, #24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3319      	adds	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fc3f 	bl	80076be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2310      	movs	r3, #16
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	e2a7      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 feec 	bl	8006c3a <USB_ReadChInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b80      	cmp	r3, #128	@ 0x80
 8003e6a:	f040 8083 	bne.w	8003f74 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	799b      	ldrb	r3, [r3, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d111      	bne.n	8003e9a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334d      	adds	r3, #77	@ 0x4d
 8003e86:	2207      	movs	r2, #7
 8003e88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fc13 	bl	80076be <USB_HC_Halt>
 8003e98:	e062      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	@ 0x44
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c59      	adds	r1, r3, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4403      	add	r3, r0
 8003eba:	3344      	adds	r3, #68	@ 0x44
 8003ebc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3344      	adds	r3, #68	@ 0x44
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d922      	bls.n	8003f1a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3344      	adds	r3, #68	@ 0x44
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334c      	adds	r3, #76	@ 0x4c
 8003ef8:	2204      	movs	r2, #4
 8003efa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	334c      	adds	r3, #76	@ 0x4c
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f005 fef0 	bl	8009cf8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f18:	e022      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334c      	adds	r3, #76	@ 0x4c
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f44:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f4c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	e217      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f002 fe5c 	bl	8006c3a <USB_ReadChInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8c:	d11b      	bne.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334d      	adds	r3, #77	@ 0x4d
 8003f9e:	2209      	movs	r2, #9
 8003fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fb87 	bl	80076be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	e1ee      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f002 fe33 	bl	8006c3a <USB_ReadChInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 81df 	bne.w	800439e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2302      	movs	r3, #2
 8003ff0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	334d      	adds	r3, #77	@ 0x4d
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8093 	bne.w	8004130 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	334d      	adds	r3, #77	@ 0x4d
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	334c      	adds	r3, #76	@ 0x4c
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3326      	adds	r3, #38	@ 0x26
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d00b      	beq.n	8004060 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3326      	adds	r3, #38	@ 0x26
 8004058:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800405a:	2b03      	cmp	r3, #3
 800405c:	f040 8190 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	799b      	ldrb	r3, [r3, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	333d      	adds	r3, #61	@ 0x3d
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2d8      	uxtb	r0, r3
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	333d      	adds	r3, #61	@ 0x3d
 8004090:	4602      	mov	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	799b      	ldrb	r3, [r3, #6]
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 8171 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3334      	adds	r3, #52	@ 0x34
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8165 	beq.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3334      	adds	r3, #52	@ 0x34
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	440b      	add	r3, r1
 80040dc:	1e59      	subs	r1, r3, #1
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 813f 	beq.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	333d      	adds	r3, #61	@ 0x3d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	f083 0301 	eor.w	r3, r3, #1
 800411a:	b2d8      	uxtb	r0, r3
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	333d      	adds	r3, #61	@ 0x3d
 800412a:	4602      	mov	r2, r0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e127      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334d      	adds	r3, #77	@ 0x4d
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d120      	bne.n	8004188 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	334d      	adds	r3, #77	@ 0x4d
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	331b      	adds	r3, #27
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 8107 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	334c      	adds	r3, #76	@ 0x4c
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e0fb      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d13a      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334d      	adds	r3, #77	@ 0x4d
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334c      	adds	r3, #76	@ 0x4c
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	331b      	adds	r3, #27
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 80d1 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	331b      	adds	r3, #27
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	440a      	add	r2, r1
 8004208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	e0b5      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	334d      	adds	r3, #77	@ 0x4d
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d114      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	334d      	adds	r3, #77	@ 0x4d
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	334c      	adds	r3, #76	@ 0x4c
 800424e:	2202      	movs	r2, #2
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e095      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	334d      	adds	r3, #77	@ 0x4d
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d114      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334d      	adds	r3, #77	@ 0x4d
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	334c      	adds	r3, #76	@ 0x4c
 800428e:	2205      	movs	r2, #5
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e075      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	334d      	adds	r3, #77	@ 0x4d
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d00a      	beq.n	80042c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	334d      	adds	r3, #77	@ 0x4d
 80042ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042bc:	2b09      	cmp	r3, #9
 80042be:	d170      	bne.n	80043a2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334d      	adds	r3, #77	@ 0x4d
 80042d0:	2202      	movs	r2, #2
 80042d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3344      	adds	r3, #68	@ 0x44
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4403      	add	r3, r0
 80042f4:	3344      	adds	r3, #68	@ 0x44
 80042f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3344      	adds	r3, #68	@ 0x44
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d914      	bls.n	8004338 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3344      	adds	r3, #68	@ 0x44
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334c      	adds	r3, #76	@ 0x4c
 8004332:	2204      	movs	r2, #4
 8004334:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004336:	e022      	b.n	800437e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334c      	adds	r3, #76	@ 0x4c
 8004348:	2202      	movs	r2, #2
 800434a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004362:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800436a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004378:	461a      	mov	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800437e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334c      	adds	r3, #76	@ 0x4c
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fcae 	bl	8009cf8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800439c:	e002      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80043a2:	bf00      	nop
  }
}
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b08a      	sub	sp, #40	@ 0x28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	0c5b      	lsrs	r3, r3, #17
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d004      	beq.n	80043f0 <HCD_RXQLVL_IRQHandler+0x46>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	f000 80b6 	beq.w	800455a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043ee:	e0b7      	b.n	8004560 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80b3 	beq.w	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	332c      	adds	r3, #44	@ 0x2c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80a7 	beq.w	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3338      	adds	r3, #56	@ 0x38
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	18d1      	adds	r1, r2, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4403      	add	r3, r0
 8004434:	3334      	adds	r3, #52	@ 0x34
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4299      	cmp	r1, r3
 800443a:	f200 8083 	bhi.w	8004544 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	332c      	adds	r3, #44	@ 0x2c
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	b292      	uxth	r2, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f002 fb83 	bl	8006b64 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	332c      	adds	r3, #44	@ 0x2c
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	18d1      	adds	r1, r2, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4403      	add	r3, r0
 8004482:	332c      	adds	r3, #44	@ 0x2c
 8004484:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3338      	adds	r3, #56	@ 0x38
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	3338      	adds	r3, #56	@ 0x38
 80044ac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	0cdb      	lsrs	r3, r3, #19
 80044be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3328      	adds	r3, #40	@ 0x28
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4293      	cmp	r3, r2
 80044dc:	d13f      	bne.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03c      	beq.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	333c      	adds	r3, #60	@ 0x3c
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2d8      	uxtb	r0, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	333c      	adds	r3, #60	@ 0x3c
 800453e:	4602      	mov	r2, r0
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e00c      	b.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334c      	adds	r3, #76	@ 0x4c
 8004554:	2204      	movs	r2, #4
 8004556:	701a      	strb	r2, [r3, #0]
      break;
 8004558:	e001      	b.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800455e:	bf00      	nop
  }
}
 8004560:	bf00      	nop
 8004562:	3728      	adds	r7, #40	@ 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004594:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d10b      	bne.n	80045b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f005 fb88 	bl	8009cc0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d132      	bne.n	8004628 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d126      	bne.n	8004622 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7a5b      	ldrb	r3, [r3, #9]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d113      	bne.n	8004604 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80045e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045e6:	d106      	bne.n	80045f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 fc32 	bl	8006e58 <USB_InitFSLSPClkSel>
 80045f4:	e011      	b.n	800461a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fc2b 	bl	8006e58 <USB_InitFSLSPClkSel>
 8004602:	e00a      	b.n	800461a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	79db      	ldrb	r3, [r3, #7]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004612:	461a      	mov	r2, r3
 8004614:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004618:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f005 fb7a 	bl	8009d14 <HAL_HCD_PortEnabled_Callback>
 8004620:	e002      	b.n	8004628 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f005 fb84 	bl	8009d30 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d103      	bne.n	800463a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0320 	orr.w	r3, r3, #32
 8004638:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e1ba      	b.n	80049d8 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a9d      	ldr	r2, [pc, #628]	@ (80048dc <HAL_I2C_Init+0x28c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_I2C_Init+0x3a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a9b      	ldr	r2, [pc, #620]	@ (80048e0 <HAL_I2C_Init+0x290>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_I2C_Init+0x3a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a9a      	ldr	r2, [pc, #616]	@ (80048e4 <HAL_I2C_Init+0x294>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_I2C_Init+0x3a>
 8004680:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004684:	4898      	ldr	r0, [pc, #608]	@ (80048e8 <HAL_I2C_Init+0x298>)
 8004686:	f7fc fb5d 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <HAL_I2C_Init+0x4c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a95      	ldr	r2, [pc, #596]	@ (80048ec <HAL_I2C_Init+0x29c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d904      	bls.n	80046a6 <HAL_I2C_Init+0x56>
 800469c:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 80046a0:	4891      	ldr	r0, [pc, #580]	@ (80048e8 <HAL_I2C_Init+0x298>)
 80046a2:	f7fc fb4f 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_I2C_Init+0x72>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046b6:	d004      	beq.n	80046c2 <HAL_I2C_Init+0x72>
 80046b8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80046bc:	488a      	ldr	r0, [pc, #552]	@ (80048e8 <HAL_I2C_Init+0x298>)
 80046be:	f7fc fb41 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ca:	d304      	bcc.n	80046d6 <HAL_I2C_Init+0x86>
 80046cc:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80046d0:	4885      	ldr	r0, [pc, #532]	@ (80048e8 <HAL_I2C_Init+0x298>)
 80046d2:	f7fc fb37 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046de:	d009      	beq.n	80046f4 <HAL_I2C_Init+0xa4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046e8:	d004      	beq.n	80046f4 <HAL_I2C_Init+0xa4>
 80046ea:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80046ee:	487e      	ldr	r0, [pc, #504]	@ (80048e8 <HAL_I2C_Init+0x298>)
 80046f0:	f7fc fb28 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_I2C_Init+0xbe>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d004      	beq.n	800470e <HAL_I2C_Init+0xbe>
 8004704:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8004708:	4877      	ldr	r0, [pc, #476]	@ (80048e8 <HAL_I2C_Init+0x298>)
 800470a:	f7fc fb1b 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <HAL_I2C_Init+0xd4>
 800471a:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800471e:	4872      	ldr	r0, [pc, #456]	@ (80048e8 <HAL_I2C_Init+0x298>)
 8004720:	f7fc fb10 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_I2C_Init+0xee>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d004      	beq.n	800473e <HAL_I2C_Init+0xee>
 8004734:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8004738:	486b      	ldr	r0, [pc, #428]	@ (80048e8 <HAL_I2C_Init+0x298>)
 800473a:	f7fc fb03 	bl	8000d44 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_I2C_Init+0x108>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d004      	beq.n	8004758 <HAL_I2C_Init+0x108>
 800474e:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8004752:	4865      	ldr	r0, [pc, #404]	@ (80048e8 <HAL_I2C_Init+0x298>)
 8004754:	f7fc faf6 	bl	8000d44 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fc f83b 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2224      	movs	r2, #36	@ 0x24
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004798:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047a8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047aa:	f001 fc43 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 80047ae:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a4e      	ldr	r2, [pc, #312]	@ (80048f0 <HAL_I2C_Init+0x2a0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d807      	bhi.n	80047ca <HAL_I2C_Init+0x17a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a4d      	ldr	r2, [pc, #308]	@ (80048f4 <HAL_I2C_Init+0x2a4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	bf94      	ite	ls
 80047c2:	2301      	movls	r3, #1
 80047c4:	2300      	movhi	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e006      	b.n	80047d8 <HAL_I2C_Init+0x188>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a4a      	ldr	r2, [pc, #296]	@ (80048f8 <HAL_I2C_Init+0x2a8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	bf94      	ite	ls
 80047d2:	2301      	movls	r3, #1
 80047d4:	2300      	movhi	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0fb      	b.n	80049d8 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a46      	ldr	r2, [pc, #280]	@ (80048fc <HAL_I2C_Init+0x2ac>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	0c9b      	lsrs	r3, r3, #18
 80047ea:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a38      	ldr	r2, [pc, #224]	@ (80048f0 <HAL_I2C_Init+0x2a0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d802      	bhi.n	800481a <HAL_I2C_Init+0x1ca>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	3301      	adds	r3, #1
 8004818:	e009      	b.n	800482e <HAL_I2C_Init+0x1de>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	4a36      	ldr	r2, [pc, #216]	@ (8004900 <HAL_I2C_Init+0x2b0>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	3301      	adds	r3, #1
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	430b      	orrs	r3, r1
 8004834:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004840:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4929      	ldr	r1, [pc, #164]	@ (80048f0 <HAL_I2C_Init+0x2a0>)
 800484a:	428b      	cmp	r3, r1
 800484c:	d819      	bhi.n	8004882 <HAL_I2C_Init+0x232>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e59      	subs	r1, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	fbb1 f3f3 	udiv	r3, r1, r3
 800485c:	1c59      	adds	r1, r3, #1
 800485e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004862:	400b      	ands	r3, r1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_I2C_Init+0x22e>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e59      	subs	r1, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fbb1 f3f3 	udiv	r3, r1, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	e065      	b.n	800494a <HAL_I2C_Init+0x2fa>
 800487e:	2304      	movs	r3, #4
 8004880:	e063      	b.n	800494a <HAL_I2C_Init+0x2fa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d111      	bne.n	80048ae <HAL_I2C_Init+0x25e>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1e58      	subs	r0, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	440b      	add	r3, r1
 8004898:	fbb0 f3f3 	udiv	r3, r0, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e012      	b.n	80048d4 <HAL_I2C_Init+0x284>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1e58      	subs	r0, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	0099      	lsls	r1, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_I2C_Init+0x2b4>
 80048d8:	2301      	movs	r3, #1
 80048da:	e036      	b.n	800494a <HAL_I2C_Init+0x2fa>
 80048dc:	40005400 	.word	0x40005400
 80048e0:	40005800 	.word	0x40005800
 80048e4:	40005c00 	.word	0x40005c00
 80048e8:	0800a9bc 	.word	0x0800a9bc
 80048ec:	00061a80 	.word	0x00061a80
 80048f0:	000186a0 	.word	0x000186a0
 80048f4:	001e847f 	.word	0x001e847f
 80048f8:	003d08ff 	.word	0x003d08ff
 80048fc:	431bde83 	.word	0x431bde83
 8004900:	10624dd3 	.word	0x10624dd3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10e      	bne.n	800492a <HAL_I2C_Init+0x2da>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e58      	subs	r0, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	440b      	add	r3, r1
 800491a:	fbb0 f3f3 	udiv	r3, r0, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004928:	e00f      	b.n	800494a <HAL_I2C_Init+0x2fa>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1e58      	subs	r0, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	0099      	lsls	r1, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	6809      	ldr	r1, [r1, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004978:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6911      	ldr	r1, [r2, #16]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68d2      	ldr	r2, [r2, #12]
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	430b      	orrs	r3, r1
 800498c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1e7      	b.n	8004dc2 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a92      	ldr	r2, [pc, #584]	@ (8004c40 <HAL_I2S_Init+0x260>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_I2S_Init+0x4e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a90      	ldr	r2, [pc, #576]	@ (8004c44 <HAL_I2S_Init+0x264>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_I2S_Init+0x4e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a8f      	ldr	r2, [pc, #572]	@ (8004c48 <HAL_I2S_Init+0x268>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_I2S_Init+0x4e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a8d      	ldr	r2, [pc, #564]	@ (8004c4c <HAL_I2S_Init+0x26c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_I2S_Init+0x4e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a8c      	ldr	r2, [pc, #560]	@ (8004c50 <HAL_I2S_Init+0x270>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_I2S_Init+0x4e>
 8004a24:	f240 111b 	movw	r1, #283	@ 0x11b
 8004a28:	488a      	ldr	r0, [pc, #552]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004a2a:	f7fc f98b 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_I2S_Init+0x7e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3e:	d00e      	beq.n	8004a5e <HAL_I2S_Init+0x7e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a48:	d009      	beq.n	8004a5e <HAL_I2S_Init+0x7e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a52:	d004      	beq.n	8004a5e <HAL_I2S_Init+0x7e>
 8004a54:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004a58:	487e      	ldr	r0, [pc, #504]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004a5a:	f7fc f973 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d014      	beq.n	8004a90 <HAL_I2S_Init+0xb0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d010      	beq.n	8004a90 <HAL_I2S_Init+0xb0>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d00c      	beq.n	8004a90 <HAL_I2S_Init+0xb0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b30      	cmp	r3, #48	@ 0x30
 8004a7c:	d008      	beq.n	8004a90 <HAL_I2S_Init+0xb0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a84:	d004      	beq.n	8004a90 <HAL_I2S_Init+0xb0>
 8004a86:	f240 111d 	movw	r1, #285	@ 0x11d
 8004a8a:	4872      	ldr	r0, [pc, #456]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004a8c:	f7fc f95a 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <HAL_I2S_Init+0xda>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d00c      	beq.n	8004aba <HAL_I2S_Init+0xda>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d008      	beq.n	8004aba <HAL_I2S_Init+0xda>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d004      	beq.n	8004aba <HAL_I2S_Init+0xda>
 8004ab0:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004ab4:	4867      	ldr	r0, [pc, #412]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004ab6:	f7fc f945 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac2:	d008      	beq.n	8004ad6 <HAL_I2S_Init+0xf6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_I2S_Init+0xf6>
 8004acc:	f240 111f 	movw	r1, #287	@ 0x11f
 8004ad0:	4860      	ldr	r0, [pc, #384]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004ad2:	f7fc f937 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8004ade:	d304      	bcc.n	8004aea <HAL_I2S_Init+0x10a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c58 <HAL_I2S_Init+0x278>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d908      	bls.n	8004afc <HAL_I2S_Init+0x11c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d004      	beq.n	8004afc <HAL_I2S_Init+0x11c>
 8004af2:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004af6:	4857      	ldr	r0, [pc, #348]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004af8:	f7fc f924 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_I2S_Init+0x136>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d004      	beq.n	8004b16 <HAL_I2S_Init+0x136>
 8004b0c:	f240 1121 	movw	r1, #289	@ 0x121
 8004b10:	4850      	ldr	r0, [pc, #320]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004b12:	f7fc f917 	bl	8000d44 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d008      	beq.n	8004b30 <HAL_I2S_Init+0x150>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <HAL_I2S_Init+0x150>
 8004b26:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004b2a:	484a      	ldr	r0, [pc, #296]	@ (8004c54 <HAL_I2S_Init+0x274>)
 8004b2c:	f7fc f90a 	bl	8000d44 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a45      	ldr	r2, [pc, #276]	@ (8004c5c <HAL_I2S_Init+0x27c>)
 8004b48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fb fef2 	bl	8000934 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b66:	f023 030f 	bic.w	r3, r3, #15
 8004b6a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2202      	movs	r2, #2
 8004b72:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d073      	beq.n	8004c64 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b84:	2310      	movs	r3, #16
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e001      	b.n	8004b8e <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d802      	bhi.n	8004b9c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f001 fc73 	bl	8006488 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ba2:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bac:	d125      	bne.n	8004bfa <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	3305      	adds	r3, #5
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	e01f      	b.n	8004c18 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	3305      	adds	r3, #5
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e00e      	b.n	8004c18 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	3305      	adds	r3, #5
 8004c16:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4a11      	ldr	r2, [pc, #68]	@ (8004c60 <HAL_I2S_Init+0x280>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e016      	b.n	8004c6c <HAL_I2S_Init+0x28c>
 8004c3e:	bf00      	nop
 8004c40:	40013000 	.word	0x40013000
 8004c44:	40003800 	.word	0x40003800
 8004c48:	40003c00 	.word	0x40003c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40015000 	.word	0x40015000
 8004c54:	0800a9f4 	.word	0x0800a9f4
 8004c58:	0002ee00 	.word	0x0002ee00
 8004c5c:	08004ed3 	.word	0x08004ed3
 8004c60:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c64:	2302      	movs	r3, #2
 8004c66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d902      	bls.n	8004c78 <HAL_I2S_Init+0x298>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2bff      	cmp	r3, #255	@ 0xff
 8004c76:	d907      	bls.n	8004c88 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7c:	f043 0210 	orr.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e09c      	b.n	8004dc2 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	ea42 0103 	orr.w	r1, r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ca6:	f023 030f 	bic.w	r3, r3, #15
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6851      	ldr	r1, [r2, #4]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68d2      	ldr	r2, [r2, #12]
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6992      	ldr	r2, [r2, #24]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_I2S_Init+0x306>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d004      	beq.n	8004ce6 <HAL_I2S_Init+0x306>
 8004cdc:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004ce0:	483a      	ldr	r0, [pc, #232]	@ (8004dcc <HAL_I2S_Init+0x3ec>)
 8004ce2:	f7fc f82f 	bl	8000d44 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d161      	bne.n	8004db2 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a37      	ldr	r2, [pc, #220]	@ (8004dd0 <HAL_I2S_Init+0x3f0>)
 8004cf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a36      	ldr	r2, [pc, #216]	@ (8004dd4 <HAL_I2S_Init+0x3f4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2S_Init+0x322>
 8004cfe:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <HAL_I2S_Init+0x3f8>)
 8004d00:	e001      	b.n	8004d06 <HAL_I2S_Init+0x326>
 8004d02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4931      	ldr	r1, [pc, #196]	@ (8004dd4 <HAL_I2S_Init+0x3f4>)
 8004d0e:	428a      	cmp	r2, r1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2S_Init+0x336>
 8004d12:	4a31      	ldr	r2, [pc, #196]	@ (8004dd8 <HAL_I2S_Init+0x3f8>)
 8004d14:	e001      	b.n	8004d1a <HAL_I2S_Init+0x33a>
 8004d16:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004d1a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004d1e:	f023 030f 	bic.w	r3, r3, #15
 8004d22:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd4 <HAL_I2S_Init+0x3f4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2S_Init+0x352>
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd8 <HAL_I2S_Init+0x3f8>)
 8004d30:	e001      	b.n	8004d36 <HAL_I2S_Init+0x356>
 8004d32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d36:	2202      	movs	r2, #2
 8004d38:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	@ (8004dd4 <HAL_I2S_Init+0x3f4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_I2S_Init+0x368>
 8004d44:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <HAL_I2S_Init+0x3f8>)
 8004d46:	e001      	b.n	8004d4c <HAL_I2S_Init+0x36c>
 8004d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d58:	d003      	beq.n	8004d62 <HAL_I2S_Init+0x382>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	e001      	b.n	8004d6e <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	897b      	ldrh	r3, [r7, #10]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d9a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <HAL_I2S_Init+0x3f4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_I2S_Init+0x3ca>
 8004da6:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <HAL_I2S_Init+0x3f8>)
 8004da8:	e001      	b.n	8004dae <HAL_I2S_Init+0x3ce>
 8004daa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dae:	897a      	ldrh	r2, [r7, #10]
 8004db0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0800a9f4 	.word	0x0800a9f4
 8004dd0:	08004fe9 	.word	0x08004fe9
 8004dd4:	40003800 	.word	0x40003800
 8004dd8:	40003400 	.word	0x40003400

08004ddc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10e      	bne.n	8004e6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ffb8 	bl	8004ddc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	b292      	uxth	r2, r2
 8004e88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10e      	bne.n	8004eca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff93 	bl	8004df0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d13a      	bne.n	8004f64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d109      	bne.n	8004f0c <I2S_IRQHandler+0x3a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	2b40      	cmp	r3, #64	@ 0x40
 8004f04:	d102      	bne.n	8004f0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ffb4 	bl	8004e74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d126      	bne.n	8004f64 <I2S_IRQHandler+0x92>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d11f      	bne.n	8004f64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	f043 0202 	orr.w	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff50 	bl	8004e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d136      	bne.n	8004fde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d109      	bne.n	8004f8e <I2S_IRQHandler+0xbc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	2b80      	cmp	r3, #128	@ 0x80
 8004f86:	d102      	bne.n	8004f8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff45 	bl	8004e18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d122      	bne.n	8004fde <I2S_IRQHandler+0x10c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d11b      	bne.n	8004fde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd0:	f043 0204 	orr.w	r2, r3, #4
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff13 	bl	8004e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a92      	ldr	r2, [pc, #584]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005002:	4b92      	ldr	r3, [pc, #584]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005004:	e001      	b.n	800500a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a8b      	ldr	r2, [pc, #556]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005020:	4b8a      	ldr	r3, [pc, #552]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005022:	e001      	b.n	8005028 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005034:	d004      	beq.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 8099 	bne.w	8005172 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d107      	bne.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f925 	bl	80052a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9c8 	bl	8005404 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d13a      	bne.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d035      	beq.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6e      	ldr	r2, [pc, #440]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005092:	4b6e      	ldr	r3, [pc, #440]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005094:	e001      	b.n	800509a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4969      	ldr	r1, [pc, #420]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050a2:	428b      	cmp	r3, r1
 80050a4:	d101      	bne.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80050a6:	4b69      	ldr	r3, [pc, #420]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050a8:	e001      	b.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	f043 0202 	orr.w	r2, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fe88 	bl	8004e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	f040 80c3 	bne.w	8005286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80bd 	beq.w	8005286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800511a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a49      	ldr	r2, [pc, #292]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005126:	4b49      	ldr	r3, [pc, #292]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005128:	e001      	b.n	800512e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800512a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4944      	ldr	r1, [pc, #272]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005136:	428b      	cmp	r3, r1
 8005138:	d101      	bne.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800513a:	4b44      	ldr	r3, [pc, #272]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800513c:	e001      	b.n	8005142 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800513e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005142:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005146:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fe4a 	bl	8004e04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005170:	e089      	b.n	8005286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d107      	bne.n	800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8be 	bl	8005308 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8fd 	bl	80053a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	d12f      	bne.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02a      	beq.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051d6:	e001      	b.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80051d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4919      	ldr	r1, [pc, #100]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051e4:	428b      	cmp	r3, r1
 80051e6:	d101      	bne.n	80051ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051e8:	4b18      	ldr	r3, [pc, #96]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051ea:	e001      	b.n	80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fdfa 	bl	8004e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b08      	cmp	r3, #8
 8005218:	d136      	bne.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d031      	beq.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a07      	ldr	r2, [pc, #28]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800522e:	4b07      	ldr	r3, [pc, #28]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005230:	e001      	b.n	8005236 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4902      	ldr	r1, [pc, #8]	@ (8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800523e:	428b      	cmp	r3, r1
 8005240:	d106      	bne.n	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005242:	4b02      	ldr	r3, [pc, #8]	@ (800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005244:	e006      	b.n	8005254 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005246:	bf00      	nop
 8005248:	40003800 	.word	0x40003800
 800524c:	40003400 	.word	0x40003400
 8005250:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005254:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005258:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005268:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fdc0 	bl	8004e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005284:	e000      	b.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005286:	bf00      	nop
}
 8005288:	bf00      	nop
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	1c99      	adds	r1, r3, #2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80052b6:	881a      	ldrh	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d113      	bne.n	80052fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ffc9 	bl	8005290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	1c99      	adds	r1, r3, #2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6251      	str	r1, [r2, #36]	@ 0x24
 800531a:	8819      	ldrh	r1, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <I2SEx_TxISR_I2SExt+0x90>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <I2SEx_TxISR_I2SExt+0x22>
 8005326:	4b1d      	ldr	r3, [pc, #116]	@ (800539c <I2SEx_TxISR_I2SExt+0x94>)
 8005328:	e001      	b.n	800532e <I2SEx_TxISR_I2SExt+0x26>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800532e:	460a      	mov	r2, r1
 8005330:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d121      	bne.n	800538e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <I2SEx_TxISR_I2SExt+0x90>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <I2SEx_TxISR_I2SExt+0x50>
 8005354:	4b11      	ldr	r3, [pc, #68]	@ (800539c <I2SEx_TxISR_I2SExt+0x94>)
 8005356:	e001      	b.n	800535c <I2SEx_TxISR_I2SExt+0x54>
 8005358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	490d      	ldr	r1, [pc, #52]	@ (8005398 <I2SEx_TxISR_I2SExt+0x90>)
 8005364:	428b      	cmp	r3, r1
 8005366:	d101      	bne.n	800536c <I2SEx_TxISR_I2SExt+0x64>
 8005368:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <I2SEx_TxISR_I2SExt+0x94>)
 800536a:	e001      	b.n	8005370 <I2SEx_TxISR_I2SExt+0x68>
 800536c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005374:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff81 	bl	8005290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40003800 	.word	0x40003800
 800539c:	40003400 	.word	0x40003400

080053a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68d8      	ldr	r0, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	1c99      	adds	r1, r3, #2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80053b8:	b282      	uxth	r2, r0
 80053ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d113      	bne.n	80053fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff4a 	bl	8005290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <I2SEx_RxISR_I2SExt+0x90>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <I2SEx_RxISR_I2SExt+0x16>
 8005416:	4b20      	ldr	r3, [pc, #128]	@ (8005498 <I2SEx_RxISR_I2SExt+0x94>)
 8005418:	e001      	b.n	800541e <I2SEx_RxISR_I2SExt+0x1a>
 800541a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800541e:	68d8      	ldr	r0, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	1c99      	adds	r1, r3, #2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800542a:	b282      	uxth	r2, r0
 800542c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d121      	bne.n	800548a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a12      	ldr	r2, [pc, #72]	@ (8005494 <I2SEx_RxISR_I2SExt+0x90>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <I2SEx_RxISR_I2SExt+0x50>
 8005450:	4b11      	ldr	r3, [pc, #68]	@ (8005498 <I2SEx_RxISR_I2SExt+0x94>)
 8005452:	e001      	b.n	8005458 <I2SEx_RxISR_I2SExt+0x54>
 8005454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	490d      	ldr	r1, [pc, #52]	@ (8005494 <I2SEx_RxISR_I2SExt+0x90>)
 8005460:	428b      	cmp	r3, r1
 8005462:	d101      	bne.n	8005468 <I2SEx_RxISR_I2SExt+0x64>
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <I2SEx_RxISR_I2SExt+0x94>)
 8005466:	e001      	b.n	800546c <I2SEx_RxISR_I2SExt+0x68>
 8005468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800546c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005470:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff03 	bl	8005290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40003800 	.word	0x40003800
 8005498:	40003400 	.word	0x40003400

0800549c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e318      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d903      	bls.n	80054be <HAL_RCC_OscConfig+0x22>
 80054b6:	21e6      	movs	r1, #230	@ 0xe6
 80054b8:	4897      	ldr	r0, [pc, #604]	@ (8005718 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	f7fb fc43 	bl	8000d44 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8088 	beq.w	80055dc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <HAL_RCC_OscConfig+0x54>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054dc:	d008      	beq.n	80054f0 <HAL_RCC_OscConfig+0x54>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e6:	d003      	beq.n	80054f0 <HAL_RCC_OscConfig+0x54>
 80054e8:	21eb      	movs	r1, #235	@ 0xeb
 80054ea:	488b      	ldr	r0, [pc, #556]	@ (8005718 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	f7fb fc2a 	bl	8000d44 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054f0:	4b8a      	ldr	r3, [pc, #552]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d00c      	beq.n	8005516 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fc:	4b87      	ldr	r3, [pc, #540]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005504:	2b08      	cmp	r3, #8
 8005506:	d112      	bne.n	800552e <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005508:	4b84      	ldr	r3, [pc, #528]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005514:	d10b      	bne.n	800552e <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005516:	4b81      	ldr	r3, [pc, #516]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d05b      	beq.n	80055da <HAL_RCC_OscConfig+0x13e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d157      	bne.n	80055da <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e2d8      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0xaa>
 8005538:	4b78      	ldr	r3, [pc, #480]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a77      	ldr	r2, [pc, #476]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e01d      	b.n	8005582 <HAL_RCC_OscConfig+0xe6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800554e:	d10c      	bne.n	800556a <HAL_RCC_OscConfig+0xce>
 8005550:	4b72      	ldr	r3, [pc, #456]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a71      	ldr	r2, [pc, #452]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4b6f      	ldr	r3, [pc, #444]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6e      	ldr	r2, [pc, #440]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e00b      	b.n	8005582 <HAL_RCC_OscConfig+0xe6>
 800556a:	4b6c      	ldr	r3, [pc, #432]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6b      	ldr	r2, [pc, #428]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	4b69      	ldr	r3, [pc, #420]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800557c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d013      	beq.n	80055b2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558a:	f7fb fd9f 	bl	80010cc <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005592:	f7fb fd9b 	bl	80010cc <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	@ 0x64
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e29d      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a4:	4b5d      	ldr	r3, [pc, #372]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0xf6>
 80055b0:	e014      	b.n	80055dc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fb fd8b 	bl	80010cc <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ba:	f7fb fd87 	bl	80010cc <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b64      	cmp	r3, #100	@ 0x64
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e289      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055cc:	4b53      	ldr	r3, [pc, #332]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x11e>
 80055d8:	e000      	b.n	80055dc <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d079      	beq.n	80056dc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_OscConfig+0x166>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d004      	beq.n	8005602 <HAL_RCC_OscConfig+0x166>
 80055f8:	f240 111d 	movw	r1, #285	@ 0x11d
 80055fc:	4846      	ldr	r0, [pc, #280]	@ (8005718 <HAL_RCC_OscConfig+0x27c>)
 80055fe:	f7fb fba1 	bl	8000d44 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b1f      	cmp	r3, #31
 8005608:	d904      	bls.n	8005614 <HAL_RCC_OscConfig+0x178>
 800560a:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800560e:	4842      	ldr	r0, [pc, #264]	@ (8005718 <HAL_RCC_OscConfig+0x27c>)
 8005610:	f7fb fb98 	bl	8000d44 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005614:	4b41      	ldr	r3, [pc, #260]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005620:	4b3e      	ldr	r3, [pc, #248]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005628:	2b08      	cmp	r3, #8
 800562a:	d11c      	bne.n	8005666 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562c:	4b3b      	ldr	r3, [pc, #236]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d116      	bne.n	8005666 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005638:	4b38      	ldr	r3, [pc, #224]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_OscConfig+0x1b4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e247      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b32      	ldr	r3, [pc, #200]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	492f      	ldr	r1, [pc, #188]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005664:	e03a      	b.n	80056dc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d020      	beq.n	80056b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <HAL_RCC_OscConfig+0x284>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fb fd2a 	bl	80010cc <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567c:	f7fb fd26 	bl	80010cc <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e228      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568e:	4b23      	ldr	r3, [pc, #140]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	491c      	ldr	r1, [pc, #112]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
 80056ae:	e015      	b.n	80056dc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_RCC_OscConfig+0x284>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fb fd09 	bl	80010cc <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056be:	f7fb fd05 	bl	80010cc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e207      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d0:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_RCC_OscConfig+0x280>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d045      	beq.n	8005774 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCC_OscConfig+0x266>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d004      	beq.n	8005702 <HAL_RCC_OscConfig+0x266>
 80056f8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80056fc:	4806      	ldr	r0, [pc, #24]	@ (8005718 <HAL_RCC_OscConfig+0x27c>)
 80056fe:	f7fb fb21 	bl	8000d44 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01e      	beq.n	8005748 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_RCC_OscConfig+0x288>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fb fcdc 	bl	80010cc <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	e010      	b.n	800573a <HAL_RCC_OscConfig+0x29e>
 8005718:	0800aa2c 	.word	0x0800aa2c
 800571c:	40023800 	.word	0x40023800
 8005720:	42470000 	.word	0x42470000
 8005724:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005728:	f7fb fcd0 	bl	80010cc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1d2      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x28c>
 8005746:	e015      	b.n	8005774 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005748:	4b5b      	ldr	r3, [pc, #364]	@ (80058b8 <HAL_RCC_OscConfig+0x41c>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574e:	f7fb fcbd 	bl	80010cc <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005756:	f7fb fcb9 	bl	80010cc <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1bb      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005768:	4b52      	ldr	r3, [pc, #328]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800576a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80b0 	beq.w	80058e2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x30c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d008      	beq.n	80057a8 <HAL_RCC_OscConfig+0x30c>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d004      	beq.n	80057a8 <HAL_RCC_OscConfig+0x30c>
 800579e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80057a2:	4846      	ldr	r0, [pc, #280]	@ (80058bc <HAL_RCC_OscConfig+0x420>)
 80057a4:	f7fb face 	bl	8000d44 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a8:	4b42      	ldr	r3, [pc, #264]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10f      	bne.n	80057d4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b4:	2300      	movs	r3, #0
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	4a3d      	ldr	r2, [pc, #244]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80057c4:	4b3b      	ldr	r3, [pc, #236]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	4b3a      	ldr	r3, [pc, #232]	@ (80058c0 <HAL_RCC_OscConfig+0x424>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d118      	bne.n	8005812 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e0:	4b37      	ldr	r3, [pc, #220]	@ (80058c0 <HAL_RCC_OscConfig+0x424>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a36      	ldr	r2, [pc, #216]	@ (80058c0 <HAL_RCC_OscConfig+0x424>)
 80057e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ec:	f7fb fc6e 	bl	80010cc <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f4:	f7fb fc6a 	bl	80010cc <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e16c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_RCC_OscConfig+0x424>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d106      	bne.n	8005828 <HAL_RCC_OscConfig+0x38c>
 800581a:	4b26      	ldr	r3, [pc, #152]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581e:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6713      	str	r3, [r2, #112]	@ 0x70
 8005826:	e01c      	b.n	8005862 <HAL_RCC_OscConfig+0x3c6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d10c      	bne.n	800584a <HAL_RCC_OscConfig+0x3ae>
 8005830:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	4a1f      	ldr	r2, [pc, #124]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	@ 0x70
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	4a1c      	ldr	r2, [pc, #112]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	@ 0x70
 8005848:	e00b      	b.n	8005862 <HAL_RCC_OscConfig+0x3c6>
 800584a:	4b1a      	ldr	r3, [pc, #104]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584e:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	@ 0x70
 8005856:	4b17      	ldr	r3, [pc, #92]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585a:	4a16      	ldr	r2, [pc, #88]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d015      	beq.n	8005896 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fb fc2f 	bl	80010cc <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fb fc2b 	bl	80010cc <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e12b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005888:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <HAL_RCC_OscConfig+0x418>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ee      	beq.n	8005872 <HAL_RCC_OscConfig+0x3d6>
 8005894:	e01c      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005896:	f7fb fc19 	bl	80010cc <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589c:	e012      	b.n	80058c4 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fb fc15 	bl	80010cc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d909      	bls.n	80058c4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e115      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
 80058b4:	40023800 	.word	0x40023800
 80058b8:	42470e80 	.word	0x42470e80
 80058bc:	0800aa2c 	.word	0x0800aa2c
 80058c0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c4:	4b88      	ldr	r3, [pc, #544]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d105      	bne.n	80058e2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d6:	4b84      	ldr	r3, [pc, #528]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	4a83      	ldr	r2, [pc, #524]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 80058dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_RCC_OscConfig+0x468>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d008      	beq.n	8005904 <HAL_RCC_OscConfig+0x468>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d004      	beq.n	8005904 <HAL_RCC_OscConfig+0x468>
 80058fa:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80058fe:	487b      	ldr	r0, [pc, #492]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 8005900:	f7fb fa20 	bl	8000d44 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80e8 	beq.w	8005ade <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800590e:	4b76      	ldr	r3, [pc, #472]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b08      	cmp	r3, #8
 8005918:	f000 80a9 	beq.w	8005a6e <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b02      	cmp	r3, #2
 8005922:	f040 808d 	bne.w	8005a40 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_OscConfig+0x4a6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005936:	d004      	beq.n	8005942 <HAL_RCC_OscConfig+0x4a6>
 8005938:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 800593c:	486b      	ldr	r0, [pc, #428]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 800593e:	f7fb fa01 	bl	8000d44 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d903      	bls.n	8005952 <HAL_RCC_OscConfig+0x4b6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005950:	d904      	bls.n	800595c <HAL_RCC_OscConfig+0x4c0>
 8005952:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005956:	4865      	ldr	r0, [pc, #404]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 8005958:	f7fb f9f4 	bl	8000d44 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	2b31      	cmp	r3, #49	@ 0x31
 8005962:	d904      	bls.n	800596e <HAL_RCC_OscConfig+0x4d2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800596c:	d904      	bls.n	8005978 <HAL_RCC_OscConfig+0x4dc>
 800596e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8005972:	485e      	ldr	r0, [pc, #376]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 8005974:	f7fb f9e6 	bl	8000d44 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	2b02      	cmp	r3, #2
 800597e:	d010      	beq.n	80059a2 <HAL_RCC_OscConfig+0x506>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	2b04      	cmp	r3, #4
 8005986:	d00c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x506>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	2b06      	cmp	r3, #6
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_OscConfig+0x506>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	2b08      	cmp	r3, #8
 8005996:	d004      	beq.n	80059a2 <HAL_RCC_OscConfig+0x506>
 8005998:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800599c:	4853      	ldr	r0, [pc, #332]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 800599e:	f7fb f9d1 	bl	8000d44 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d903      	bls.n	80059b2 <HAL_RCC_OscConfig+0x516>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d904      	bls.n	80059bc <HAL_RCC_OscConfig+0x520>
 80059b2:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80059b6:	484d      	ldr	r0, [pc, #308]	@ (8005aec <HAL_RCC_OscConfig+0x650>)
 80059b8:	f7fb f9c4 	bl	8000d44 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059bc:	4b4c      	ldr	r3, [pc, #304]	@ (8005af0 <HAL_RCC_OscConfig+0x654>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fb fb83 	bl	80010cc <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fb fb7f 	bl	80010cc <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e081      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059dc:	4b42      	ldr	r3, [pc, #264]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	3b01      	subs	r3, #1
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	061b      	lsls	r3, r3, #24
 8005a0c:	4936      	ldr	r1, [pc, #216]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a12:	4b37      	ldr	r3, [pc, #220]	@ (8005af0 <HAL_RCC_OscConfig+0x654>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fb fb58 	bl	80010cc <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a20:	f7fb fb54 	bl	80010cc <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e056      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a32:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0x584>
 8005a3e:	e04e      	b.n	8005ade <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a40:	4b2b      	ldr	r3, [pc, #172]	@ (8005af0 <HAL_RCC_OscConfig+0x654>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a46:	f7fb fb41 	bl	80010cc <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fb fb3d 	bl	80010cc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e03f      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x5b2>
 8005a6c:	e037      	b.n	8005ade <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e032      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae8 <HAL_RCC_OscConfig+0x64c>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d028      	beq.n	8005ada <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d121      	bne.n	8005ada <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d11a      	bne.n	8005ada <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005aaa:	4013      	ands	r3, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ab0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d111      	bne.n	8005ada <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d107      	bne.n	8005ada <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d001      	beq.n	8005ade <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	0800aa2c 	.word	0x0800aa2c
 8005af0:	42470060 	.word	0x42470060

08005af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e174      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x24>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b0f      	cmp	r3, #15
 8005b16:	d904      	bls.n	8005b22 <HAL_RCC_ClockConfig+0x2e>
 8005b18:	f240 215a 	movw	r1, #602	@ 0x25a
 8005b1c:	487b      	ldr	r0, [pc, #492]	@ (8005d0c <HAL_RCC_ClockConfig+0x218>)
 8005b1e:	f7fb f911 	bl	8000d44 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d019      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d016      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d010      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d00d      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d007      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b07      	cmp	r3, #7
 8005b50:	d004      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x68>
 8005b52:	f240 215b 	movw	r1, #603	@ 0x25b
 8005b56:	486d      	ldr	r0, [pc, #436]	@ (8005d0c <HAL_RCC_ClockConfig+0x218>)
 8005b58:	f7fb f8f4 	bl	8000d44 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90c      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b69      	ldr	r3, [pc, #420]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b67      	ldr	r3, [pc, #412]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e136      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d049      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b57      	ldr	r3, [pc, #348]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4a56      	ldr	r2, [pc, #344]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d024      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b80      	cmp	r3, #128	@ 0x80
 8005bce:	d020      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b90      	cmp	r3, #144	@ 0x90
 8005bd6:	d01c      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bde:	d018      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2bb0      	cmp	r3, #176	@ 0xb0
 8005be6:	d014      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bee:	d010      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2bd0      	cmp	r3, #208	@ 0xd0
 8005bf6:	d00c      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2be0      	cmp	r3, #224	@ 0xe0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2bf0      	cmp	r3, #240	@ 0xf0
 8005c06:	d004      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11e>
 8005c08:	f240 217e 	movw	r1, #638	@ 0x27e
 8005c0c:	483f      	ldr	r0, [pc, #252]	@ (8005d0c <HAL_RCC_ClockConfig+0x218>)
 8005c0e:	f7fb f899 	bl	8000d44 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c12:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	493d      	ldr	r1, [pc, #244]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d059      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x166>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d00c      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x166>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d008      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x166>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d004      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x166>
 8005c50:	f240 2185 	movw	r1, #645	@ 0x285
 8005c54:	482d      	ldr	r0, [pc, #180]	@ (8005d0c <HAL_RCC_ClockConfig+0x218>)
 8005c56:	f7fb f875 	bl	8000d44 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	4b2c      	ldr	r3, [pc, #176]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d119      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0bf      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d003      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c82:	4b24      	ldr	r3, [pc, #144]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0af      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c92:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0a7      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 0203 	bic.w	r2, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4919      	ldr	r1, [pc, #100]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb4:	f7fb fa0a 	bl	80010cc <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cbc:	f7fb fa06 	bl	80010cc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e08f      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <HAL_RCC_ClockConfig+0x220>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 020c 	and.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d1eb      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d212      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <HAL_RCC_ClockConfig+0x21c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d007      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e072      	b.n	8005df2 <HAL_RCC_ClockConfig+0x2fe>
 8005d0c:	0800aa2c 	.word	0x0800aa2c
 8005d10:	40023c00 	.word	0x40023c00
 8005d14:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d025      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d018      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x26a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d34:	d013      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x26a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d3e:	d00e      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x26a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005d48:	d009      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x26a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005d52:	d004      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x26a>
 8005d54:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8005d58:	4828      	ldr	r0, [pc, #160]	@ (8005dfc <HAL_RCC_ClockConfig+0x308>)
 8005d5a:	f7fa fff3 	bl	8000d44 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d5e:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <HAL_RCC_ClockConfig+0x30c>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4925      	ldr	r1, [pc, #148]	@ (8005e00 <HAL_RCC_ClockConfig+0x30c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d026      	beq.n	8005dca <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d018      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2c2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8c:	d013      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2c2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d96:	d00e      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2c2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005da0:	d009      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2c2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005daa:	d004      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2c2>
 8005dac:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8005db0:	4812      	ldr	r0, [pc, #72]	@ (8005dfc <HAL_RCC_ClockConfig+0x308>)
 8005db2:	f7fa ffc7 	bl	8000d44 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005db6:	4b12      	ldr	r3, [pc, #72]	@ (8005e00 <HAL_RCC_ClockConfig+0x30c>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	490e      	ldr	r1, [pc, #56]	@ (8005e00 <HAL_RCC_ClockConfig+0x30c>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dca:	f000 f821 	bl	8005e10 <HAL_RCC_GetSysClockFreq>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <HAL_RCC_ClockConfig+0x30c>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	490a      	ldr	r1, [pc, #40]	@ (8005e04 <HAL_RCC_ClockConfig+0x310>)
 8005ddc:	5ccb      	ldrb	r3, [r1, r3]
 8005dde:	fa22 f303 	lsr.w	r3, r2, r3
 8005de2:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <HAL_RCC_ClockConfig+0x314>)
 8005de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005de6:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <HAL_RCC_ClockConfig+0x318>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fb f92a 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	0800aa2c 	.word	0x0800aa2c
 8005e00:	40023800 	.word	0x40023800
 8005e04:	0800aadc 	.word	0x0800aadc
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	20000004 	.word	0x20000004

08005e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e14:	b094      	sub	sp, #80	@ 0x50
 8005e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e28:	4b79      	ldr	r3, [pc, #484]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 030c 	and.w	r3, r3, #12
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d00d      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x40>
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	f200 80e1 	bhi.w	8005ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0x34>
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d003      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e42:	e0db      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e44:	4b73      	ldr	r3, [pc, #460]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e48:	e0db      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e4a:	4b73      	ldr	r3, [pc, #460]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e4e:	e0d8      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e50:	4b6f      	ldr	r3, [pc, #444]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d063      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e66:	4b6a      	ldr	r3, [pc, #424]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	f04f 0000 	mov.w	r0, #0
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	0159      	lsls	r1, r3, #5
 8005e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e94:	0150      	lsls	r0, r2, #5
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	1a51      	subs	r1, r2, r1
 8005e9e:	6139      	str	r1, [r7, #16]
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	018b      	lsls	r3, r1, #6
 8005eb8:	4651      	mov	r1, sl
 8005eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ebe:	4651      	mov	r1, sl
 8005ec0:	018a      	lsls	r2, r1, #6
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ec8:	4659      	mov	r1, fp
 8005eca:	eb63 0901 	sbc.w	r9, r3, r1
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	4699      	mov	r9, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	eb18 0303 	adds.w	r3, r8, r3
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	462b      	mov	r3, r5
 8005ef0:	eb49 0303 	adc.w	r3, r9, r3
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f02:	4629      	mov	r1, r5
 8005f04:	024b      	lsls	r3, r1, #9
 8005f06:	4621      	mov	r1, r4
 8005f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	024a      	lsls	r2, r1, #9
 8005f10:	4610      	mov	r0, r2
 8005f12:	4619      	mov	r1, r3
 8005f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f16:	2200      	movs	r2, #0
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f20:	f7fa f95a 	bl	80001d8 <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4613      	mov	r3, r2
 8005f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f2c:	e058      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f2e:	4b38      	ldr	r3, [pc, #224]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	099b      	lsrs	r3, r3, #6
 8005f34:	2200      	movs	r2, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	4611      	mov	r1, r2
 8005f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	2300      	movs	r3, #0
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	f04f 0000 	mov.w	r0, #0
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	0159      	lsls	r1, r3, #5
 8005f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f5a:	0150      	lsls	r0, r2, #5
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4641      	mov	r1, r8
 8005f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f66:	4649      	mov	r1, r9
 8005f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f80:	ebb2 040a 	subs.w	r4, r2, sl
 8005f84:	eb63 050b 	sbc.w	r5, r3, fp
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	00eb      	lsls	r3, r5, #3
 8005f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f96:	00e2      	lsls	r2, r4, #3
 8005f98:	4614      	mov	r4, r2
 8005f9a:	461d      	mov	r5, r3
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	18e3      	adds	r3, r4, r3
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	eb45 0303 	adc.w	r3, r5, r3
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	028b      	lsls	r3, r1, #10
 8005fba:	4621      	mov	r1, r4
 8005fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	028a      	lsls	r2, r1, #10
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fca:	2200      	movs	r2, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	61fa      	str	r2, [r7, #28]
 8005fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd4:	f7fa f900 	bl	80001d8 <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	3301      	adds	r3, #1
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ffa:	e002      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ffc:	4b05      	ldr	r3, [pc, #20]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006004:	4618      	mov	r0, r3
 8006006:	3750      	adds	r7, #80	@ 0x50
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800
 8006014:	00f42400 	.word	0x00f42400
 8006018:	007a1200 	.word	0x007a1200

0800601c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006020:	4b03      	ldr	r3, [pc, #12]	@ (8006030 <HAL_RCC_GetHCLKFreq+0x14>)
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000000 	.word	0x20000000

08006034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006038:	f7ff fff0 	bl	800601c <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0a9b      	lsrs	r3, r3, #10
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4903      	ldr	r1, [pc, #12]	@ (8006058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40023800 	.word	0x40023800
 8006058:	0800aaec 	.word	0x0800aaec

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	d904      	bls.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800607c:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 8006080:	4834      	ldr	r0, [pc, #208]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006082:	f7fa fe5f 	bl	8000d44 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800609a:	2b00      	cmp	r3, #0
 800609c:	d066      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d903      	bls.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	d904      	bls.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80060ae:	f640 2104 	movw	r1, #2564	@ 0xa04
 80060b2:	4828      	ldr	r0, [pc, #160]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80060b4:	f7fa fe46 	bl	8000d44 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b31      	cmp	r3, #49	@ 0x31
 80060be:	d904      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80060c8:	d904      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80060ca:	f640 2105 	movw	r1, #2565	@ 0xa05
 80060ce:	4821      	ldr	r0, [pc, #132]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80060d0:	f7fa fe38 	bl	8000d44 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d903      	bls.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80060e2:	d904      	bls.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x92>
 80060e4:	f640 2107 	movw	r1, #2567	@ 0xa07
 80060e8:	481a      	ldr	r0, [pc, #104]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80060ea:	f7fa fe2b 	bl	8000d44 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060f4:	f7fa ffea 	bl	80010cc <HAL_GetTick>
 80060f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060fc:	f7fa ffe6 	bl	80010cc <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e1b3      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800610e:	4b13      	ldr	r3, [pc, #76]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	019b      	lsls	r3, r3, #6
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	071b      	lsls	r3, r3, #28
 800612c:	490b      	ldr	r1, [pc, #44]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006134:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800613a:	f7fa ffc7 	bl	80010cc <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006140:	e00e      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006142:	f7fa ffc3 	bl	80010cc <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d907      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e190      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006154:	0800aa64 	.word	0x0800aa64
 8006158:	42470068 	.word	0x42470068
 800615c:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006160:	4b88      	ldr	r3, [pc, #544]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ea      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8173 	beq.w	8006460 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006182:	f000 80a6 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800618e:	f000 80a0 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	4a7c      	ldr	r2, [pc, #496]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	f000 809a 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4a7a      	ldr	r2, [pc, #488]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	f000 8094 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4a78      	ldr	r2, [pc, #480]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	f000 808e 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4a76      	ldr	r2, [pc, #472]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	f000 8088 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4a74      	ldr	r2, [pc, #464]	@ (8006398 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	f000 8082 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	4a72      	ldr	r2, [pc, #456]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d07c      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4a70      	ldr	r2, [pc, #448]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d077      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	4a6f      	ldr	r2, [pc, #444]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d072      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	4a6d      	ldr	r2, [pc, #436]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d06d      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	4a6c      	ldr	r2, [pc, #432]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d068      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a6a      	ldr	r2, [pc, #424]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d063      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	4a69      	ldr	r2, [pc, #420]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d05e      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	4a67      	ldr	r2, [pc, #412]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d059      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4a66      	ldr	r2, [pc, #408]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d054      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	4a64      	ldr	r2, [pc, #400]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d04f      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	4a63      	ldr	r2, [pc, #396]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d04a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	4a61      	ldr	r2, [pc, #388]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d045      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	4a60      	ldr	r2, [pc, #384]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d040      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4a5e      	ldr	r2, [pc, #376]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d03b      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4a5d      	ldr	r2, [pc, #372]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d036      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4a5b      	ldr	r2, [pc, #364]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d031      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	4a5a      	ldr	r2, [pc, #360]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d02c      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4a58      	ldr	r2, [pc, #352]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d027      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	4a57      	ldr	r2, [pc, #348]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d022      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a55      	ldr	r2, [pc, #340]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	4a54      	ldr	r2, [pc, #336]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d018      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4a52      	ldr	r2, [pc, #328]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	4a51      	ldr	r2, [pc, #324]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	4a4f      	ldr	r2, [pc, #316]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062c8:	f640 2137 	movw	r1, #2615	@ 0xa37
 80062cc:	484c      	ldr	r0, [pc, #304]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80062ce:	f7fa fd39 	bl	8000d44 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062da:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80062dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062e2:	4b28      	ldr	r3, [pc, #160]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062ee:	4b45      	ldr	r3, [pc, #276]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a44      	ldr	r2, [pc, #272]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062fa:	f7fa fee7 	bl	80010cc <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fa fee3 	bl	80010cc <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e0b0      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006314:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006320:	4b18      	ldr	r3, [pc, #96]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006328:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d073      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d06c      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633e:	4b11      	ldr	r3, [pc, #68]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006346:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006348:	4b2f      	ldr	r3, [pc, #188]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634e:	4b2e      	ldr	r3, [pc, #184]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006354:	4a0b      	ldr	r2, [pc, #44]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d158      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006366:	f7fa feb1 	bl	80010cc <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636c:	e04e      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fa fead 	bl	80010cc <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d945      	bls.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e078      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006384:	40023800 	.word	0x40023800
 8006388:	00020300 	.word	0x00020300
 800638c:	00030300 	.word	0x00030300
 8006390:	00040300 	.word	0x00040300
 8006394:	00050300 	.word	0x00050300
 8006398:	00060300 	.word	0x00060300
 800639c:	00070300 	.word	0x00070300
 80063a0:	00080300 	.word	0x00080300
 80063a4:	00090300 	.word	0x00090300
 80063a8:	000a0300 	.word	0x000a0300
 80063ac:	000b0300 	.word	0x000b0300
 80063b0:	000c0300 	.word	0x000c0300
 80063b4:	000d0300 	.word	0x000d0300
 80063b8:	000e0300 	.word	0x000e0300
 80063bc:	000f0300 	.word	0x000f0300
 80063c0:	00100300 	.word	0x00100300
 80063c4:	00110300 	.word	0x00110300
 80063c8:	00120300 	.word	0x00120300
 80063cc:	00130300 	.word	0x00130300
 80063d0:	00140300 	.word	0x00140300
 80063d4:	00150300 	.word	0x00150300
 80063d8:	00160300 	.word	0x00160300
 80063dc:	00170300 	.word	0x00170300
 80063e0:	00180300 	.word	0x00180300
 80063e4:	00190300 	.word	0x00190300
 80063e8:	001a0300 	.word	0x001a0300
 80063ec:	001b0300 	.word	0x001b0300
 80063f0:	001c0300 	.word	0x001c0300
 80063f4:	001d0300 	.word	0x001d0300
 80063f8:	001e0300 	.word	0x001e0300
 80063fc:	001f0300 	.word	0x001f0300
 8006400:	0800aa64 	.word	0x0800aa64
 8006404:	40007000 	.word	0x40007000
 8006408:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0aa      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006424:	d10d      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006426:	4b16      	ldr	r3, [pc, #88]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643a:	4911      	ldr	r1, [pc, #68]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800643c:	4313      	orrs	r3, r2
 800643e:	608b      	str	r3, [r1, #8]
 8006440:	e005      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4a0e      	ldr	r2, [pc, #56]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006448:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800644c:	6093      	str	r3, [r2, #8]
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006450:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645a:	4909      	ldr	r1, [pc, #36]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800645c:	4313      	orrs	r3, r2
 800645e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	7d1a      	ldrb	r2, [r3, #20]
 8006470:	4b04      	ldr	r3, [pc, #16]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006472:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023800 	.word	0x40023800
 8006484:	424711e0 	.word	0x424711e0

08006488 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d141      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80064a6:	4b25      	ldr	r3, [pc, #148]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d006      	beq.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064bc:	d131      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80064be:	4b20      	ldr	r3, [pc, #128]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064c0:	617b      	str	r3, [r7, #20]
          break;
 80064c2:	e031      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80064c4:	4b1d      	ldr	r3, [pc, #116]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064d0:	d109      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80064d2:	4b1a      	ldr	r3, [pc, #104]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064dc:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	e008      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f0:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064f8:	4b10      	ldr	r3, [pc, #64]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800650e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006512:	0f1b      	lsrs	r3, r3, #28
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	617b      	str	r3, [r7, #20]
          break;
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
          break;
 8006526:	bf00      	nop
        }
      }
      break;
 8006528:	e000      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800652a:	bf00      	nop
    }
  }
  return frequency;
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
 8006540:	00bb8000 	.word	0x00bb8000
 8006544:	007a1200 	.word	0x007a1200
 8006548:	00f42400 	.word	0x00f42400

0800654c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e18c      	b.n	8006878 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a75      	ldr	r2, [pc, #468]	@ (8006738 <HAL_SPI_Init+0x1ec>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d018      	beq.n	800659a <HAL_SPI_Init+0x4e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a73      	ldr	r2, [pc, #460]	@ (800673c <HAL_SPI_Init+0x1f0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <HAL_SPI_Init+0x4e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a72      	ldr	r2, [pc, #456]	@ (8006740 <HAL_SPI_Init+0x1f4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <HAL_SPI_Init+0x4e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a70      	ldr	r2, [pc, #448]	@ (8006744 <HAL_SPI_Init+0x1f8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <HAL_SPI_Init+0x4e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6f      	ldr	r2, [pc, #444]	@ (8006748 <HAL_SPI_Init+0x1fc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <HAL_SPI_Init+0x4e>
 8006590:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8006594:	486d      	ldr	r0, [pc, #436]	@ (800674c <HAL_SPI_Init+0x200>)
 8006596:	f7fa fbd5 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_SPI_Init+0x6a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065aa:	d004      	beq.n	80065b6 <HAL_SPI_Init+0x6a>
 80065ac:	f240 1141 	movw	r1, #321	@ 0x141
 80065b0:	4866      	ldr	r0, [pc, #408]	@ (800674c <HAL_SPI_Init+0x200>)
 80065b2:	f7fa fbc7 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <HAL_SPI_Init+0x90>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c6:	d009      	beq.n	80065dc <HAL_SPI_Init+0x90>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d0:	d004      	beq.n	80065dc <HAL_SPI_Init+0x90>
 80065d2:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 80065d6:	485d      	ldr	r0, [pc, #372]	@ (800674c <HAL_SPI_Init+0x200>)
 80065d8:	f7fa fbb4 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e4:	d008      	beq.n	80065f8 <HAL_SPI_Init+0xac>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <HAL_SPI_Init+0xac>
 80065ee:	f240 1143 	movw	r1, #323	@ 0x143
 80065f2:	4856      	ldr	r0, [pc, #344]	@ (800674c <HAL_SPI_Init+0x200>)
 80065f4:	f7fa fba6 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006600:	d00d      	beq.n	800661e <HAL_SPI_Init+0xd2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_SPI_Init+0xd2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006612:	d004      	beq.n	800661e <HAL_SPI_Init+0xd2>
 8006614:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8006618:	484c      	ldr	r0, [pc, #304]	@ (800674c <HAL_SPI_Init+0x200>)
 800661a:	f7fa fb93 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d020      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d01c      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	2b10      	cmp	r3, #16
 8006634:	d018      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	2b18      	cmp	r3, #24
 800663c:	d014      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	2b20      	cmp	r3, #32
 8006644:	d010      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b28      	cmp	r3, #40	@ 0x28
 800664c:	d00c      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b30      	cmp	r3, #48	@ 0x30
 8006654:	d008      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	2b38      	cmp	r3, #56	@ 0x38
 800665c:	d004      	beq.n	8006668 <HAL_SPI_Init+0x11c>
 800665e:	f240 1145 	movw	r1, #325	@ 0x145
 8006662:	483a      	ldr	r0, [pc, #232]	@ (800674c <HAL_SPI_Init+0x200>)
 8006664:	f7fa fb6e 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_SPI_Init+0x136>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	2b80      	cmp	r3, #128	@ 0x80
 8006676:	d004      	beq.n	8006682 <HAL_SPI_Init+0x136>
 8006678:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800667c:	4833      	ldr	r0, [pc, #204]	@ (800674c <HAL_SPI_Init+0x200>)
 800667e:	f7fa fb61 	bl	8000d44 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <HAL_SPI_Init+0x150>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	2b10      	cmp	r3, #16
 8006690:	d004      	beq.n	800669c <HAL_SPI_Init+0x150>
 8006692:	f240 1147 	movw	r1, #327	@ 0x147
 8006696:	482d      	ldr	r0, [pc, #180]	@ (800674c <HAL_SPI_Init+0x200>)
 8006698:	f7fa fb54 	bl	8000d44 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d155      	bne.n	8006750 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_SPI_Init+0x172>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d004      	beq.n	80066be <HAL_SPI_Init+0x172>
 80066b4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80066b8:	4824      	ldr	r0, [pc, #144]	@ (800674c <HAL_SPI_Init+0x200>)
 80066ba:	f7fa fb43 	bl	8000d44 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_SPI_Init+0x18c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d004      	beq.n	80066d8 <HAL_SPI_Init+0x18c>
 80066ce:	f240 114b 	movw	r1, #331	@ 0x14b
 80066d2:	481e      	ldr	r0, [pc, #120]	@ (800674c <HAL_SPI_Init+0x200>)
 80066d4:	f7fa fb36 	bl	8000d44 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066e0:	d125      	bne.n	800672e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d05d      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d059      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d055      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b18      	cmp	r3, #24
 8006700:	d051      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b20      	cmp	r3, #32
 8006708:	d04d      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	2b28      	cmp	r3, #40	@ 0x28
 8006710:	d049      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	2b30      	cmp	r3, #48	@ 0x30
 8006718:	d045      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	2b38      	cmp	r3, #56	@ 0x38
 8006720:	d041      	beq.n	80067a6 <HAL_SPI_Init+0x25a>
 8006722:	f240 114f 	movw	r1, #335	@ 0x14f
 8006726:	4809      	ldr	r0, [pc, #36]	@ (800674c <HAL_SPI_Init+0x200>)
 8006728:	f7fa fb0c 	bl	8000d44 <assert_failed>
 800672c:	e03b      	b.n	80067a6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	61da      	str	r2, [r3, #28]
 8006734:	e037      	b.n	80067a6 <HAL_SPI_Init+0x25a>
 8006736:	bf00      	nop
 8006738:	40013000 	.word	0x40013000
 800673c:	40003800 	.word	0x40003800
 8006740:	40003c00 	.word	0x40003c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40015000 	.word	0x40015000
 800674c:	0800aaa0 	.word	0x0800aaa0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d020      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d01c      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	2b10      	cmp	r3, #16
 8006766:	d018      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	2b18      	cmp	r3, #24
 800676e:	d014      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b20      	cmp	r3, #32
 8006776:	d010      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b28      	cmp	r3, #40	@ 0x28
 800677e:	d00c      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	2b30      	cmp	r3, #48	@ 0x30
 8006786:	d008      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	2b38      	cmp	r3, #56	@ 0x38
 800678e:	d004      	beq.n	800679a <HAL_SPI_Init+0x24e>
 8006790:	f240 1159 	movw	r1, #345	@ 0x159
 8006794:	483a      	ldr	r0, [pc, #232]	@ (8006880 <HAL_SPI_Init+0x334>)
 8006796:	f7fa fad5 	bl	8000d44 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fa fb01 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682a:	ea42 0103 	orr.w	r1, r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 0104 	and.w	r1, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	f003 0210 	and.w	r2, r3, #16
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0800aaa0 	.word	0x0800aaa0

08006884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006884:	b084      	sub	sp, #16
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	f107 001c 	add.w	r0, r7, #28
 8006892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006896:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800689a:	2b01      	cmp	r3, #1
 800689c:	d123      	bne.n	80068e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80068b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9dc 	bl	8006c98 <USB_CoreReset>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	e01b      	b.n	800691e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9d0 	bl	8006c98 <USB_CoreReset>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006908:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006910:	e005      	b.n	800691e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800691e:	7fbb      	ldrb	r3, [r7, #30]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d10b      	bne.n	800693c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f043 0206 	orr.w	r2, r3, #6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f043 0220 	orr.w	r2, r3, #32
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006948:	b004      	add	sp, #16
 800694a:	4770      	bx	lr

0800694c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f043 0201 	orr.w	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d115      	bne.n	80069de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069be:	200a      	movs	r0, #10
 80069c0:	f7fa fb90 	bl	80010e4 <HAL_Delay>
      ms += 10U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	330a      	adds	r3, #10
 80069c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f956 	bl	8006c7c <USB_GetMode>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d01e      	beq.n	8006a14 <USB_SetCurrentMode+0x84>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80069da:	d9f0      	bls.n	80069be <USB_SetCurrentMode+0x2e>
 80069dc:	e01a      	b.n	8006a14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d115      	bne.n	8006a10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069f0:	200a      	movs	r0, #10
 80069f2:	f7fa fb77 	bl	80010e4 <HAL_Delay>
      ms += 10U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	330a      	adds	r3, #10
 80069fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f93d 	bl	8006c7c <USB_GetMode>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <USB_SetCurrentMode+0x84>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a0c:	d9f0      	bls.n	80069f0 <USB_SetCurrentMode+0x60>
 8006a0e:	e001      	b.n	8006a14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e005      	b.n	8006a20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a18:	d101      	bne.n	8006a1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a42:	d901      	bls.n	8006a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e01b      	b.n	8006a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	daf2      	bge.n	8006a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	019b      	lsls	r3, r3, #6
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a6c:	d901      	bls.n	8006a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e006      	b.n	8006a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d0f0      	beq.n	8006a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aa4:	d901      	bls.n	8006aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e018      	b.n	8006adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	daf2      	bge.n	8006a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ac8:	d901      	bls.n	8006ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e006      	b.n	8006adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d0f0      	beq.n	8006abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b089      	sub	sp, #36	@ 0x24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4611      	mov	r1, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	460b      	mov	r3, r1
 8006af8:	71fb      	strb	r3, [r7, #7]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d123      	bne.n	8006b56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b0e:	88bb      	ldrh	r3, [r7, #4]
 8006b10:	3303      	adds	r3, #3
 8006b12:	089b      	lsrs	r3, r3, #2
 8006b14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e018      	b.n	8006b4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	031a      	lsls	r2, r3, #12
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b28:	461a      	mov	r2, r3
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	3301      	adds	r3, #1
 8006b46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d3e2      	bcc.n	8006b1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3724      	adds	r7, #36	@ 0x24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b08b      	sub	sp, #44	@ 0x2c
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	089b      	lsrs	r3, r3, #2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	e014      	b.n	8006bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	3301      	adds	r3, #1
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	623b      	str	r3, [r7, #32]
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d3e6      	bcc.n	8006b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bc2:	8bfb      	ldrh	r3, [r7, #30]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01e      	beq.n	8006c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f107 0310 	add.w	r3, r7, #16
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	701a      	strb	r2, [r3, #0]
      i++;
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006bfa:	8bfb      	ldrh	r3, [r7, #30]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c00:	8bfb      	ldrh	r3, [r7, #30]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1ea      	bne.n	8006bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	372c      	adds	r7, #44	@ 0x2c
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 0301 	and.w	r3, r3, #1
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb0:	d901      	bls.n	8006cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e01b      	b.n	8006cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	daf2      	bge.n	8006ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f043 0201 	orr.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cda:	d901      	bls.n	8006ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e006      	b.n	8006cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d0f0      	beq.n	8006cce <USB_CoreReset+0x36>

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d119      	bne.n	8006d86 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d10a      	bne.n	8006d70 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d68:	f043 0304 	orr.w	r3, r3, #4
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e014      	b.n	8006d9a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d7e:	f023 0304 	bic.w	r3, r3, #4
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e009      	b.n	8006d9a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d9a:	2110      	movs	r1, #16
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff fe43 	bl	8006a28 <USB_FlushTxFifo>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fe6d 	bl	8006a8c <USB_FlushRxFifo>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e015      	b.n	8006dee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	3301      	adds	r3, #1
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006df2:	461a      	mov	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d3e3      	bcc.n	8006dc2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2280      	movs	r2, #128	@ 0x80
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a0e      	ldr	r2, [pc, #56]	@ (8006e4c <USB_HostInit+0x150>)
 8006e12:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0e      	ldr	r2, [pc, #56]	@ (8006e50 <USB_HostInit+0x154>)
 8006e18:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f043 0210 	orr.w	r2, r3, #16
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <USB_HostInit+0x158>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e48:	b004      	add	sp, #16
 8006e4a:	4770      	bx	lr
 8006e4c:	00600080 	.word	0x00600080
 8006e50:	004000e0 	.word	0x004000e0
 8006e54:	a3200008 	.word	0xa3200008

08006e58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d107      	bne.n	8006eaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ea6:	6053      	str	r3, [r2, #4]
 8006ea8:	e00c      	b.n	8006ec4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d107      	bne.n	8006ec0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006ebc:	6053      	str	r3, [r2, #4]
 8006ebe:	e001      	b.n	8006ec4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ef2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f00:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006f02:	2064      	movs	r0, #100	@ 0x64
 8006f04:	f7fa f8ee 	bl	80010e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f14:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006f16:	200a      	movs	r0, #10
 8006f18:	f7fa f8e4 	bl	80010e4 <HAL_Delay>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006f4a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <USB_DriveVbus+0x44>
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d106      	bne.n	8006f6a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f68:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f74:	d109      	bne.n	8006f8a <USB_DriveVbus+0x64>
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f88:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	0c5b      	lsrs	r3, r3, #17
 8006fb6:	f003 0303 	and.w	r3, r3, #3
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	b29b      	uxth	r3, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	70fb      	strb	r3, [r7, #3]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70bb      	strb	r3, [r7, #2]
 8006ffe:	4613      	mov	r3, r2
 8007000:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007016:	461a      	mov	r2, r3
 8007018:	f04f 33ff 	mov.w	r3, #4294967295
 800701c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800701e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007022:	2b03      	cmp	r3, #3
 8007024:	d867      	bhi.n	80070f6 <USB_HC_Init+0x10e>
 8007026:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <USB_HC_Init+0x44>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	0800703d 	.word	0x0800703d
 8007030:	080070b9 	.word	0x080070b9
 8007034:	0800703d 	.word	0x0800703d
 8007038:	0800707b 	.word	0x0800707b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007048:	461a      	mov	r2, r3
 800704a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800704e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007050:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	da51      	bge.n	80070fc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	440a      	add	r2, r1
 800706e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007076:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007078:	e040      	b.n	80070fc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007086:	461a      	mov	r2, r3
 8007088:	f240 639d 	movw	r3, #1693	@ 0x69d
 800708c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800708e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007092:	2b00      	cmp	r3, #0
 8007094:	da34      	bge.n	8007100 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80070b6:	e023      	b.n	8007100 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c4:	461a      	mov	r2, r3
 80070c6:	f240 2325 	movw	r3, #549	@ 0x225
 80070ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da17      	bge.n	8007104 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ee:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80070f2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070f4:	e006      	b.n	8007104 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	77fb      	strb	r3, [r7, #31]
      break;
 80070fa:	e004      	b.n	8007106 <USB_HC_Init+0x11e>
      break;
 80070fc:	bf00      	nop
 80070fe:	e002      	b.n	8007106 <USB_HC_Init+0x11e>
      break;
 8007100:	bf00      	nop
 8007102:	e000      	b.n	8007106 <USB_HC_Init+0x11e>
      break;
 8007104:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007112:	461a      	mov	r2, r3
 8007114:	2300      	movs	r3, #0
 8007116:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	440a      	add	r2, r1
 800712e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007132:	f043 0302 	orr.w	r3, r3, #2
 8007136:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	2101      	movs	r1, #1
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	6939      	ldr	r1, [r7, #16]
 800714e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007152:	4313      	orrs	r3, r2
 8007154:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007162:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da03      	bge.n	8007172 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800716a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	e001      	b.n	8007176 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ff0e 	bl	8006f98 <USB_GetHostSpeed>
 800717c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800717e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007182:	2b02      	cmp	r3, #2
 8007184:	d106      	bne.n	8007194 <USB_HC_Init+0x1ac>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d003      	beq.n	8007194 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800718c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e001      	b.n	8007198 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007198:	787b      	ldrb	r3, [r7, #1]
 800719a:	059b      	lsls	r3, r3, #22
 800719c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80071a0:	78bb      	ldrb	r3, [r7, #2]
 80071a2:	02db      	lsls	r3, r3, #11
 80071a4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80071aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071ae:	049b      	lsls	r3, r3, #18
 80071b0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80071b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80071b6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80071b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80071bc:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80071d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071d6:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80071d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d003      	beq.n	80071e8 <USB_HC_Init+0x200>
 80071e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10f      	bne.n	8007208 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007202:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007206:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007208:	7ffb      	ldrb	r3, [r7, #31]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop

08007214 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08c      	sub	sp, #48	@ 0x30
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800722c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007230:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	799b      	ldrb	r3, [r3, #6]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d158      	bne.n	80072ec <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800723a:	2301      	movs	r3, #1
 800723c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	8a92      	ldrh	r2, [r2, #20]
 800724c:	fb03 f202 	mul.w	r2, r3, r2
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	61da      	str	r2, [r3, #28]
 8007254:	e079      	b.n	800734a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	7c9b      	ldrb	r3, [r3, #18]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d130      	bne.n	80072c0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	2bbc      	cmp	r3, #188	@ 0xbc
 8007264:	d918      	bls.n	8007298 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	8a9b      	ldrh	r3, [r3, #20]
 800726a:	461a      	mov	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d003      	beq.n	8007288 <USB_HC_StartXfer+0x74>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d103      	bne.n	8007290 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2202      	movs	r2, #2
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	e05c      	b.n	800734a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2201      	movs	r2, #1
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	e058      	b.n	800734a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d007      	beq.n	80072b8 <USB_HC_StartXfer+0xa4>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d003      	beq.n	80072b8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2204      	movs	r2, #4
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	e048      	b.n	800734a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2203      	movs	r2, #3
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	e044      	b.n	800734a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10d      	bne.n	80072e2 <USB_HC_StartXfer+0xce>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	8a92      	ldrh	r2, [r2, #20]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d907      	bls.n	80072e2 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	8a92      	ldrh	r2, [r2, #20]
 80072d8:	fb03 f202 	mul.w	r2, r3, r2
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	61da      	str	r2, [r3, #28]
 80072e0:	e033      	b.n	800734a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	61da      	str	r2, [r3, #28]
 80072ea:	e02e      	b.n	800734a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d018      	beq.n	8007326 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	8a92      	ldrh	r2, [r2, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	3b01      	subs	r3, #1
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	8a92      	ldrh	r2, [r2, #20]
 8007304:	fbb3 f3f2 	udiv	r3, r3, r2
 8007308:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800730a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800730c:	8b7b      	ldrh	r3, [r7, #26]
 800730e:	429a      	cmp	r2, r3
 8007310:	d90b      	bls.n	800732a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007312:	8b7b      	ldrh	r3, [r7, #26]
 8007314:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	8a92      	ldrh	r2, [r2, #20]
 800731c:	fb03 f202 	mul.w	r2, r3, r2
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61da      	str	r2, [r3, #28]
 8007324:	e001      	b.n	800732a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007326:	2301      	movs	r3, #1
 8007328:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	78db      	ldrb	r3, [r3, #3]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	8a92      	ldrh	r2, [r2, #20]
 8007338:	fb03 f202 	mul.w	r2, r3, r2
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	61da      	str	r2, [r3, #28]
 8007340:	e003      	b.n	800734a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007354:	04d9      	lsls	r1, r3, #19
 8007356:	4ba4      	ldr	r3, [pc, #656]	@ (80075e8 <USB_HC_StartXfer+0x3d4>)
 8007358:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800735a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7d9b      	ldrb	r3, [r3, #22]
 8007360:	075b      	lsls	r3, r3, #29
 8007362:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007366:	69f9      	ldr	r1, [r7, #28]
 8007368:	0148      	lsls	r0, r1, #5
 800736a:	6a39      	ldr	r1, [r7, #32]
 800736c:	4401      	add	r1, r0
 800736e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007372:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007374:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6999      	ldr	r1, [r3, #24]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738c:	460a      	mov	r2, r1
 800738e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80073c6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	7e7b      	ldrb	r3, [r7, #25]
 80073d8:	075b      	lsls	r3, r3, #29
 80073da:	69f9      	ldr	r1, [r7, #28]
 80073dc:	0148      	lsls	r0, r1, #5
 80073de:	6a39      	ldr	r1, [r7, #32]
 80073e0:	4401      	add	r1, r0
 80073e2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	799b      	ldrb	r3, [r3, #6]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	f040 80c4 	bne.w	800757c <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	7c5b      	ldrb	r3, [r3, #17]
 80073f8:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073fe:	4313      	orrs	r3, r2
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	440a      	add	r2, r1
 8007408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800740c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007410:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	0151      	lsls	r1, r2, #5
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	440a      	add	r2, r1
 8007428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800742c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007430:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	79db      	ldrb	r3, [r3, #7]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d123      	bne.n	8007482 <USB_HC_StartXfer+0x26e>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	78db      	ldrb	r3, [r3, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d11f      	bne.n	8007482 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	440a      	add	r2, r1
 8007458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800745c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007460:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	440a      	add	r2, r1
 8007478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800747c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007480:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7c9b      	ldrb	r3, [r3, #18]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d003      	beq.n	8007492 <USB_HC_StartXfer+0x27e>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	7c9b      	ldrb	r3, [r3, #18]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d117      	bne.n	80074c2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007496:	2b01      	cmp	r3, #1
 8007498:	d113      	bne.n	80074c2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	78db      	ldrb	r3, [r3, #3]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10f      	bne.n	80074c2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	7c9b      	ldrb	r3, [r3, #18]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d163      	bne.n	8007592 <USB_HC_StartXfer+0x37e>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d15f      	bne.n	8007592 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d859      	bhi.n	8007590 <USB_HC_StartXfer+0x37c>
 80074dc:	a201      	add	r2, pc, #4	@ (adr r2, 80074e4 <USB_HC_StartXfer+0x2d0>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	08007517 	.word	0x08007517
 80074ec:	08007539 	.word	0x08007539
 80074f0:	0800755b 	.word	0x0800755b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	440a      	add	r2, r1
 800750a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800750e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007512:	6053      	str	r3, [r2, #4]
          break;
 8007514:	e03d      	b.n	8007592 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	440a      	add	r2, r1
 800752c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007530:	f043 030e 	orr.w	r3, r3, #14
 8007534:	6053      	str	r3, [r2, #4]
          break;
 8007536:	e02c      	b.n	8007592 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	440a      	add	r2, r1
 800754e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007556:	6053      	str	r3, [r2, #4]
          break;
 8007558:	e01b      	b.n	8007592 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	4413      	add	r3, r2
 8007562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	6a3a      	ldr	r2, [r7, #32]
 800756e:	440a      	add	r2, r1
 8007570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007578:	6053      	str	r3, [r2, #4]
          break;
 800757a:	e00a      	b.n	8007592 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007588:	461a      	mov	r2, r3
 800758a:	2300      	movs	r3, #0
 800758c:	6053      	str	r3, [r2, #4]
 800758e:	e000      	b.n	8007592 <USB_HC_StartXfer+0x37e>
          break;
 8007590:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	4413      	add	r3, r2
 800759a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075a8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	e003      	b.n	80075c4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075c2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075ca:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d8:	461a      	mov	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	e055      	b.n	8007694 <USB_HC_StartXfer+0x480>
 80075e8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	78db      	ldrb	r3, [r3, #3]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d14e      	bne.n	8007692 <USB_HC_StartXfer+0x47e>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d04a      	beq.n	8007692 <USB_HC_StartXfer+0x47e>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	79db      	ldrb	r3, [r3, #7]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d146      	bne.n	8007692 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	7c9b      	ldrb	r3, [r3, #18]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d831      	bhi.n	8007670 <USB_HC_StartXfer+0x45c>
 800760c:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <USB_HC_StartXfer+0x400>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007625 	.word	0x08007625
 8007618:	08007649 	.word	0x08007649
 800761c:	08007625 	.word	0x08007625
 8007620:	08007649 	.word	0x08007649
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	3303      	adds	r3, #3
 800762a:	089b      	lsrs	r3, r3, #2
 800762c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800762e:	8afa      	ldrh	r2, [r7, #22]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	b29b      	uxth	r3, r3
 8007636:	429a      	cmp	r2, r3
 8007638:	d91c      	bls.n	8007674 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	619a      	str	r2, [r3, #24]
        }
        break;
 8007646:	e015      	b.n	8007674 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	3303      	adds	r3, #3
 800764e:	089b      	lsrs	r3, r3, #2
 8007650:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007652:	8afa      	ldrh	r2, [r7, #22]
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	b29b      	uxth	r3, r3
 800765e:	429a      	cmp	r2, r3
 8007660:	d90a      	bls.n	8007678 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	619a      	str	r2, [r3, #24]
        }
        break;
 800766e:	e003      	b.n	8007678 <USB_HC_StartXfer+0x464>

      default:
        break;
 8007670:	bf00      	nop
 8007672:	e002      	b.n	800767a <USB_HC_StartXfer+0x466>
        break;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <USB_HC_StartXfer+0x466>
        break;
 8007678:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	785a      	ldrb	r2, [r3, #1]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	b29b      	uxth	r3, r3
 8007688:	2000      	movs	r0, #0
 800768a:	9000      	str	r0, [sp, #0]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fa2b 	bl	8006ae8 <USB_WritePacket>
  }

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	@ 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	b29b      	uxth	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80076be:	b480      	push	{r7}
 80076c0:	b089      	sub	sp, #36	@ 0x24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	0c9b      	lsrs	r3, r3, #18
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	0fdb      	lsrs	r3, r3, #31
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	0fdb      	lsrs	r3, r3, #31
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b20      	cmp	r3, #32
 8007722:	d10d      	bne.n	8007740 <USB_HC_Halt+0x82>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <USB_HC_Halt+0x82>
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d002      	beq.n	800773c <USB_HC_Halt+0x7e>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b03      	cmp	r3, #3
 800773a:	d101      	bne.n	8007740 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e0d8      	b.n	80078f2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <USB_HC_Halt+0x8e>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d173      	bne.n	8007834 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	440a      	add	r2, r1
 8007762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007766:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800776a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d14a      	bne.n	800780e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d133      	bne.n	80077ec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	440a      	add	r2, r1
 800779a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800779e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077d0:	d82e      	bhi.n	8007830 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e8:	d0ec      	beq.n	80077c4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077ea:	e081      	b.n	80078f0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	440a      	add	r2, r1
 8007802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007806:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800780a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800780c:	e070      	b.n	80078f0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	440a      	add	r2, r1
 8007824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007828:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800782c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800782e:	e05f      	b.n	80078f0 <USB_HC_Halt+0x232>
            break;
 8007830:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007832:	e05d      	b.n	80078f0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	440a      	add	r2, r1
 800784a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007852:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d133      	bne.n	80078cc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007882:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	440a      	add	r2, r1
 800789a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800789e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078b0:	d81d      	bhi.n	80078ee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c8:	d0ec      	beq.n	80078a4 <USB_HC_Halt+0x1e6>
 80078ca:	e011      	b.n	80078f0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e000      	b.n	80078f0 <USB_HC_Halt+0x232>
          break;
 80078ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3724      	adds	r7, #36	@ 0x24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b088      	sub	sp, #32
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f82b 	bl	800696e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007918:	2110      	movs	r1, #16
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff f884 	bl	8006a28 <USB_FlushTxFifo>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff f8ae 	bl	8006a8c <USB_FlushRxFifo>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e01f      	b.n	8007980 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4413      	add	r3, r2
 8007948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007956:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800795e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007966:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007974:	461a      	mov	r2, r3
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	3301      	adds	r3, #1
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d9dc      	bls.n	8007940 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e034      	b.n	80079f6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079aa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079b2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c0:	461a      	mov	r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079d2:	d80c      	bhi.n	80079ee <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ea:	d0ec      	beq.n	80079c6 <USB_StopHost+0xc8>
 80079ec:	e000      	b.n	80079f0 <USB_StopHost+0xf2>
        break;
 80079ee:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3301      	adds	r3, #1
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d9c7      	bls.n	800798c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a02:	461a      	mov	r2, r3
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295
 8007a08:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fe ff9a 	bl	800694c <USB_EnableGlobalInt>

  return ret;
 8007a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a22:	b590      	push	{r4, r7, lr}
 8007a24:	b089      	sub	sp, #36	@ 0x24
 8007a26:	af04      	add	r7, sp, #16
 8007a28:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	2102      	movs	r1, #2
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc86 	bl	8008342 <USBH_FindInterface>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2bff      	cmp	r3, #255	@ 0xff
 8007a3e:	d002      	beq.n	8007a46 <USBH_CDC_InterfaceInit+0x24>
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d901      	bls.n	8007a4a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e13d      	b.n	8007cc6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc5b 	bl	800830a <USBH_SelectInterface>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e131      	b.n	8007cc6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007a68:	2050      	movs	r0, #80	@ 0x50
 8007a6a:	f002 fddb 	bl	800a624 <malloc>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	e11f      	b.n	8007cc6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a86:	2250      	movs	r2, #80	@ 0x50
 8007a88:	2100      	movs	r1, #0
 8007a8a:	68b8      	ldr	r0, [r7, #8]
 8007a8c:	f002 fe88 	bl	800a7a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	211a      	movs	r1, #26
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da15      	bge.n	8007ad4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	211a      	movs	r1, #26
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	211a      	movs	r1, #26
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 ffbf 	bl	8009a5e <USBH_AllocPipe>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	7819      	ldrb	r1, [r3, #0]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	7858      	ldrb	r0, [r3, #1]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	8952      	ldrh	r2, [r2, #10]
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	2203      	movs	r2, #3
 8007b04:	9201      	str	r2, [sp, #4]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4623      	mov	r3, r4
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 ff77 	bl	8009a00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f002 fa86 	bl	800a02c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b20:	2300      	movs	r3, #0
 8007b22:	2200      	movs	r2, #0
 8007b24:	210a      	movs	r1, #10
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc0b 	bl	8008342 <USBH_FindInterface>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2bff      	cmp	r3, #255	@ 0xff
 8007b34:	d002      	beq.n	8007b3c <USBH_CDC_InterfaceInit+0x11a>
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d901      	bls.n	8007b40 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e0c2      	b.n	8007cc6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	211a      	movs	r1, #26
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da16      	bge.n	8007b86 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	211a      	movs	r1, #26
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	211a      	movs	r1, #26
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	835a      	strh	r2, [r3, #26]
 8007b84:	e015      	b.n	8007bb2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	211a      	movs	r1, #26
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	211a      	movs	r1, #26
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	211a      	movs	r1, #26
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da16      	bge.n	8007bf8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	211a      	movs	r1, #26
 8007bd0:	fb01 f303 	mul.w	r3, r1, r3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	211a      	movs	r1, #26
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007bf0:	881a      	ldrh	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	835a      	strh	r2, [r3, #26]
 8007bf6:	e015      	b.n	8007c24 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	211a      	movs	r1, #26
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	211a      	movs	r1, #26
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c1e:	881a      	ldrh	r2, [r3, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	7b9b      	ldrb	r3, [r3, #14]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 ff17 	bl	8009a5e <USBH_AllocPipe>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	7bdb      	ldrb	r3, [r3, #15]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 ff0d 	bl	8009a5e <USBH_AllocPipe>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	7b59      	ldrb	r1, [r3, #13]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	7b98      	ldrb	r0, [r3, #14]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	8b12      	ldrh	r2, [r2, #24]
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fec5 	bl	8009a00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	7b19      	ldrb	r1, [r3, #12]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	7bd8      	ldrb	r0, [r3, #15]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	8b52      	ldrh	r2, [r2, #26]
 8007c8e:	9202      	str	r2, [sp, #8]
 8007c90:	2202      	movs	r2, #2
 8007c92:	9201      	str	r2, [sp, #4]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	4623      	mov	r3, r4
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 feb0 	bl	8009a00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	7b5b      	ldrb	r3, [r3, #13]
 8007cac:	2200      	movs	r2, #0
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 f9bb 	bl	800a02c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f002 f9b4 	bl	800a02c <USBH_LL_SetToggle>

  return USBH_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd90      	pop	{r4, r7, pc}

08007cce <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00e      	beq.n	8007d06 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fea5 	bl	8009a3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fed0 	bl	8009aa0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	7b1b      	ldrb	r3, [r3, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	7b1b      	ldrb	r3, [r3, #12]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fe92 	bl	8009a3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	7b1b      	ldrb	r3, [r3, #12]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 febd 	bl	8009aa0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	7b5b      	ldrb	r3, [r3, #13]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00e      	beq.n	8007d52 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	7b5b      	ldrb	r3, [r3, #13]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 fe7f 	bl	8009a3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	7b5b      	ldrb	r3, [r3, #13]
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 feaa 	bl	8009aa0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 fc64 	bl	800a634 <free>
    phost->pActiveClass->pData = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d72:	2200      	movs	r2, #0
 8007d74:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3340      	adds	r3, #64	@ 0x40
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f8b2 	bl	8007f02 <GetLineCoding>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dae:	2102      	movs	r1, #2
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d877      	bhi.n	8007ed4 <USBH_CDC_Process+0x114>
 8007de4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <USBH_CDC_Process+0x2c>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e01 	.word	0x08007e01
 8007df0:	08007e07 	.word	0x08007e07
 8007df4:	08007e37 	.word	0x08007e37
 8007df8:	08007eab 	.word	0x08007eab
 8007dfc:	08007eb9 	.word	0x08007eb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
      break;
 8007e04:	e06d      	b.n	8007ee2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f897 	bl	8007f40 <SetLineCoding>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e24:	e058      	b.n	8007ed8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d055      	beq.n	8007ed8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2204      	movs	r2, #4
 8007e30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e34:	e050      	b.n	8007ed8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3340      	adds	r3, #64	@ 0x40
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f860 	bl	8007f02 <GetLineCoding>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d126      	bne.n	8007e9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d13b      	bne.n	8007edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d133      	bne.n	8007edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d12b      	bne.n	8007edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d124      	bne.n	8007edc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f958 	bl	8008148 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e98:	e020      	b.n	8007edc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d01d      	beq.n	8007edc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007ea8:	e018      	b.n	8007edc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f867 	bl	8007f7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f8da 	bl	800806a <CDC_ProcessReception>
      break;
 8007eb6:	e014      	b.n	8007ee2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 f81a 	bl	8008ef4 <USBH_ClrFeature>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007ed2:	e005      	b.n	8007ee0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e004      	b.n	8007ee2 <USBH_CDC_Process+0x122>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e002      	b.n	8007ee2 <USBH_CDC_Process+0x122>
      break;
 8007edc:	bf00      	nop
 8007ede:	e000      	b.n	8007ee2 <USBH_CDC_Process+0x122>
      break;
 8007ee0:	bf00      	nop

  }

  return status;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	22a1      	movs	r2, #161	@ 0xa1
 8007f10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2221      	movs	r2, #33	@ 0x21
 8007f16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2207      	movs	r2, #7
 8007f28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fb14 	bl	800955e <USBH_CtlReq>
 8007f36:	4603      	mov	r3, r0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2221      	movs	r2, #33	@ 0x21
 8007f4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2207      	movs	r2, #7
 8007f66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 faf5 	bl	800955e <USBH_CtlReq>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b086      	sub	sp, #24
 8007f82:	af02      	add	r7, sp, #8
 8007f84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d002      	beq.n	8007fa4 <CDC_ProcessTransmission+0x26>
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d023      	beq.n	8007fea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007fa2:	e05e      	b.n	8008062 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	8b12      	ldrh	r2, [r2, #24]
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d90b      	bls.n	8007fc8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	69d9      	ldr	r1, [r3, #28]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8b1a      	ldrh	r2, [r3, #24]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	7b5b      	ldrb	r3, [r3, #13]
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	9000      	str	r0, [sp, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fcda 	bl	800997a <USBH_BulkSendData>
 8007fc6:	e00b      	b.n	8007fe0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7b5b      	ldrb	r3, [r3, #13]
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	9000      	str	r0, [sp, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 fccd 	bl	800997a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007fe8:	e03b      	b.n	8008062 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	7b5b      	ldrb	r3, [r3, #13]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fff1 	bl	8009fd8 <USBH_LL_GetURBState>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d128      	bne.n	8008052 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	8b12      	ldrh	r2, [r2, #24]
 8008008:	4293      	cmp	r3, r2
 800800a:	d90e      	bls.n	800802a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	8b12      	ldrh	r2, [r2, #24]
 8008014:	1a9a      	subs	r2, r3, r2
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	8b12      	ldrh	r2, [r2, #24]
 8008022:	441a      	add	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	61da      	str	r2, [r3, #28]
 8008028:	e002      	b.n	8008030 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008040:	e00e      	b.n	8008060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f868 	bl	8008120 <USBH_CDC_TransmitCallback>
      break;
 8008050:	e006      	b.n	8008060 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d103      	bne.n	8008060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008060:	bf00      	nop
  }
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b086      	sub	sp, #24
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800807c:	2300      	movs	r3, #0
 800807e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008086:	2b03      	cmp	r3, #3
 8008088:	d002      	beq.n	8008090 <CDC_ProcessReception+0x26>
 800808a:	2b04      	cmp	r3, #4
 800808c:	d00e      	beq.n	80080ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800808e:	e043      	b.n	8008118 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	6a19      	ldr	r1, [r3, #32]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	8b5a      	ldrh	r2, [r3, #26]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	7b1b      	ldrb	r3, [r3, #12]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fc91 	bl	80099c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2204      	movs	r2, #4
 80080a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80080aa:	e035      	b.n	8008118 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	7b1b      	ldrb	r3, [r3, #12]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 ff90 	bl	8009fd8 <USBH_LL_GetURBState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80080bc:	7cfb      	ldrb	r3, [r7, #19]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d129      	bne.n	8008116 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	7b1b      	ldrb	r3, [r3, #12]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fef3 	bl	8009eb4 <USBH_LL_GetLastXferSize>
 80080ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d016      	beq.n	8008108 <CDC_ProcessReception+0x9e>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	8b5b      	ldrh	r3, [r3, #26]
 80080de:	461a      	mov	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d110      	bne.n	8008108 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1ad2      	subs	r2, r2, r3
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	441a      	add	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2203      	movs	r2, #3
 8008102:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008106:	e006      	b.n	8008116 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f80f 	bl	8008134 <USBH_CDC_ReceiveCallback>
      break;
 8008116:	bf00      	nop
  }
}
 8008118:	bf00      	nop
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008170:	2302      	movs	r3, #2
 8008172:	e029      	b.n	80081c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	79fa      	ldrb	r2, [r7, #7]
 8008178:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f81f 	bl	80081d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f001 fdc3 	bl	8009d4c <USBH_LL_Init>

  return USBH_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	e009      	b.n	80081f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	33e0      	adds	r3, #224	@ 0xe0
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	2200      	movs	r2, #0
 80081ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b0f      	cmp	r3, #15
 80081fa:	d9f2      	bls.n	80081e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e009      	b.n	8008216 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800821c:	d3f1      	bcc.n	8008202 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2240      	movs	r2, #64	@ 0x40
 8008242:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	331c      	adds	r3, #28
 800826e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f002 fa93 	bl	800a7a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f002 fa8a 	bl	800a7a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008292:	2212      	movs	r2, #18
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f002 fa82 	bl	800a7a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082a2:	223e      	movs	r2, #62	@ 0x3e
 80082a4:	2100      	movs	r1, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f002 fa7a 	bl	800a7a0 <memset>

  return USBH_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d016      	beq.n	80082f8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10e      	bne.n	80082f2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082da:	1c59      	adds	r1, r3, #1
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	33de      	adds	r3, #222	@ 0xde
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e004      	b.n	80082fc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80082f2:	2302      	movs	r3, #2
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	e001      	b.n	80082fc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	429a      	cmp	r2, r3
 8008324:	d204      	bcs.n	8008330 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800832e:	e001      	b.n	8008334 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008330:	2302      	movs	r3, #2
 8008332:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	461a      	mov	r2, r3
 8008350:	4603      	mov	r3, r0
 8008352:	70fb      	strb	r3, [r7, #3]
 8008354:	460b      	mov	r3, r1
 8008356:	70bb      	strb	r3, [r7, #2]
 8008358:	4613      	mov	r3, r2
 800835a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800836a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800836c:	e025      	b.n	80083ba <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	221a      	movs	r2, #26
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	3308      	adds	r3, #8
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	3302      	adds	r3, #2
 800837e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	795b      	ldrb	r3, [r3, #5]
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	429a      	cmp	r2, r3
 8008388:	d002      	beq.n	8008390 <USBH_FindInterface+0x4e>
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	2bff      	cmp	r3, #255	@ 0xff
 800838e:	d111      	bne.n	80083b4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008394:	78ba      	ldrb	r2, [r7, #2]
 8008396:	429a      	cmp	r2, r3
 8008398:	d002      	beq.n	80083a0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800839a:	78bb      	ldrb	r3, [r7, #2]
 800839c:	2bff      	cmp	r3, #255	@ 0xff
 800839e:	d109      	bne.n	80083b4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083a4:	787a      	ldrb	r2, [r7, #1]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d002      	beq.n	80083b0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083aa:	787b      	ldrb	r3, [r7, #1]
 80083ac:	2bff      	cmp	r3, #255	@ 0xff
 80083ae:	d101      	bne.n	80083b4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	e006      	b.n	80083c2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	3301      	adds	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d9d6      	bls.n	800836e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80083c0:	23ff      	movs	r3, #255	@ 0xff
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fcf4 	bl	8009dc4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80083dc:	2101      	movs	r1, #1
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fe0d 	bl	8009ffe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af04      	add	r7, sp, #16
 80083f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80083f8:	2302      	movs	r3, #2
 80083fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b01      	cmp	r3, #1
 800840a:	d102      	bne.n	8008412 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2203      	movs	r2, #3
 8008410:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b0b      	cmp	r3, #11
 800841a:	f200 81bb 	bhi.w	8008794 <USBH_Process+0x3a4>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <USBH_Process+0x34>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008455 	.word	0x08008455
 8008428:	08008487 	.word	0x08008487
 800842c:	080084ef 	.word	0x080084ef
 8008430:	0800872f 	.word	0x0800872f
 8008434:	08008795 	.word	0x08008795
 8008438:	0800858f 	.word	0x0800858f
 800843c:	080086d5 	.word	0x080086d5
 8008440:	080085c5 	.word	0x080085c5
 8008444:	080085e5 	.word	0x080085e5
 8008448:	08008603 	.word	0x08008603
 800844c:	08008647 	.word	0x08008647
 8008450:	08008717 	.word	0x08008717
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 819b 	beq.w	8008798 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008468:	20c8      	movs	r0, #200	@ 0xc8
 800846a:	f001 fe12 	bl	800a092 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fd05 	bl	8009e7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008484:	e188      	b.n	8008798 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800848c:	2b01      	cmp	r3, #1
 800848e:	d107      	bne.n	80084a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800849e:	e18a      	b.n	80087b6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80084a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084aa:	d914      	bls.n	80084d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d903      	bls.n	80084ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	220d      	movs	r2, #13
 80084ca:	701a      	strb	r2, [r3, #0]
      break;
 80084cc:	e173      	b.n	80087b6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
      break;
 80084d4:	e16f      	b.n	80087b6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80084dc:	f103 020a 	add.w	r2, r3, #10
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80084e6:	200a      	movs	r0, #10
 80084e8:	f001 fdd3 	bl	800a092 <USBH_Delay>
      break;
 80084ec:	e163      	b.n	80087b6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084fe:	2104      	movs	r1, #4
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008504:	2064      	movs	r0, #100	@ 0x64
 8008506:	f001 fdc4 	bl	800a092 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fc90 	bl	8009e30 <USBH_LL_GetSpeed>
 8008510:	4603      	mov	r3, r0
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2205      	movs	r2, #5
 800851e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fa9b 	bl	8009a5e <USBH_AllocPipe>
 8008528:	4603      	mov	r3, r0
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008530:	2180      	movs	r1, #128	@ 0x80
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fa93 	bl	8009a5e <USBH_AllocPipe>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7919      	ldrb	r1, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008554:	9202      	str	r2, [sp, #8]
 8008556:	2200      	movs	r2, #0
 8008558:	9201      	str	r2, [sp, #4]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	4603      	mov	r3, r0
 800855e:	2280      	movs	r2, #128	@ 0x80
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fa4d 	bl	8009a00 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	7959      	ldrb	r1, [r3, #5]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800857a:	9202      	str	r2, [sp, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	9201      	str	r2, [sp, #4]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	4603      	mov	r3, r0
 8008584:	2200      	movs	r2, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fa3a 	bl	8009a00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800858c:	e113      	b.n	80087b6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f916 	bl	80087c0 <USBH_HandleEnum>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 80fd 	bne.w	800879c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d103      	bne.n	80085bc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2208      	movs	r2, #8
 80085b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085ba:	e0ef      	b.n	800879c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2207      	movs	r2, #7
 80085c0:	701a      	strb	r2, [r3, #0]
      break;
 80085c2:	e0eb      	b.n	800879c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80e8 	beq.w	80087a0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085d6:	2101      	movs	r1, #1
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2208      	movs	r2, #8
 80085e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80085e2:	e0dd      	b.n	80087a0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fc3a 	bl	8008e66 <USBH_SetCfg>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 80d5 	bne.w	80087a4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2209      	movs	r2, #9
 80085fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008600:	e0d0      	b.n	80087a4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d016      	beq.n	800863e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008610:	2101      	movs	r1, #1
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fc4a 	bl	8008eac <USBH_SetFeature>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	220a      	movs	r2, #10
 8008628:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800862a:	e0bd      	b.n	80087a8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b03      	cmp	r3, #3
 8008632:	f040 80b9 	bne.w	80087a8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	220a      	movs	r2, #10
 800863a:	701a      	strb	r2, [r3, #0]
      break;
 800863c:	e0b4      	b.n	80087a8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	220a      	movs	r2, #10
 8008642:	701a      	strb	r2, [r3, #0]
      break;
 8008644:	e0b0      	b.n	80087a8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80ad 	beq.w	80087ac <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	e016      	b.n	800868e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32de      	adds	r2, #222	@ 0xde
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	791a      	ldrb	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008672:	429a      	cmp	r2, r3
 8008674:	d108      	bne.n	8008688 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	32de      	adds	r2, #222	@ 0xde
 800867c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008686:	e005      	b.n	8008694 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	3301      	adds	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0e5      	beq.n	8008660 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d016      	beq.n	80086cc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2206      	movs	r2, #6
 80086b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086bc:	2103      	movs	r1, #3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086c2:	e073      	b.n	80087ac <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	220d      	movs	r2, #13
 80086c8:	701a      	strb	r2, [r3, #0]
      break;
 80086ca:	e06f      	b.n	80087ac <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	220d      	movs	r2, #13
 80086d0:	701a      	strb	r2, [r3, #0]
      break;
 80086d2:	e06b      	b.n	80087ac <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d017      	beq.n	800870e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	220b      	movs	r2, #11
 80086fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086fc:	e058      	b.n	80087b0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d154      	bne.n	80087b0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	220d      	movs	r2, #13
 800870a:	701a      	strb	r2, [r3, #0]
      break;
 800870c:	e050      	b.n	80087b0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	220d      	movs	r2, #13
 8008712:	701a      	strb	r2, [r3, #0]
      break;
 8008714:	e04c      	b.n	80087b0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d049      	beq.n	80087b4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	4798      	blx	r3
      }
      break;
 800872c:	e042      	b.n	80087b4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fd4a 	bl	80081d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800876a:	2105      	movs	r1, #5
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d107      	bne.n	800878c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fe22 	bl	80083ce <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800878a:	e014      	b.n	80087b6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fb19 	bl	8009dc4 <USBH_LL_Start>
      break;
 8008792:	e010      	b.n	80087b6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008794:	bf00      	nop
 8008796:	e00e      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 8008798:	bf00      	nop
 800879a:	e00c      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 800879c:	bf00      	nop
 800879e:	e00a      	b.n	80087b6 <USBH_Process+0x3c6>
    break;
 80087a0:	bf00      	nop
 80087a2:	e008      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 80087a4:	bf00      	nop
 80087a6:	e006      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 80087a8:	bf00      	nop
 80087aa:	e004      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 80087ac:	bf00      	nop
 80087ae:	e002      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 80087b0:	bf00      	nop
 80087b2:	e000      	b.n	80087b6 <USBH_Process+0x3c6>
      break;
 80087b4:	bf00      	nop
  }
  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af04      	add	r7, sp, #16
 80087c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b07      	cmp	r3, #7
 80087d6:	f200 81bd 	bhi.w	8008b54 <USBH_HandleEnum+0x394>
 80087da:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <USBH_HandleEnum+0x20>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008801 	.word	0x08008801
 80087e4:	080088bb 	.word	0x080088bb
 80087e8:	08008925 	.word	0x08008925
 80087ec:	080089af 	.word	0x080089af
 80087f0:	08008a19 	.word	0x08008a19
 80087f4:	08008a89 	.word	0x08008a89
 80087f8:	08008acf 	.word	0x08008acf
 80087fc:	08008b15 	.word	0x08008b15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008800:	2108      	movs	r1, #8
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa4c 	bl	8008ca0 <USBH_Get_DevDesc>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d12e      	bne.n	8008870 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7919      	ldrb	r1, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008836:	9202      	str	r2, [sp, #8]
 8008838:	2200      	movs	r2, #0
 800883a:	9201      	str	r2, [sp, #4]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	4603      	mov	r3, r0
 8008840:	2280      	movs	r2, #128	@ 0x80
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 f8dc 	bl	8009a00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7959      	ldrb	r1, [r3, #5]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800885c:	9202      	str	r2, [sp, #8]
 800885e:	2200      	movs	r2, #0
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	2200      	movs	r2, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 f8c9 	bl	8009a00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800886e:	e173      	b.n	8008b58 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b03      	cmp	r3, #3
 8008874:	f040 8170 	bne.w	8008b58 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800887e:	3301      	adds	r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800888e:	2b03      	cmp	r3, #3
 8008890:	d903      	bls.n	800889a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220d      	movs	r2, #13
 8008896:	701a      	strb	r2, [r3, #0]
      break;
 8008898:	e15e      	b.n	8008b58 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	795b      	ldrb	r3, [r3, #5]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f8fd 	bl	8009aa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	791b      	ldrb	r3, [r3, #4]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f8f7 	bl	8009aa0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
      break;
 80088b8:	e14e      	b.n	8008b58 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80088ba:	2112      	movs	r1, #18
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9ef 	bl	8008ca0 <USBH_Get_DevDesc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088d2:	e143      	b.n	8008b5c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	f040 8140 	bne.w	8008b5c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088e2:	3301      	adds	r3, #1
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d903      	bls.n	80088fe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	220d      	movs	r2, #13
 80088fa:	701a      	strb	r2, [r3, #0]
      break;
 80088fc:	e12e      	b.n	8008b5c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	795b      	ldrb	r3, [r3, #5]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f8cb 	bl	8009aa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f8c5 	bl	8009aa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e11b      	b.n	8008b5c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008924:	2101      	movs	r1, #1
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa79 	bl	8008e1e <USBH_SetAddress>
 800892c:	4603      	mov	r3, r0
 800892e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d130      	bne.n	8008998 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008936:	2002      	movs	r0, #2
 8008938:	f001 fbab 	bl	800a092 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2203      	movs	r2, #3
 8008948:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7919      	ldrb	r1, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800895e:	9202      	str	r2, [sp, #8]
 8008960:	2200      	movs	r2, #0
 8008962:	9201      	str	r2, [sp, #4]
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	4603      	mov	r3, r0
 8008968:	2280      	movs	r2, #128	@ 0x80
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 f848 	bl	8009a00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7959      	ldrb	r1, [r3, #5]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008984:	9202      	str	r2, [sp, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	9201      	str	r2, [sp, #4]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4603      	mov	r3, r0
 800898e:	2200      	movs	r2, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 f835 	bl	8009a00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008996:	e0e3      	b.n	8008b60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b03      	cmp	r3, #3
 800899c:	f040 80e0 	bne.w	8008b60 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	220d      	movs	r2, #13
 80089a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	705a      	strb	r2, [r3, #1]
      break;
 80089ac:	e0d8      	b.n	8008b60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80089ae:	2109      	movs	r1, #9
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f9a1 	bl	8008cf8 <USBH_Get_CfgDesc>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2204      	movs	r2, #4
 80089c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089c6:	e0cd      	b.n	8008b64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f040 80ca 	bne.w	8008b64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089d6:	3301      	adds	r3, #1
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d903      	bls.n	80089f2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	220d      	movs	r2, #13
 80089ee:	701a      	strb	r2, [r3, #0]
      break;
 80089f0:	e0b8      	b.n	8008b64 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	795b      	ldrb	r3, [r3, #5]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f851 	bl	8009aa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 f84b 	bl	8009aa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
      break;
 8008a16:	e0a5      	b.n	8008b64 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f969 	bl	8008cf8 <USBH_Get_CfgDesc>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2205      	movs	r2, #5
 8008a34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a36:	e097      	b.n	8008b68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	f040 8094 	bne.w	8008b68 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a46:	3301      	adds	r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d903      	bls.n	8008a62 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	220d      	movs	r2, #13
 8008a5e:	701a      	strb	r2, [r3, #0]
      break;
 8008a60:	e082      	b.n	8008b68 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	795b      	ldrb	r3, [r3, #5]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f819 	bl	8009aa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	791b      	ldrb	r3, [r3, #4]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 f813 	bl	8009aa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
      break;
 8008a86:	e06f      	b.n	8008b68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d019      	beq.n	8008ac6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a9e:	23ff      	movs	r3, #255	@ 0xff
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f953 	bl	8008d4c <USBH_Get_StringDesc>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2206      	movs	r2, #6
 8008ab4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ab6:	e059      	b.n	8008b6c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d156      	bne.n	8008b6c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2206      	movs	r2, #6
 8008ac2:	705a      	strb	r2, [r3, #1]
      break;
 8008ac4:	e052      	b.n	8008b6c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2206      	movs	r2, #6
 8008aca:	705a      	strb	r2, [r3, #1]
      break;
 8008acc:	e04e      	b.n	8008b6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d019      	beq.n	8008b0c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ae4:	23ff      	movs	r3, #255	@ 0xff
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f930 	bl	8008d4c <USBH_Get_StringDesc>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2207      	movs	r2, #7
 8008afa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008afc:	e038      	b.n	8008b70 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d135      	bne.n	8008b70 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2207      	movs	r2, #7
 8008b08:	705a      	strb	r2, [r3, #1]
      break;
 8008b0a:	e031      	b.n	8008b70 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2207      	movs	r2, #7
 8008b10:	705a      	strb	r2, [r3, #1]
      break;
 8008b12:	e02d      	b.n	8008b70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d017      	beq.n	8008b4e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b2a:	23ff      	movs	r3, #255	@ 0xff
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f90d 	bl	8008d4c <USBH_Get_StringDesc>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b40:	e018      	b.n	8008b74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d115      	bne.n	8008b74 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e012      	b.n	8008b74 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
      break;
 8008b52:	e00f      	b.n	8008b74 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008b54:	bf00      	nop
 8008b56:	e00e      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b58:	bf00      	nop
 8008b5a:	e00c      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b5c:	bf00      	nop
 8008b5e:	e00a      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b60:	bf00      	nop
 8008b62:	e008      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b64:	bf00      	nop
 8008b66:	e006      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b68:	bf00      	nop
 8008b6a:	e004      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b6c:	bf00      	nop
 8008b6e:	e002      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b70:	bf00      	nop
 8008b72:	e000      	b.n	8008b76 <USBH_HandleEnum+0x3b6>
      break;
 8008b74:	bf00      	nop
  }
  return Status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f804 	bl	8008bc2 <USBH_HandleSof>
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b0b      	cmp	r3, #11
 8008bd2:	d10a      	bne.n	8008bea <USBH_HandleSof+0x28>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
  }
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008c02:	bf00      	nop
}
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008c1e:	bf00      	nop
}
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f8be 	bl	8009dfa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	791b      	ldrb	r3, [r3, #4]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 ff0b 	bl	8009aa0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 ff05 	bl	8009aa0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008cac:	887b      	ldrh	r3, [r7, #2]
 8008cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb2:	d901      	bls.n	8008cb8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e01b      	b.n	8008cf0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008cbe:	887b      	ldrh	r3, [r7, #2]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f872 	bl	8008db4 <USBH_GetDescriptor>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ce0:	887a      	ldrh	r2, [r7, #2]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f929 	bl	8008f3c <USBH_ParseDevDesc>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	331c      	adds	r3, #28
 8008d08:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008d0a:	887b      	ldrh	r3, [r7, #2]
 8008d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d10:	d901      	bls.n	8008d16 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e016      	b.n	8008d44 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f846 	bl	8008db4 <USBH_GetDescriptor>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d107      	bne.n	8008d42 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	461a      	mov	r2, r3
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f9af 	bl	800909c <USBH_ParseCfgDesc>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	461a      	mov	r2, r3
 8008d58:	460b      	mov	r3, r1
 8008d5a:	72fb      	strb	r3, [r7, #11]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008d60:	893b      	ldrh	r3, [r7, #8]
 8008d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d66:	d802      	bhi.n	8008d6e <USBH_Get_StringDesc+0x22>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e01c      	b.n	8008dac <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008d7a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d82:	893b      	ldrh	r3, [r7, #8]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	460b      	mov	r3, r1
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f812 	bl	8008db4 <USBH_GetDescriptor>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d107      	bne.n	8008daa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008da0:	893a      	ldrh	r2, [r7, #8]
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fb8d 	bl	80094c4 <USBH_ParseStringDesc>
  }

  return status;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	607b      	str	r3, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	72fb      	strb	r3, [r7, #11]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	789b      	ldrb	r3, [r3, #2]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d11c      	bne.n	8008e08 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2206      	movs	r2, #6
 8008dde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	893a      	ldrh	r2, [r7, #8]
 8008de4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df0:	d104      	bne.n	8008dfc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f240 4209 	movw	r2, #1033	@ 0x409
 8008df8:	829a      	strh	r2, [r3, #20]
 8008dfa:	e002      	b.n	8008e02 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8b3a      	ldrh	r2, [r7, #24]
 8008e06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e08:	8b3b      	ldrh	r3, [r7, #24]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fba5 	bl	800955e <USBH_CtlReq>
 8008e14:	4603      	mov	r3, r0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	789b      	ldrb	r3, [r3, #2]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d10f      	bne.n	8008e52 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2205      	movs	r2, #5
 8008e3c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb81 	bl	800955e <USBH_CtlReq>
 8008e5c:	4603      	mov	r3, r0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	789b      	ldrb	r3, [r3, #2]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d10e      	bne.n	8008e98 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2209      	movs	r2, #9
 8008e84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fb5e 	bl	800955e <USBH_CtlReq>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	789b      	ldrb	r3, [r3, #2]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d10f      	bne.n	8008ee0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb3a 	bl	800955e <USBH_CtlReq>
 8008eea:	4603      	mov	r3, r0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	789b      	ldrb	r3, [r3, #2]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d10f      	bne.n	8008f28 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb16 	bl	800955e <USBH_CtlReq>
 8008f32:	4603      	mov	r3, r0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f50:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e094      	b.n	800908a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	785a      	ldrb	r2, [r3, #1]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	3302      	adds	r3, #2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3303      	adds	r3, #3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4313      	orrs	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	791a      	ldrb	r2, [r3, #4]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	795a      	ldrb	r2, [r3, #5]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	799a      	ldrb	r2, [r3, #6]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	79da      	ldrb	r2, [r3, #7]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d11b      	bne.n	8008ff6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	79db      	ldrb	r3, [r3, #7]
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	dc0f      	bgt.n	8008fe6 <USBH_ParseDevDesc+0xaa>
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	db0f      	blt.n	8008fea <USBH_ParseDevDesc+0xae>
 8008fca:	3b08      	subs	r3, #8
 8008fcc:	4a32      	ldr	r2, [pc, #200]	@ (8009098 <USBH_ParseDevDesc+0x15c>)
 8008fce:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d106      	bne.n	8008ff2 <USBH_ParseDevDesc+0xb6>
 8008fe4:	e001      	b.n	8008fea <USBH_ParseDevDesc+0xae>
 8008fe6:	2b40      	cmp	r3, #64	@ 0x40
 8008fe8:	d003      	beq.n	8008ff2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2208      	movs	r2, #8
 8008fee:	71da      	strb	r2, [r3, #7]
        break;
 8008ff0:	e000      	b.n	8008ff4 <USBH_ParseDevDesc+0xb8>
        break;
 8008ff2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008ff4:	e00e      	b.n	8009014 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d107      	bne.n	8009010 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	79db      	ldrb	r3, [r3, #7]
 8009004:	2b08      	cmp	r3, #8
 8009006:	d005      	beq.n	8009014 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	2208      	movs	r2, #8
 800900c:	71da      	strb	r2, [r3, #7]
 800900e:	e001      	b.n	8009014 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009010:	2303      	movs	r3, #3
 8009012:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	2b08      	cmp	r3, #8
 8009018:	d936      	bls.n	8009088 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3308      	adds	r3, #8
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	3309      	adds	r3, #9
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	b29b      	uxth	r3, r3
 800902c:	4313      	orrs	r3, r2
 800902e:	b29a      	uxth	r2, r3
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	330a      	adds	r3, #10
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	330b      	adds	r3, #11
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	4313      	orrs	r3, r2
 8009048:	b29a      	uxth	r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	330c      	adds	r3, #12
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	330d      	adds	r3, #13
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	b29b      	uxth	r3, r3
 8009060:	4313      	orrs	r3, r2
 8009062:	b29a      	uxth	r2, r3
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	7b9a      	ldrb	r2, [r3, #14]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	7bda      	ldrb	r2, [r3, #15]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	7c1a      	ldrb	r2, [r3, #16]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	7c5a      	ldrb	r2, [r3, #17]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
}
 800908a:	4618      	mov	r0, r3
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	01000101 	.word	0x01000101

0800909c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08c      	sub	sp, #48	@ 0x30
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80090b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80090ca:	2302      	movs	r3, #2
 80090cc:	e0da      	b.n	8009284 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b09      	cmp	r3, #9
 80090d8:	d002      	beq.n	80090e0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	2209      	movs	r2, #9
 80090de:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	785a      	ldrb	r2, [r3, #1]
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3302      	adds	r3, #2
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	3303      	adds	r3, #3
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	021b      	lsls	r3, r3, #8
 8009100:	b29b      	uxth	r3, r3
 8009102:	4313      	orrs	r3, r2
 8009104:	b29b      	uxth	r3, r3
 8009106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910a:	bf28      	it	cs
 800910c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009110:	b29a      	uxth	r2, r3
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	791a      	ldrb	r2, [r3, #4]
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	795a      	ldrb	r2, [r3, #5]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	799a      	ldrb	r2, [r3, #6]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	79da      	ldrb	r2, [r3, #7]
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	7a1a      	ldrb	r2, [r3, #8]
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	2b09      	cmp	r3, #9
 8009142:	f240 809d 	bls.w	8009280 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009146:	2309      	movs	r3, #9
 8009148:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800914e:	e081      	b.n	8009254 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009150:	f107 0316 	add.w	r3, r7, #22
 8009154:	4619      	mov	r1, r3
 8009156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009158:	f000 f9e7 	bl	800952a <USBH_GetNextDesc>
 800915c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b04      	cmp	r3, #4
 8009164:	d176      	bne.n	8009254 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b09      	cmp	r3, #9
 800916c:	d002      	beq.n	8009174 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	2209      	movs	r2, #9
 8009172:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009178:	221a      	movs	r2, #26
 800917a:	fb02 f303 	mul.w	r3, r2, r3
 800917e:	3308      	adds	r3, #8
 8009180:	6a3a      	ldr	r2, [r7, #32]
 8009182:	4413      	add	r3, r2
 8009184:	3302      	adds	r3, #2
 8009186:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800918a:	69f8      	ldr	r0, [r7, #28]
 800918c:	f000 f87e 	bl	800928c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800919a:	e043      	b.n	8009224 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800919c:	f107 0316 	add.w	r3, r7, #22
 80091a0:	4619      	mov	r1, r3
 80091a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a4:	f000 f9c1 	bl	800952a <USBH_GetNextDesc>
 80091a8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	2b05      	cmp	r3, #5
 80091b0:	d138      	bne.n	8009224 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	795b      	ldrb	r3, [r3, #5]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d113      	bne.n	80091e2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d003      	beq.n	80091ca <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	799b      	ldrb	r3, [r3, #6]
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d10b      	bne.n	80091e2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	79db      	ldrb	r3, [r3, #7]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10b      	bne.n	80091ea <USBH_ParseCfgDesc+0x14e>
 80091d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d007      	beq.n	80091ea <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	2209      	movs	r2, #9
 80091de:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80091e0:	e003      	b.n	80091ea <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80091e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e4:	2207      	movs	r2, #7
 80091e6:	701a      	strb	r2, [r3, #0]
 80091e8:	e000      	b.n	80091ec <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80091ea:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80091ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091f4:	3201      	adds	r2, #1
 80091f6:	00d2      	lsls	r2, r2, #3
 80091f8:	211a      	movs	r1, #26
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	3308      	adds	r3, #8
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	4413      	add	r3, r2
 8009206:	3304      	adds	r3, #4
 8009208:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800920a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 f870 	bl	80092f4 <USBH_ParseEPDesc>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800921a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800921e:	3301      	adds	r3, #1
 8009220:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	791b      	ldrb	r3, [r3, #4]
 8009228:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800922c:	429a      	cmp	r2, r3
 800922e:	d204      	bcs.n	800923a <USBH_ParseCfgDesc+0x19e>
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	885a      	ldrh	r2, [r3, #2]
 8009234:	8afb      	ldrh	r3, [r7, #22]
 8009236:	429a      	cmp	r2, r3
 8009238:	d8b0      	bhi.n	800919c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009242:	429a      	cmp	r2, r3
 8009244:	d201      	bcs.n	800924a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009246:	2303      	movs	r3, #3
 8009248:	e01c      	b.n	8009284 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800924a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800924e:	3301      	adds	r3, #1
 8009250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009258:	2b01      	cmp	r3, #1
 800925a:	d805      	bhi.n	8009268 <USBH_ParseCfgDesc+0x1cc>
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	885a      	ldrh	r2, [r3, #2]
 8009260:	8afb      	ldrh	r3, [r7, #22]
 8009262:	429a      	cmp	r2, r3
 8009264:	f63f af74 	bhi.w	8009150 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	bf28      	it	cs
 8009270:	2302      	movcs	r3, #2
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009278:	429a      	cmp	r2, r3
 800927a:	d201      	bcs.n	8009280 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800927c:	2303      	movs	r3, #3
 800927e:	e001      	b.n	8009284 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	@ 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785a      	ldrb	r2, [r3, #1]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	789a      	ldrb	r2, [r3, #2]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	78da      	ldrb	r2, [r3, #3]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	3304      	adds	r3, #4
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	bf28      	it	cs
 80092c0:	2302      	movcs	r3, #2
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	795a      	ldrb	r2, [r3, #5]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	799a      	ldrb	r2, [r3, #6]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	79da      	ldrb	r2, [r3, #7]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	7a1a      	ldrb	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	721a      	strb	r2, [r3, #8]
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	785a      	ldrb	r2, [r3, #1]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	789a      	ldrb	r2, [r3, #2]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	78da      	ldrb	r2, [r3, #3]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3305      	adds	r3, #5
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	021b      	lsls	r3, r3, #8
 8009334:	b29b      	uxth	r3, r3
 8009336:	4313      	orrs	r3, r2
 8009338:	b29a      	uxth	r2, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	799a      	ldrb	r2, [r3, #6]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	889b      	ldrh	r3, [r3, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009356:	d804      	bhi.n	8009362 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800935c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009360:	d901      	bls.n	8009366 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800936c:	2b00      	cmp	r3, #0
 800936e:	d136      	bne.n	80093de <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	78db      	ldrb	r3, [r3, #3]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d108      	bne.n	800938e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	889b      	ldrh	r3, [r3, #4]
 8009380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009384:	f240 8097 	bls.w	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009388:	2303      	movs	r3, #3
 800938a:	75fb      	strb	r3, [r7, #23]
 800938c:	e093      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	78db      	ldrb	r3, [r3, #3]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d107      	bne.n	80093aa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	2b40      	cmp	r3, #64	@ 0x40
 80093a0:	f240 8089 	bls.w	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093a4:	2303      	movs	r3, #3
 80093a6:	75fb      	strb	r3, [r7, #23]
 80093a8:	e085      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	78db      	ldrb	r3, [r3, #3]
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d005      	beq.n	80093c2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	78db      	ldrb	r3, [r3, #3]
 80093ba:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d10a      	bne.n	80093d8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	799b      	ldrb	r3, [r3, #6]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <USBH_ParseEPDesc+0xde>
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	799b      	ldrb	r3, [r3, #6]
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	d970      	bls.n	80094b4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80093d2:	2303      	movs	r3, #3
 80093d4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093d6:	e06d      	b.n	80094b4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80093d8:	2303      	movs	r3, #3
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	e06b      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d13c      	bne.n	8009462 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	78db      	ldrb	r3, [r3, #3]
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d005      	beq.n	8009400 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	78db      	ldrb	r3, [r3, #3]
 80093f8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	889b      	ldrh	r3, [r3, #4]
 8009404:	2b40      	cmp	r3, #64	@ 0x40
 8009406:	d956      	bls.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009408:	2303      	movs	r3, #3
 800940a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800940c:	e053      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	78db      	ldrb	r3, [r3, #3]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d10e      	bne.n	8009438 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	799b      	ldrb	r3, [r3, #6]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009426:	2b10      	cmp	r3, #16
 8009428:	d803      	bhi.n	8009432 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800942e:	2b40      	cmp	r3, #64	@ 0x40
 8009430:	d941      	bls.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009432:	2303      	movs	r3, #3
 8009434:	75fb      	strb	r3, [r7, #23]
 8009436:	e03e      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	78db      	ldrb	r3, [r3, #3]
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	2b03      	cmp	r3, #3
 8009442:	d10b      	bne.n	800945c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	799b      	ldrb	r3, [r3, #6]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <USBH_ParseEPDesc+0x162>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	889b      	ldrh	r3, [r3, #4]
 8009450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009454:	d32f      	bcc.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009456:	2303      	movs	r3, #3
 8009458:	75fb      	strb	r3, [r7, #23]
 800945a:	e02c      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800945c:	2303      	movs	r3, #3
 800945e:	75fb      	strb	r3, [r7, #23]
 8009460:	e029      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009468:	2b02      	cmp	r3, #2
 800946a:	d120      	bne.n	80094ae <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	78db      	ldrb	r3, [r3, #3]
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	889b      	ldrh	r3, [r3, #4]
 800947c:	2b08      	cmp	r3, #8
 800947e:	d01a      	beq.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009480:	2303      	movs	r3, #3
 8009482:	75fb      	strb	r3, [r7, #23]
 8009484:	e017      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d10a      	bne.n	80094a8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	799b      	ldrb	r3, [r3, #6]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <USBH_ParseEPDesc+0x1ae>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	889b      	ldrh	r3, [r3, #4]
 800949e:	2b08      	cmp	r3, #8
 80094a0:	d909      	bls.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
 80094a6:	e006      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094a8:	2303      	movs	r3, #3
 80094aa:	75fb      	strb	r3, [r7, #23]
 80094ac:	e003      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80094ae:	2303      	movs	r3, #3
 80094b0:	75fb      	strb	r3, [r7, #23]
 80094b2:	e000      	b.n	80094b6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094b4:	bf00      	nop
  }

  return status;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d120      	bne.n	800951e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	1e9a      	subs	r2, r3, #2
 80094e2:	88fb      	ldrh	r3, [r7, #6]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bf28      	it	cs
 80094e8:	4613      	movcs	r3, r2
 80094ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3302      	adds	r3, #2
 80094f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80094f2:	2300      	movs	r3, #0
 80094f4:	82fb      	strh	r3, [r7, #22]
 80094f6:	e00b      	b.n	8009510 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094f8:	8afb      	ldrh	r3, [r7, #22]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3301      	adds	r3, #1
 8009508:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800950a:	8afb      	ldrh	r3, [r7, #22]
 800950c:	3302      	adds	r3, #2
 800950e:	82fb      	strh	r3, [r7, #22]
 8009510:	8afa      	ldrh	r2, [r7, #22]
 8009512:	8abb      	ldrh	r3, [r7, #20]
 8009514:	429a      	cmp	r2, r3
 8009516:	d3ef      	bcc.n	80094f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
  }
}
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	7812      	ldrb	r2, [r2, #0]
 800953c:	4413      	add	r3, r2
 800953e:	b29a      	uxth	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009550:	68fb      	ldr	r3, [r7, #12]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	4613      	mov	r3, r2
 800956a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	789b      	ldrb	r3, [r3, #2]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d002      	beq.n	800957e <USBH_CtlReq+0x20>
 8009578:	2b02      	cmp	r3, #2
 800957a:	d00f      	beq.n	800959c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800957c:	e027      	b.n	80095ce <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2202      	movs	r2, #2
 8009594:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009596:	2301      	movs	r3, #1
 8009598:	75fb      	strb	r3, [r7, #23]
      break;
 800959a:	e018      	b.n	80095ce <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f81b 	bl	80095d8 <USBH_HandleControl>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <USBH_CtlReq+0x54>
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d106      	bne.n	80095c0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	761a      	strb	r2, [r3, #24]
      break;
 80095be:	e005      	b.n	80095cc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d102      	bne.n	80095cc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	709a      	strb	r2, [r3, #2]
      break;
 80095cc:	bf00      	nop
  }
  return status;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af02      	add	r7, sp, #8
 80095de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7e1b      	ldrb	r3, [r3, #24]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	2b0a      	cmp	r3, #10
 80095f0:	f200 8156 	bhi.w	80098a0 <USBH_HandleControl+0x2c8>
 80095f4:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <USBH_HandleControl+0x24>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009629 	.word	0x08009629
 8009600:	08009643 	.word	0x08009643
 8009604:	080096ad 	.word	0x080096ad
 8009608:	080096d3 	.word	0x080096d3
 800960c:	0800970b 	.word	0x0800970b
 8009610:	08009735 	.word	0x08009735
 8009614:	08009787 	.word	0x08009787
 8009618:	080097a9 	.word	0x080097a9
 800961c:	080097e5 	.word	0x080097e5
 8009620:	0800980b 	.word	0x0800980b
 8009624:	08009849 	.word	0x08009849
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f103 0110 	add.w	r1, r3, #16
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	795b      	ldrb	r3, [r3, #5]
 8009632:	461a      	mov	r2, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f943 	bl	80098c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2202      	movs	r2, #2
 800963e:	761a      	strb	r2, [r3, #24]
      break;
 8009640:	e139      	b.n	80098b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	795b      	ldrb	r3, [r3, #5]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fcc5 	bl	8009fd8 <USBH_LL_GetURBState>
 800964e:	4603      	mov	r3, r0
 8009650:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d11e      	bne.n	8009696 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7c1b      	ldrb	r3, [r3, #16]
 800965c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009660:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8adb      	ldrh	r3, [r3, #22]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800966a:	7b7b      	ldrb	r3, [r7, #13]
 800966c:	2b80      	cmp	r3, #128	@ 0x80
 800966e:	d103      	bne.n	8009678 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2203      	movs	r2, #3
 8009674:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009676:	e115      	b.n	80098a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2205      	movs	r2, #5
 800967c:	761a      	strb	r2, [r3, #24]
      break;
 800967e:	e111      	b.n	80098a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009680:	7b7b      	ldrb	r3, [r7, #13]
 8009682:	2b80      	cmp	r3, #128	@ 0x80
 8009684:	d103      	bne.n	800968e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2209      	movs	r2, #9
 800968a:	761a      	strb	r2, [r3, #24]
      break;
 800968c:	e10a      	b.n	80098a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2207      	movs	r2, #7
 8009692:	761a      	strb	r2, [r3, #24]
      break;
 8009694:	e106      	b.n	80098a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	2b04      	cmp	r3, #4
 800969a:	d003      	beq.n	80096a4 <USBH_HandleControl+0xcc>
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	f040 8100 	bne.w	80098a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	220b      	movs	r2, #11
 80096a8:	761a      	strb	r2, [r3, #24]
      break;
 80096aa:	e0fb      	b.n	80098a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6899      	ldr	r1, [r3, #8]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	899a      	ldrh	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f93a 	bl	800993e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	761a      	strb	r2, [r3, #24]
      break;
 80096d0:	e0f1      	b.n	80098b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	791b      	ldrb	r3, [r3, #4]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fc7d 	bl	8009fd8 <USBH_LL_GetURBState>
 80096de:	4603      	mov	r3, r0
 80096e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d102      	bne.n	80096ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2209      	movs	r2, #9
 80096ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b05      	cmp	r3, #5
 80096f2:	d102      	bne.n	80096fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096f8:	e0d6      	b.n	80098a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	f040 80d3 	bne.w	80098a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	220b      	movs	r2, #11
 8009706:	761a      	strb	r2, [r3, #24]
      break;
 8009708:	e0ce      	b.n	80098a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6899      	ldr	r1, [r3, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	899a      	ldrh	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	795b      	ldrb	r3, [r3, #5]
 8009716:	2001      	movs	r0, #1
 8009718:	9000      	str	r0, [sp, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f8ea 	bl	80098f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2206      	movs	r2, #6
 8009730:	761a      	strb	r2, [r3, #24]
      break;
 8009732:	e0c0      	b.n	80098b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	795b      	ldrb	r3, [r3, #5]
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fc4c 	bl	8009fd8 <USBH_LL_GetURBState>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d103      	bne.n	8009752 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2207      	movs	r2, #7
 800974e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009750:	e0ac      	b.n	80098ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b05      	cmp	r3, #5
 8009756:	d105      	bne.n	8009764 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	220c      	movs	r2, #12
 800975c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800975e:	2303      	movs	r3, #3
 8009760:	73fb      	strb	r3, [r7, #15]
      break;
 8009762:	e0a3      	b.n	80098ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d103      	bne.n	8009772 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2205      	movs	r2, #5
 800976e:	761a      	strb	r2, [r3, #24]
      break;
 8009770:	e09c      	b.n	80098ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b04      	cmp	r3, #4
 8009776:	f040 8099 	bne.w	80098ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	220b      	movs	r2, #11
 800977e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009780:	2302      	movs	r3, #2
 8009782:	73fb      	strb	r3, [r7, #15]
      break;
 8009784:	e092      	b.n	80098ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	791b      	ldrb	r3, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	2100      	movs	r1, #0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f8d5 	bl	800993e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2208      	movs	r2, #8
 80097a4:	761a      	strb	r2, [r3, #24]

      break;
 80097a6:	e086      	b.n	80098b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	791b      	ldrb	r3, [r3, #4]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc12 	bl	8009fd8 <USBH_LL_GetURBState>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d105      	bne.n	80097ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	220d      	movs	r2, #13
 80097c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097c8:	e072      	b.n	80098b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d103      	bne.n	80097d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	220b      	movs	r2, #11
 80097d4:	761a      	strb	r2, [r3, #24]
      break;
 80097d6:	e06b      	b.n	80098b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b05      	cmp	r3, #5
 80097dc:	d168      	bne.n	80098b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80097de:	2303      	movs	r3, #3
 80097e0:	73fb      	strb	r3, [r7, #15]
      break;
 80097e2:	e065      	b.n	80098b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	795b      	ldrb	r3, [r3, #5]
 80097e8:	2201      	movs	r2, #1
 80097ea:	9200      	str	r2, [sp, #0]
 80097ec:	2200      	movs	r2, #0
 80097ee:	2100      	movs	r1, #0
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f87f 	bl	80098f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	220a      	movs	r2, #10
 8009806:	761a      	strb	r2, [r3, #24]
      break;
 8009808:	e055      	b.n	80098b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	795b      	ldrb	r3, [r3, #5]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fbe1 	bl	8009fd8 <USBH_LL_GetURBState>
 8009816:	4603      	mov	r3, r0
 8009818:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d105      	bne.n	800982c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220d      	movs	r2, #13
 8009828:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800982a:	e043      	b.n	80098b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d103      	bne.n	800983a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2209      	movs	r2, #9
 8009836:	761a      	strb	r2, [r3, #24]
      break;
 8009838:	e03c      	b.n	80098b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	2b04      	cmp	r3, #4
 800983e:	d139      	bne.n	80098b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	220b      	movs	r2, #11
 8009844:	761a      	strb	r2, [r3, #24]
      break;
 8009846:	e035      	b.n	80098b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7e5b      	ldrb	r3, [r3, #25]
 800984c:	3301      	adds	r3, #1
 800984e:	b2da      	uxtb	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	765a      	strb	r2, [r3, #25]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7e5b      	ldrb	r3, [r3, #25]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d806      	bhi.n	800986a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009868:	e025      	b.n	80098b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009870:	2106      	movs	r1, #6
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	795b      	ldrb	r3, [r3, #5]
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f90c 	bl	8009aa0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	791b      	ldrb	r3, [r3, #4]
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f906 	bl	8009aa0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800989a:	2302      	movs	r3, #2
 800989c:	73fb      	strb	r3, [r7, #15]
      break;
 800989e:	e00a      	b.n	80098b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80098a0:	bf00      	nop
 80098a2:	e008      	b.n	80098b6 <USBH_HandleControl+0x2de>
      break;
 80098a4:	bf00      	nop
 80098a6:	e006      	b.n	80098b6 <USBH_HandleControl+0x2de>
      break;
 80098a8:	bf00      	nop
 80098aa:	e004      	b.n	80098b6 <USBH_HandleControl+0x2de>
      break;
 80098ac:	bf00      	nop
 80098ae:	e002      	b.n	80098b6 <USBH_HandleControl+0x2de>
      break;
 80098b0:	bf00      	nop
 80098b2:	e000      	b.n	80098b6 <USBH_HandleControl+0x2de>
      break;
 80098b4:	bf00      	nop
  }

  return status;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af04      	add	r7, sp, #16
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098ce:	79f9      	ldrb	r1, [r7, #7]
 80098d0:	2300      	movs	r3, #0
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	2308      	movs	r3, #8
 80098d6:	9302      	str	r3, [sp, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	2300      	movs	r3, #0
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fb46 	bl	8009f76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af04      	add	r7, sp, #16
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4611      	mov	r1, r2
 8009900:	461a      	mov	r2, r3
 8009902:	460b      	mov	r3, r1
 8009904:	80fb      	strh	r3, [r7, #6]
 8009906:	4613      	mov	r3, r2
 8009908:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009918:	7979      	ldrb	r1, [r7, #5]
 800991a:	7e3b      	ldrb	r3, [r7, #24]
 800991c:	9303      	str	r3, [sp, #12]
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	9302      	str	r3, [sp, #8]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	2301      	movs	r3, #1
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	2300      	movs	r3, #0
 800992c:	2200      	movs	r2, #0
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fb21 	bl	8009f76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b088      	sub	sp, #32
 8009942:	af04      	add	r7, sp, #16
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	4611      	mov	r1, r2
 800994a:	461a      	mov	r2, r3
 800994c:	460b      	mov	r3, r1
 800994e:	80fb      	strh	r3, [r7, #6]
 8009950:	4613      	mov	r3, r2
 8009952:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009954:	7979      	ldrb	r1, [r7, #5]
 8009956:	2300      	movs	r3, #0
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	2201      	movs	r2, #1
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fb03 	bl	8009f76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009970:	2300      	movs	r3, #0

}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b088      	sub	sp, #32
 800997e:	af04      	add	r7, sp, #16
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	4611      	mov	r1, r2
 8009986:	461a      	mov	r2, r3
 8009988:	460b      	mov	r3, r1
 800998a:	80fb      	strh	r3, [r7, #6]
 800998c:	4613      	mov	r3, r2
 800998e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800999e:	7979      	ldrb	r1, [r7, #5]
 80099a0:	7e3b      	ldrb	r3, [r7, #24]
 80099a2:	9303      	str	r3, [sp, #12]
 80099a4:	88fb      	ldrh	r3, [r7, #6]
 80099a6:	9302      	str	r3, [sp, #8]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	2301      	movs	r3, #1
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	2302      	movs	r3, #2
 80099b2:	2200      	movs	r2, #0
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fade 	bl	8009f76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4611      	mov	r1, r2
 80099d0:	461a      	mov	r2, r3
 80099d2:	460b      	mov	r3, r1
 80099d4:	80fb      	strh	r3, [r7, #6]
 80099d6:	4613      	mov	r3, r2
 80099d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099da:	7979      	ldrb	r1, [r7, #5]
 80099dc:	2300      	movs	r3, #0
 80099de:	9303      	str	r3, [sp, #12]
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2302      	movs	r3, #2
 80099ee:	2201      	movs	r2, #1
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fac0 	bl	8009f76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af04      	add	r7, sp, #16
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	4608      	mov	r0, r1
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4603      	mov	r3, r0
 8009a10:	70fb      	strb	r3, [r7, #3]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70bb      	strb	r3, [r7, #2]
 8009a16:	4613      	mov	r3, r2
 8009a18:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009a1a:	7878      	ldrb	r0, [r7, #1]
 8009a1c:	78ba      	ldrb	r2, [r7, #2]
 8009a1e:	78f9      	ldrb	r1, [r7, #3]
 8009a20:	8b3b      	ldrh	r3, [r7, #24]
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	7d3b      	ldrb	r3, [r7, #20]
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	7c3b      	ldrb	r3, [r7, #16]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa53 	bl	8009eda <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa72 	bl	8009f38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f836 	bl	8009adc <USBH_GetFreePipe>
 8009a70:	4603      	mov	r3, r0
 8009a72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a74:	89fb      	ldrh	r3, [r7, #14]
 8009a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00a      	beq.n	8009a94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a7e:	78fa      	ldrb	r2, [r7, #3]
 8009a80:	89fb      	ldrh	r3, [r7, #14]
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	33e0      	adds	r3, #224	@ 0xe0
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	440b      	add	r3, r1
 8009a92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a94:	89fb      	ldrh	r3, [r7, #14]
 8009a96:	b2db      	uxtb	r3, r3
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	2b0f      	cmp	r3, #15
 8009ab0:	d80d      	bhi.n	8009ace <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	33e0      	adds	r3, #224	@ 0xe0
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	33e0      	adds	r3, #224	@ 0xe0
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
 8009aec:	e00f      	b.n	8009b0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	33e0      	adds	r3, #224	@ 0xe0
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	e007      	b.n	8009b18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	2b0f      	cmp	r3, #15
 8009b12:	d9ec      	bls.n	8009aee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b28:	2201      	movs	r2, #1
 8009b2a:	490e      	ldr	r1, [pc, #56]	@ (8009b64 <MX_USB_HOST_Init+0x40>)
 8009b2c:	480e      	ldr	r0, [pc, #56]	@ (8009b68 <MX_USB_HOST_Init+0x44>)
 8009b2e:	f7fe fb15 	bl	800815c <USBH_Init>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b38:	f7f7 f8fe 	bl	8000d38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b3c:	490b      	ldr	r1, [pc, #44]	@ (8009b6c <MX_USB_HOST_Init+0x48>)
 8009b3e:	480a      	ldr	r0, [pc, #40]	@ (8009b68 <MX_USB_HOST_Init+0x44>)
 8009b40:	f7fe fbb9 	bl	80082b6 <USBH_RegisterClass>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b4a:	f7f7 f8f5 	bl	8000d38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b4e:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <MX_USB_HOST_Init+0x44>)
 8009b50:	f7fe fc3d 	bl	80083ce <USBH_Start>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b5a:	f7f7 f8ed 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08009b85 	.word	0x08009b85
 8009b68:	20000224 	.word	0x20000224
 8009b6c:	2000000c 	.word	0x2000000c

08009b70 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b74:	4802      	ldr	r0, [pc, #8]	@ (8009b80 <MX_USB_HOST_Process+0x10>)
 8009b76:	f7fe fc3b 	bl	80083f0 <USBH_Process>
}
 8009b7a:	bf00      	nop
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000224 	.word	0x20000224

08009b84 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d819      	bhi.n	8009bcc <USBH_UserProcess+0x48>
 8009b98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba0 <USBH_UserProcess+0x1c>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009bcd 	.word	0x08009bcd
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	08009bc5 	.word	0x08009bc5
 8009bb0:	08009bb5 	.word	0x08009bb5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bb4:	4b09      	ldr	r3, [pc, #36]	@ (8009bdc <USBH_UserProcess+0x58>)
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	701a      	strb	r2, [r3, #0]
  break;
 8009bba:	e008      	b.n	8009bce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009bbc:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <USBH_UserProcess+0x58>)
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	701a      	strb	r2, [r3, #0]
  break;
 8009bc2:	e004      	b.n	8009bce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	@ (8009bdc <USBH_UserProcess+0x58>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	701a      	strb	r2, [r3, #0]
  break;
 8009bca:	e000      	b.n	8009bce <USBH_UserProcess+0x4a>

  default:
  break;
 8009bcc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009bce:	bf00      	nop
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	200005fc 	.word	0x200005fc

08009be0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	@ 0x28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	605a      	str	r2, [r3, #4]
 8009bf2:	609a      	str	r2, [r3, #8]
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c00:	d147      	bne.n	8009c92 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c02:	2300      	movs	r3, #0
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	4b25      	ldr	r3, [pc, #148]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0a:	4a24      	ldr	r2, [pc, #144]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c12:	4b22      	ldr	r3, [pc, #136]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	613b      	str	r3, [r7, #16]
 8009c1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009c2c:	f107 0314 	add.w	r3, r7, #20
 8009c30:	4619      	mov	r1, r3
 8009c32:	481b      	ldr	r0, [pc, #108]	@ (8009ca0 <HAL_HCD_MspInit+0xc0>)
 8009c34:	f7f8 f908 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c38:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c46:	2303      	movs	r3, #3
 8009c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c4e:	f107 0314 	add.w	r3, r7, #20
 8009c52:	4619      	mov	r1, r3
 8009c54:	4812      	ldr	r0, [pc, #72]	@ (8009ca0 <HAL_HCD_MspInit+0xc0>)
 8009c56:	f7f8 f8f7 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c5a:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c64:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c76:	4b09      	ldr	r3, [pc, #36]	@ (8009c9c <HAL_HCD_MspInit+0xbc>)
 8009c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c82:	2200      	movs	r2, #0
 8009c84:	2100      	movs	r1, #0
 8009c86:	2043      	movs	r0, #67	@ 0x43
 8009c88:	f7f8 f88e 	bl	8001da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c8c:	2043      	movs	r0, #67	@ 0x43
 8009c8e:	f7f8 f8b7 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c92:	bf00      	nop
 8009c94:	3728      	adds	r7, #40	@ 0x28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40023800 	.word	0x40023800
 8009ca0:	40020000 	.word	0x40020000

08009ca4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe ff73 	bl	8008b9e <USBH_LL_IncTimer>
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe ffab 	bl	8008c2a <USBH_LL_Connect>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe ffb4 	bl	8008c58 <USBH_LL_Disconnect>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
 8009d04:	4613      	mov	r3, r2
 8009d06:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe ff65 	bl	8008bf2 <USBH_LL_PortEnabled>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe ff65 	bl	8008c0e <USBH_LL_PortDisabled>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d12a      	bne.n	8009db4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d5e:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a15      	ldr	r2, [pc, #84]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d6a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d76:	4b12      	ldr	r3, [pc, #72]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d78:	2208      	movs	r2, #8
 8009d7a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d82:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d88:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d94:	480a      	ldr	r0, [pc, #40]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009d96:	f7f8 fb1b 	bl	80023d0 <HAL_HCD_Init>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009da0:	f7f6 ffca 	bl	8000d38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009da4:	4806      	ldr	r0, [pc, #24]	@ (8009dc0 <USBH_LL_Init+0x74>)
 8009da6:	f7f8 ff87 	bl	8002cb8 <HAL_HCD_GetCurrentFrame>
 8009daa:	4603      	mov	r3, r0
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fe fee6 	bl	8008b80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000600 	.word	0x20000600

08009dc4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f8 fef4 	bl	8002bc8 <HAL_HCD_Start>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 f95e 	bl	800a0a8 <USBH_Get_USB_Status>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7f8 fefc 	bl	8002c0e <HAL_HCD_Stop>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f943 	bl	800a0a8 <USBH_Get_USB_Status>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f8 ff46 	bl	8002cd4 <HAL_HCD_GetCurrentSpeed>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d00c      	beq.n	8009e68 <USBH_LL_GetSpeed+0x38>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d80d      	bhi.n	8009e6e <USBH_LL_GetSpeed+0x3e>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <USBH_LL_GetSpeed+0x2c>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d003      	beq.n	8009e62 <USBH_LL_GetSpeed+0x32>
 8009e5a:	e008      	b.n	8009e6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	e008      	b.n	8009e74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e62:	2301      	movs	r3, #1
 8009e64:	73fb      	strb	r3, [r7, #15]
    break;
 8009e66:	e005      	b.n	8009e74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6c:	e002      	b.n	8009e74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	73fb      	strb	r3, [r7, #15]
    break;
 8009e72:	bf00      	nop
  }
  return  speed;
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7f8 fed7 	bl	8002c48 <HAL_HCD_ResetPort>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 f901 	bl	800a0a8 <USBH_Get_USB_Status>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7f8 fedf 	bl	8002c8e <HAL_HCD_HC_GetXferCount>
 8009ed0:	4603      	mov	r3, r0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009eda:	b590      	push	{r4, r7, lr}
 8009edc:	b089      	sub	sp, #36	@ 0x24
 8009ede:	af04      	add	r7, sp, #16
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4603      	mov	r3, r0
 8009eea:	70fb      	strb	r3, [r7, #3]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70bb      	strb	r3, [r7, #2]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f02:	787c      	ldrb	r4, [r7, #1]
 8009f04:	78ba      	ldrb	r2, [r7, #2]
 8009f06:	78f9      	ldrb	r1, [r7, #3]
 8009f08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f0a:	9302      	str	r3, [sp, #8]
 8009f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	4623      	mov	r3, r4
 8009f1a:	f7f8 facb 	bl	80024b4 <HAL_HCD_HC_Init>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 f8bf 	bl	800a0a8 <USBH_Get_USB_Status>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd90      	pop	{r4, r7, pc}

08009f38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f8 fb64 	bl	8002624 <HAL_HCD_HC_Halt>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f8a0 	bl	800a0a8 <USBH_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f76:	b590      	push	{r4, r7, lr}
 8009f78:	b089      	sub	sp, #36	@ 0x24
 8009f7a:	af04      	add	r7, sp, #16
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4611      	mov	r1, r2
 8009f82:	461a      	mov	r2, r3
 8009f84:	4603      	mov	r3, r0
 8009f86:	70fb      	strb	r3, [r7, #3]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70bb      	strb	r3, [r7, #2]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f9e:	787c      	ldrb	r4, [r7, #1]
 8009fa0:	78ba      	ldrb	r2, [r7, #2]
 8009fa2:	78f9      	ldrb	r1, [r7, #3]
 8009fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4623      	mov	r3, r4
 8009fba:	f7f8 fb57 	bl	800266c <HAL_HCD_HC_SubmitRequest>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f86f 	bl	800a0a8 <USBH_Get_USB_Status>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd90      	pop	{r4, r7, pc}

08009fd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f8 fe38 	bl	8002c64 <HAL_HCD_HC_GetURBState>
 8009ff4:	4603      	mov	r3, r0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	460b      	mov	r3, r1
 800a008:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a010:	2b01      	cmp	r3, #1
 800a012:	d103      	bne.n	800a01c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f872 	bl	800a100 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a01c:	20c8      	movs	r0, #200	@ 0xc8
 800a01e:	f7f7 f861 	bl	80010e4 <HAL_Delay>
  return USBH_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
 800a038:	4613      	mov	r3, r2
 800a03a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a042:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	4613      	mov	r3, r2
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	3317      	adds	r3, #23
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	68f9      	ldr	r1, [r7, #12]
 800a05e:	4613      	mov	r3, r2
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	1a9b      	subs	r3, r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	333c      	adds	r3, #60	@ 0x3c
 800a06a:	78ba      	ldrb	r2, [r7, #2]
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	e009      	b.n	800a084 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	4613      	mov	r3, r2
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	333d      	adds	r3, #61	@ 0x3d
 800a080:	78ba      	ldrb	r2, [r7, #2]
 800a082:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f7 f822 	bl	80010e4 <HAL_Delay>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d817      	bhi.n	800a0ec <USBH_Get_USB_Status+0x44>
 800a0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <USBH_Get_USB_Status+0x1c>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0db 	.word	0x0800a0db
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e7 	.word	0x0800a0e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d8:	e00b      	b.n	800a0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0de:	e008      	b.n	800a0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e4:	e005      	b.n	800a0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ea:	e002      	b.n	800a0f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	bf00      	nop
  }
  return usb_status;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
 800a118:	e001      	b.n	800a11e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a11a:	2301      	movs	r3, #1
 800a11c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	461a      	mov	r2, r3
 800a122:	2101      	movs	r1, #1
 800a124:	4803      	ldr	r0, [pc, #12]	@ (800a134 <MX_DriverVbusFS+0x34>)
 800a126:	f7f8 f927 	bl	8002378 <HAL_GPIO_WritePin>
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40020800 	.word	0x40020800

0800a138 <arm_fir_init_f32>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	9c04      	ldr	r4, [sp, #16]
 800a13c:	6082      	str	r2, [r0, #8]
 800a13e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800a142:	3c01      	subs	r4, #1
 800a144:	4605      	mov	r5, r0
 800a146:	440c      	add	r4, r1
 800a148:	8001      	strh	r1, [r0, #0]
 800a14a:	461e      	mov	r6, r3
 800a14c:	00a2      	lsls	r2, r4, #2
 800a14e:	4618      	mov	r0, r3
 800a150:	2100      	movs	r1, #0
 800a152:	f000 fb25 	bl	800a7a0 <memset>
 800a156:	606e      	str	r6, [r5, #4]
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	bf00      	nop

0800a15c <arm_fir_f32>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	ed2d 8b10 	vpush	{d8-d15}
 800a164:	b089      	sub	sp, #36	@ 0x24
 800a166:	4605      	mov	r5, r0
 800a168:	9003      	str	r0, [sp, #12]
 800a16a:	8800      	ldrh	r0, [r0, #0]
 800a16c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	461e      	mov	r6, r3
 800a174:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 800a178:	3b01      	subs	r3, #1
 800a17a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800a17e:	08f3      	lsrs	r3, r6, #3
 800a180:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800a184:	9001      	str	r0, [sp, #4]
 800a186:	4625      	mov	r5, r4
 800a188:	9400      	str	r4, [sp, #0]
 800a18a:	9302      	str	r3, [sp, #8]
 800a18c:	f000 81ee 	beq.w	800a56c <arm_fir_f32+0x410>
 800a190:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800a194:	469e      	mov	lr, r3
 800a196:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800a19a:	1f1e      	subs	r6, r3, #4
 800a19c:	4604      	mov	r4, r0
 800a19e:	9605      	str	r6, [sp, #20]
 800a1a0:	eb08 0003 	add.w	r0, r8, r3
 800a1a4:	f004 0a07 	and.w	sl, r4, #7
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	f10c 0420 	add.w	r4, ip, #32
 800a1ae:	f8cd c018 	str.w	ip, [sp, #24]
 800a1b2:	4684      	mov	ip, r0
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a1ba:	9107      	str	r1, [sp, #28]
 800a1bc:	f105 0720 	add.w	r7, r5, #32
 800a1c0:	f101 0620 	add.w	r6, r1, #32
 800a1c4:	f102 0520 	add.w	r5, r2, #32
 800a1c8:	4652      	mov	r2, sl
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800a1d0:	f847 3c20 	str.w	r3, [r7, #-32]
 800a1d4:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800a1d8:	f847 3c1c 	str.w	r3, [r7, #-28]
 800a1dc:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800a1e0:	f847 3c18 	str.w	r3, [r7, #-24]
 800a1e4:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800a1e8:	f847 3c14 	str.w	r3, [r7, #-20]
 800a1ec:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800a1f0:	f847 3c10 	str.w	r3, [r7, #-16]
 800a1f4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800a1f8:	f847 3c0c 	str.w	r3, [r7, #-12]
 800a1fc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800a200:	f847 3c08 	str.w	r3, [r7, #-8]
 800a204:	eddf 3af1 	vldr	s7, [pc, #964]	@ 800a5cc <arm_fir_f32+0x470>
 800a208:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a20c:	f847 3c04 	str.w	r3, [r7, #-4]
 800a210:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 800a214:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 800a218:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 800a21c:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 800a220:	ed14 1a04 	vldr	s2, [r4, #-16]
 800a224:	ed54 0a03 	vldr	s1, [r4, #-12]
 800a228:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a22c:	1f21      	subs	r1, r4, #4
 800a22e:	eef0 8a63 	vmov.f32	s17, s7
 800a232:	eef0 9a63 	vmov.f32	s19, s7
 800a236:	eef0 aa63 	vmov.f32	s21, s7
 800a23a:	eef0 ba63 	vmov.f32	s23, s7
 800a23e:	eeb0 ca63 	vmov.f32	s24, s7
 800a242:	eef0 ca63 	vmov.f32	s25, s7
 800a246:	eeb0 da63 	vmov.f32	s26, s7
 800a24a:	2800      	cmp	r0, #0
 800a24c:	f000 81e8 	beq.w	800a620 <arm_fir_f32+0x4c4>
 800a250:	f108 0120 	add.w	r1, r8, #32
 800a254:	f104 031c 	add.w	r3, r4, #28
 800a258:	4683      	mov	fp, r0
 800a25a:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 800a25e:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 800a262:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 800a266:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 800a26a:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 800a26e:	ed11 6a04 	vldr	s12, [r1, #-16]
 800a272:	ed51 6a03 	vldr	s13, [r1, #-12]
 800a276:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a27a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a27e:	ee23 fa04 	vmul.f32	s30, s6, s8
 800a282:	ee62 ea84 	vmul.f32	s29, s5, s8
 800a286:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 800a28a:	ee22 ea04 	vmul.f32	s28, s4, s8
 800a28e:	ee61 da84 	vmul.f32	s27, s3, s8
 800a292:	ee21 ba04 	vmul.f32	s22, s2, s8
 800a296:	ee20 aa84 	vmul.f32	s20, s1, s8
 800a29a:	ee20 9a04 	vmul.f32	s18, s0, s8
 800a29e:	ee28 4a04 	vmul.f32	s8, s16, s8
 800a2a2:	ee62 fa24 	vmul.f32	s31, s4, s9
 800a2a6:	ee3c ca0e 	vadd.f32	s24, s24, s28
 800a2aa:	ee7b baad 	vadd.f32	s23, s23, s27
 800a2ae:	ee21 eaa4 	vmul.f32	s28, s3, s9
 800a2b2:	ee61 da24 	vmul.f32	s27, s2, s9
 800a2b6:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800a2ba:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800a2be:	ee20 baa4 	vmul.f32	s22, s1, s9
 800a2c2:	ee20 aa24 	vmul.f32	s20, s0, s9
 800a2c6:	ee3d da0f 	vadd.f32	s26, s26, s30
 800a2ca:	ee7c caae 	vadd.f32	s25, s25, s29
 800a2ce:	ee22 faa4 	vmul.f32	s30, s5, s9
 800a2d2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a2d6:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 800a2da:	ee28 9a24 	vmul.f32	s18, s16, s9
 800a2de:	ee73 3a84 	vadd.f32	s7, s7, s8
 800a2e2:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a2e6:	ee22 4a05 	vmul.f32	s8, s4, s10
 800a2ea:	ee61 ea05 	vmul.f32	s29, s2, s10
 800a2ee:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800a2f2:	ee3d da0f 	vadd.f32	s26, s26, s30
 800a2f6:	ee7c caaf 	vadd.f32	s25, s25, s31
 800a2fa:	ee20 fa85 	vmul.f32	s30, s1, s10
 800a2fe:	ee61 fa85 	vmul.f32	s31, s3, s10
 800a302:	ee3c ea0e 	vadd.f32	s28, s24, s28
 800a306:	ee7b daad 	vadd.f32	s27, s23, s27
 800a30a:	ee3a ba8b 	vadd.f32	s22, s21, s22
 800a30e:	ee60 ba05 	vmul.f32	s23, s0, s10
 800a312:	ee68 aa05 	vmul.f32	s21, s16, s10
 800a316:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800a31a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a31e:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800a322:	ee63 4a05 	vmul.f32	s9, s6, s10
 800a326:	ee22 5a85 	vmul.f32	s10, s5, s10
 800a32a:	ee21 9a25 	vmul.f32	s18, s2, s11
 800a32e:	ee20 ca25 	vmul.f32	s24, s0, s11
 800a332:	ee3d da04 	vadd.f32	s26, s26, s8
 800a336:	ee7c caaf 	vadd.f32	s25, s25, s31
 800a33a:	ee21 4aa5 	vmul.f32	s8, s3, s11
 800a33e:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800a342:	ed53 1a04 	vldr	s3, [r3, #-16]
 800a346:	ee60 eaa5 	vmul.f32	s29, s1, s11
 800a34a:	ee7d da8f 	vadd.f32	s27, s27, s30
 800a34e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800a352:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800a356:	ee68 ba25 	vmul.f32	s23, s16, s11
 800a35a:	ee63 aa25 	vmul.f32	s21, s6, s11
 800a35e:	ee78 8aa4 	vadd.f32	s17, s17, s9
 800a362:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a366:	ee22 5aa5 	vmul.f32	s10, s5, s11
 800a36a:	ee62 5a25 	vmul.f32	s11, s4, s11
 800a36e:	ee61 4a06 	vmul.f32	s9, s2, s12
 800a372:	ee60 9a86 	vmul.f32	s19, s1, s12
 800a376:	ee60 fa06 	vmul.f32	s31, s0, s12
 800a37a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800a37e:	ee23 fa06 	vmul.f32	s30, s6, s12
 800a382:	ee3d da04 	vadd.f32	s26, s26, s8
 800a386:	ee7c ca89 	vadd.f32	s25, s25, s18
 800a38a:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800a38e:	ee28 9a06 	vmul.f32	s18, s16, s12
 800a392:	ee7d da8c 	vadd.f32	s27, s27, s24
 800a396:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800a39a:	ee22 ca86 	vmul.f32	s24, s5, s12
 800a39e:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800a3a2:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a3a6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800a3aa:	ee62 5a06 	vmul.f32	s11, s4, s12
 800a3ae:	ee21 6a86 	vmul.f32	s12, s3, s12
 800a3b2:	ee20 4a26 	vmul.f32	s8, s0, s13
 800a3b6:	ee63 ea26 	vmul.f32	s29, s6, s13
 800a3ba:	ee3a aa0c 	vadd.f32	s20, s20, s24
 800a3be:	ee22 5a26 	vmul.f32	s10, s4, s13
 800a3c2:	ee3d da24 	vadd.f32	s26, s26, s9
 800a3c6:	ee7c caa9 	vadd.f32	s25, s25, s19
 800a3ca:	ee60 4aa6 	vmul.f32	s9, s1, s13
 800a3ce:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800a3d2:	ed53 0a02 	vldr	s1, [r3, #-8]
 800a3d6:	ee68 fa26 	vmul.f32	s31, s16, s13
 800a3da:	ee7d da89 	vadd.f32	s27, s27, s18
 800a3de:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800a3e2:	ee78 8aa5 	vadd.f32	s17, s17, s11
 800a3e6:	ee22 faa6 	vmul.f32	s30, s5, s13
 800a3ea:	ee73 3a86 	vadd.f32	s7, s7, s12
 800a3ee:	ee21 6aa6 	vmul.f32	s12, s3, s13
 800a3f2:	ee61 6a26 	vmul.f32	s13, s2, s13
 800a3f6:	ee60 aa07 	vmul.f32	s21, s0, s14
 800a3fa:	ee28 ca07 	vmul.f32	s24, s16, s14
 800a3fe:	ee63 ba07 	vmul.f32	s23, s6, s14
 800a402:	ee7a 9a05 	vadd.f32	s19, s20, s10
 800a406:	ee78 8a86 	vadd.f32	s17, s17, s12
 800a40a:	ee3d da24 	vadd.f32	s26, s26, s9
 800a40e:	ee7c ca84 	vadd.f32	s25, s25, s8
 800a412:	ee7d daae 	vadd.f32	s27, s27, s29
 800a416:	ee22 9a07 	vmul.f32	s18, s4, s14
 800a41a:	ee62 ea87 	vmul.f32	s29, s5, s14
 800a41e:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a422:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800a426:	ed13 0a01 	vldr	s0, [r3, #-4]
 800a42a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a42e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800a432:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800a436:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a43a:	ee68 4a27 	vmul.f32	s9, s16, s15
 800a43e:	ee3d da2a 	vadd.f32	s26, s26, s21
 800a442:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800a446:	ee23 8a27 	vmul.f32	s16, s6, s15
 800a44a:	ee3e ea2b 	vadd.f32	s28, s28, s23
 800a44e:	ee22 4aa7 	vmul.f32	s8, s5, s15
 800a452:	ee22 aa27 	vmul.f32	s20, s4, s15
 800a456:	ee21 5aa7 	vmul.f32	s10, s3, s15
 800a45a:	ee21 6a27 	vmul.f32	s12, s2, s15
 800a45e:	ee78 6aa6 	vadd.f32	s13, s17, s13
 800a462:	ee7d daae 	vadd.f32	s27, s27, s29
 800a466:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800a46a:	ee3b ba09 	vadd.f32	s22, s22, s18
 800a46e:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800a472:	ee73 3a87 	vadd.f32	s7, s7, s14
 800a476:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a47a:	f1bb 0b01 	subs.w	fp, fp, #1
 800a47e:	f101 0120 	add.w	r1, r1, #32
 800a482:	ee3d da24 	vadd.f32	s26, s26, s9
 800a486:	ee7c ca88 	vadd.f32	s25, s25, s16
 800a48a:	ee3e ca04 	vadd.f32	s24, s28, s8
 800a48e:	ee7d ba8a 	vadd.f32	s23, s27, s20
 800a492:	ee7b aa05 	vadd.f32	s21, s22, s10
 800a496:	ee79 9a86 	vadd.f32	s19, s19, s12
 800a49a:	ee76 8aa8 	vadd.f32	s17, s13, s17
 800a49e:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800a4a2:	f103 0320 	add.w	r3, r3, #32
 800a4a6:	f47f aed8 	bne.w	800a25a <arm_fir_f32+0xfe>
 800a4aa:	eb09 0104 	add.w	r1, r9, r4
 800a4ae:	46e3      	mov	fp, ip
 800a4b0:	b3a2      	cbz	r2, 800a51c <arm_fir_f32+0x3c0>
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	ecbb 6a01 	vldmia	fp!, {s12}
 800a4b8:	ecf1 7a01 	vldmia	r1!, {s15}
 800a4bc:	ee23 3a06 	vmul.f32	s6, s6, s12
 800a4c0:	ee22 4a86 	vmul.f32	s8, s5, s12
 800a4c4:	ee62 4a06 	vmul.f32	s9, s4, s12
 800a4c8:	ee21 5a86 	vmul.f32	s10, s3, s12
 800a4cc:	ee61 5a06 	vmul.f32	s11, s2, s12
 800a4d0:	ee60 6a86 	vmul.f32	s13, s1, s12
 800a4d4:	ee20 7a06 	vmul.f32	s14, s0, s12
 800a4d8:	ee27 6a86 	vmul.f32	s12, s15, s12
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	ee3d da03 	vadd.f32	s26, s26, s6
 800a4e2:	ee7c ca84 	vadd.f32	s25, s25, s8
 800a4e6:	eeb0 3a62 	vmov.f32	s6, s5
 800a4ea:	ee3c ca24 	vadd.f32	s24, s24, s9
 800a4ee:	eef0 2a42 	vmov.f32	s5, s4
 800a4f2:	ee7b ba85 	vadd.f32	s23, s23, s10
 800a4f6:	eeb0 2a61 	vmov.f32	s4, s3
 800a4fa:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800a4fe:	eef0 1a41 	vmov.f32	s3, s2
 800a502:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800a506:	eeb0 1a60 	vmov.f32	s2, s1
 800a50a:	ee78 8a87 	vadd.f32	s17, s17, s14
 800a50e:	eef0 0a40 	vmov.f32	s1, s0
 800a512:	ee73 3a86 	vadd.f32	s7, s7, s12
 800a516:	eeb0 0a67 	vmov.f32	s0, s15
 800a51a:	d1cb      	bne.n	800a4b4 <arm_fir_f32+0x358>
 800a51c:	f1be 0e01 	subs.w	lr, lr, #1
 800a520:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 800a524:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 800a528:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 800a52c:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 800a530:	ed45 aa04 	vstr	s21, [r5, #-16]
 800a534:	ed45 9a03 	vstr	s19, [r5, #-12]
 800a538:	ed45 8a02 	vstr	s17, [r5, #-8]
 800a53c:	ed45 3a01 	vstr	s7, [r5, #-4]
 800a540:	f107 0720 	add.w	r7, r7, #32
 800a544:	f106 0620 	add.w	r6, r6, #32
 800a548:	f104 0420 	add.w	r4, r4, #32
 800a54c:	f105 0520 	add.w	r5, r5, #32
 800a550:	f47f ae3c 	bne.w	800a1cc <arm_fir_f32+0x70>
 800a554:	9b02      	ldr	r3, [sp, #8]
 800a556:	9800      	ldr	r0, [sp, #0]
 800a558:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a55c:	9907      	ldr	r1, [sp, #28]
 800a55e:	015b      	lsls	r3, r3, #5
 800a560:	4652      	mov	r2, sl
 800a562:	4418      	add	r0, r3
 800a564:	9000      	str	r0, [sp, #0]
 800a566:	4419      	add	r1, r3
 800a568:	449c      	add	ip, r3
 800a56a:	441a      	add	r2, r3
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	f013 0e07 	ands.w	lr, r3, #7
 800a572:	d01f      	beq.n	800a5b4 <arm_fir_f32+0x458>
 800a574:	9f00      	ldr	r7, [sp, #0]
 800a576:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a57a:	4676      	mov	r6, lr
 800a57c:	4665      	mov	r5, ip
 800a57e:	f851 3b04 	ldr.w	r3, [r1], #4
 800a582:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800a5cc <arm_fir_f32+0x470>
 800a586:	f847 3b04 	str.w	r3, [r7], #4
 800a58a:	4644      	mov	r4, r8
 800a58c:	464b      	mov	r3, r9
 800a58e:	4628      	mov	r0, r5
 800a590:	ecb0 7a01 	vldmia	r0!, {s14}
 800a594:	ecf4 7a01 	vldmia	r4!, {s15}
 800a598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59c:	3b01      	subs	r3, #1
 800a59e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5a2:	d1f5      	bne.n	800a590 <arm_fir_f32+0x434>
 800a5a4:	3e01      	subs	r6, #1
 800a5a6:	ece2 6a01 	vstmia	r2!, {s13}
 800a5aa:	f105 0504 	add.w	r5, r5, #4
 800a5ae:	d1e6      	bne.n	800a57e <arm_fir_f32+0x422>
 800a5b0:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	1e59      	subs	r1, r3, #1
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	088e      	lsrs	r6, r1, #2
 800a5bc:	685c      	ldr	r4, [r3, #4]
 800a5be:	d020      	beq.n	800a602 <arm_fir_f32+0x4a6>
 800a5c0:	f104 0210 	add.w	r2, r4, #16
 800a5c4:	f10c 0310 	add.w	r3, ip, #16
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	e001      	b.n	800a5d0 <arm_fir_f32+0x474>
 800a5cc:	00000000 	.word	0x00000000
 800a5d0:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800a5d4:	f842 5c10 	str.w	r5, [r2, #-16]
 800a5d8:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800a5dc:	f842 5c0c 	str.w	r5, [r2, #-12]
 800a5e0:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800a5e4:	f842 5c08 	str.w	r5, [r2, #-8]
 800a5e8:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800a5ec:	f842 5c04 	str.w	r5, [r2, #-4]
 800a5f0:	3801      	subs	r0, #1
 800a5f2:	f103 0310 	add.w	r3, r3, #16
 800a5f6:	f102 0210 	add.w	r2, r2, #16
 800a5fa:	d1e9      	bne.n	800a5d0 <arm_fir_f32+0x474>
 800a5fc:	0133      	lsls	r3, r6, #4
 800a5fe:	441c      	add	r4, r3
 800a600:	449c      	add	ip, r3
 800a602:	f011 0303 	ands.w	r3, r1, #3
 800a606:	d006      	beq.n	800a616 <arm_fir_f32+0x4ba>
 800a608:	4622      	mov	r2, r4
 800a60a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a60e:	f842 1b04 	str.w	r1, [r2], #4
 800a612:	3b01      	subs	r3, #1
 800a614:	d1f9      	bne.n	800a60a <arm_fir_f32+0x4ae>
 800a616:	b009      	add	sp, #36	@ 0x24
 800a618:	ecbd 8b10 	vpop	{d8-d15}
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	46c3      	mov	fp, r8
 800a622:	e745      	b.n	800a4b0 <arm_fir_f32+0x354>

0800a624 <malloc>:
 800a624:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <malloc+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f000 b82d 	b.w	800a688 <_malloc_r>
 800a62e:	bf00      	nop
 800a630:	2000002c 	.word	0x2000002c

0800a634 <free>:
 800a634:	4b02      	ldr	r3, [pc, #8]	@ (800a640 <free+0xc>)
 800a636:	4601      	mov	r1, r0
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	f000 b8f5 	b.w	800a828 <_free_r>
 800a63e:	bf00      	nop
 800a640:	2000002c 	.word	0x2000002c

0800a644 <sbrk_aligned>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4e0f      	ldr	r6, [pc, #60]	@ (800a684 <sbrk_aligned+0x40>)
 800a648:	460c      	mov	r4, r1
 800a64a:	6831      	ldr	r1, [r6, #0]
 800a64c:	4605      	mov	r5, r0
 800a64e:	b911      	cbnz	r1, 800a656 <sbrk_aligned+0x12>
 800a650:	f000 f8ae 	bl	800a7b0 <_sbrk_r>
 800a654:	6030      	str	r0, [r6, #0]
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f8a9 	bl	800a7b0 <_sbrk_r>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	d103      	bne.n	800a66a <sbrk_aligned+0x26>
 800a662:	f04f 34ff 	mov.w	r4, #4294967295
 800a666:	4620      	mov	r0, r4
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	1cc4      	adds	r4, r0, #3
 800a66c:	f024 0403 	bic.w	r4, r4, #3
 800a670:	42a0      	cmp	r0, r4
 800a672:	d0f8      	beq.n	800a666 <sbrk_aligned+0x22>
 800a674:	1a21      	subs	r1, r4, r0
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f89a 	bl	800a7b0 <_sbrk_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	d1f2      	bne.n	800a666 <sbrk_aligned+0x22>
 800a680:	e7ef      	b.n	800a662 <sbrk_aligned+0x1e>
 800a682:	bf00      	nop
 800a684:	200009e0 	.word	0x200009e0

0800a688 <_malloc_r>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	1ccd      	adds	r5, r1, #3
 800a68e:	f025 0503 	bic.w	r5, r5, #3
 800a692:	3508      	adds	r5, #8
 800a694:	2d0c      	cmp	r5, #12
 800a696:	bf38      	it	cc
 800a698:	250c      	movcc	r5, #12
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	4606      	mov	r6, r0
 800a69e:	db01      	blt.n	800a6a4 <_malloc_r+0x1c>
 800a6a0:	42a9      	cmp	r1, r5
 800a6a2:	d904      	bls.n	800a6ae <_malloc_r+0x26>
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a784 <_malloc_r+0xfc>
 800a6b2:	f000 f869 	bl	800a788 <__malloc_lock>
 800a6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ba:	461c      	mov	r4, r3
 800a6bc:	bb44      	cbnz	r4, 800a710 <_malloc_r+0x88>
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7ff ffbf 	bl	800a644 <sbrk_aligned>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	d158      	bne.n	800a77e <_malloc_r+0xf6>
 800a6cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a6d0:	4627      	mov	r7, r4
 800a6d2:	2f00      	cmp	r7, #0
 800a6d4:	d143      	bne.n	800a75e <_malloc_r+0xd6>
 800a6d6:	2c00      	cmp	r4, #0
 800a6d8:	d04b      	beq.n	800a772 <_malloc_r+0xea>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	4639      	mov	r1, r7
 800a6de:	4630      	mov	r0, r6
 800a6e0:	eb04 0903 	add.w	r9, r4, r3
 800a6e4:	f000 f864 	bl	800a7b0 <_sbrk_r>
 800a6e8:	4581      	cmp	r9, r0
 800a6ea:	d142      	bne.n	800a772 <_malloc_r+0xea>
 800a6ec:	6821      	ldr	r1, [r4, #0]
 800a6ee:	1a6d      	subs	r5, r5, r1
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7ff ffa6 	bl	800a644 <sbrk_aligned>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d03a      	beq.n	800a772 <_malloc_r+0xea>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	442b      	add	r3, r5
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	f8d8 3000 	ldr.w	r3, [r8]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	bb62      	cbnz	r2, 800a764 <_malloc_r+0xdc>
 800a70a:	f8c8 7000 	str.w	r7, [r8]
 800a70e:	e00f      	b.n	800a730 <_malloc_r+0xa8>
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	1b52      	subs	r2, r2, r5
 800a714:	d420      	bmi.n	800a758 <_malloc_r+0xd0>
 800a716:	2a0b      	cmp	r2, #11
 800a718:	d917      	bls.n	800a74a <_malloc_r+0xc2>
 800a71a:	1961      	adds	r1, r4, r5
 800a71c:	42a3      	cmp	r3, r4
 800a71e:	6025      	str	r5, [r4, #0]
 800a720:	bf18      	it	ne
 800a722:	6059      	strne	r1, [r3, #4]
 800a724:	6863      	ldr	r3, [r4, #4]
 800a726:	bf08      	it	eq
 800a728:	f8c8 1000 	streq.w	r1, [r8]
 800a72c:	5162      	str	r2, [r4, r5]
 800a72e:	604b      	str	r3, [r1, #4]
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f82f 	bl	800a794 <__malloc_unlock>
 800a736:	f104 000b 	add.w	r0, r4, #11
 800a73a:	1d23      	adds	r3, r4, #4
 800a73c:	f020 0007 	bic.w	r0, r0, #7
 800a740:	1ac2      	subs	r2, r0, r3
 800a742:	bf1c      	itt	ne
 800a744:	1a1b      	subne	r3, r3, r0
 800a746:	50a3      	strne	r3, [r4, r2]
 800a748:	e7af      	b.n	800a6aa <_malloc_r+0x22>
 800a74a:	6862      	ldr	r2, [r4, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	bf0c      	ite	eq
 800a750:	f8c8 2000 	streq.w	r2, [r8]
 800a754:	605a      	strne	r2, [r3, #4]
 800a756:	e7eb      	b.n	800a730 <_malloc_r+0xa8>
 800a758:	4623      	mov	r3, r4
 800a75a:	6864      	ldr	r4, [r4, #4]
 800a75c:	e7ae      	b.n	800a6bc <_malloc_r+0x34>
 800a75e:	463c      	mov	r4, r7
 800a760:	687f      	ldr	r7, [r7, #4]
 800a762:	e7b6      	b.n	800a6d2 <_malloc_r+0x4a>
 800a764:	461a      	mov	r2, r3
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d1fb      	bne.n	800a764 <_malloc_r+0xdc>
 800a76c:	2300      	movs	r3, #0
 800a76e:	6053      	str	r3, [r2, #4]
 800a770:	e7de      	b.n	800a730 <_malloc_r+0xa8>
 800a772:	230c      	movs	r3, #12
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	4630      	mov	r0, r6
 800a778:	f000 f80c 	bl	800a794 <__malloc_unlock>
 800a77c:	e794      	b.n	800a6a8 <_malloc_r+0x20>
 800a77e:	6005      	str	r5, [r0, #0]
 800a780:	e7d6      	b.n	800a730 <_malloc_r+0xa8>
 800a782:	bf00      	nop
 800a784:	200009e4 	.word	0x200009e4

0800a788 <__malloc_lock>:
 800a788:	4801      	ldr	r0, [pc, #4]	@ (800a790 <__malloc_lock+0x8>)
 800a78a:	f000 b84b 	b.w	800a824 <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	20000b24 	.word	0x20000b24

0800a794 <__malloc_unlock>:
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <__malloc_unlock+0x8>)
 800a796:	f000 b846 	b.w	800a826 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	20000b24 	.word	0x20000b24

0800a7a0 <memset>:
 800a7a0:	4402      	add	r2, r0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d100      	bne.n	800a7aa <memset+0xa>
 800a7a8:	4770      	bx	lr
 800a7aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ae:	e7f9      	b.n	800a7a4 <memset+0x4>

0800a7b0 <_sbrk_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d06      	ldr	r5, [pc, #24]	@ (800a7cc <_sbrk_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	602b      	str	r3, [r5, #0]
 800a7bc:	f7f6 fbae 	bl	8000f1c <_sbrk>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_sbrk_r+0x1a>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_sbrk_r+0x1a>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	20000b20 	.word	0x20000b20

0800a7d0 <__errno>:
 800a7d0:	4b01      	ldr	r3, [pc, #4]	@ (800a7d8 <__errno+0x8>)
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	2000002c 	.word	0x2000002c

0800a7dc <__libc_init_array>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4d0d      	ldr	r5, [pc, #52]	@ (800a814 <__libc_init_array+0x38>)
 800a7e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a818 <__libc_init_array+0x3c>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	d109      	bne.n	800a800 <__libc_init_array+0x24>
 800a7ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a81c <__libc_init_array+0x40>)
 800a7ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a820 <__libc_init_array+0x44>)
 800a7f0:	f000 f864 	bl	800a8bc <_init>
 800a7f4:	1b64      	subs	r4, r4, r5
 800a7f6:	10a4      	asrs	r4, r4, #2
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	42a6      	cmp	r6, r4
 800a7fc:	d105      	bne.n	800a80a <__libc_init_array+0x2e>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	f855 3b04 	ldr.w	r3, [r5], #4
 800a804:	4798      	blx	r3
 800a806:	3601      	adds	r6, #1
 800a808:	e7ee      	b.n	800a7e8 <__libc_init_array+0xc>
 800a80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80e:	4798      	blx	r3
 800a810:	3601      	adds	r6, #1
 800a812:	e7f2      	b.n	800a7fa <__libc_init_array+0x1e>
 800a814:	0800aafc 	.word	0x0800aafc
 800a818:	0800aafc 	.word	0x0800aafc
 800a81c:	0800aafc 	.word	0x0800aafc
 800a820:	0800ab00 	.word	0x0800ab00

0800a824 <__retarget_lock_acquire_recursive>:
 800a824:	4770      	bx	lr

0800a826 <__retarget_lock_release_recursive>:
 800a826:	4770      	bx	lr

0800a828 <_free_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4605      	mov	r5, r0
 800a82c:	2900      	cmp	r1, #0
 800a82e:	d041      	beq.n	800a8b4 <_free_r+0x8c>
 800a830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a834:	1f0c      	subs	r4, r1, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	18e4      	addlt	r4, r4, r3
 800a83c:	f7ff ffa4 	bl	800a788 <__malloc_lock>
 800a840:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b8 <_free_r+0x90>)
 800a842:	6813      	ldr	r3, [r2, #0]
 800a844:	b933      	cbnz	r3, 800a854 <_free_r+0x2c>
 800a846:	6063      	str	r3, [r4, #4]
 800a848:	6014      	str	r4, [r2, #0]
 800a84a:	4628      	mov	r0, r5
 800a84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a850:	f7ff bfa0 	b.w	800a794 <__malloc_unlock>
 800a854:	42a3      	cmp	r3, r4
 800a856:	d908      	bls.n	800a86a <_free_r+0x42>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	1821      	adds	r1, r4, r0
 800a85c:	428b      	cmp	r3, r1
 800a85e:	bf01      	itttt	eq
 800a860:	6819      	ldreq	r1, [r3, #0]
 800a862:	685b      	ldreq	r3, [r3, #4]
 800a864:	1809      	addeq	r1, r1, r0
 800a866:	6021      	streq	r1, [r4, #0]
 800a868:	e7ed      	b.n	800a846 <_free_r+0x1e>
 800a86a:	461a      	mov	r2, r3
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b10b      	cbz	r3, 800a874 <_free_r+0x4c>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x42>
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	1850      	adds	r0, r2, r1
 800a878:	42a0      	cmp	r0, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x6c>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	4401      	add	r1, r0
 800a880:	1850      	adds	r0, r2, r1
 800a882:	4283      	cmp	r3, r0
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	d1e0      	bne.n	800a84a <_free_r+0x22>
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	6053      	str	r3, [r2, #4]
 800a88e:	4408      	add	r0, r1
 800a890:	6010      	str	r0, [r2, #0]
 800a892:	e7da      	b.n	800a84a <_free_r+0x22>
 800a894:	d902      	bls.n	800a89c <_free_r+0x74>
 800a896:	230c      	movs	r3, #12
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	e7d6      	b.n	800a84a <_free_r+0x22>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	1821      	adds	r1, r4, r0
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	bf04      	itt	eq
 800a8a4:	6819      	ldreq	r1, [r3, #0]
 800a8a6:	685b      	ldreq	r3, [r3, #4]
 800a8a8:	6063      	str	r3, [r4, #4]
 800a8aa:	bf04      	itt	eq
 800a8ac:	1809      	addeq	r1, r1, r0
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	6054      	str	r4, [r2, #4]
 800a8b2:	e7ca      	b.n	800a84a <_free_r+0x22>
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	200009e4 	.word	0x200009e4

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
